import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import callfunc from "call-func";
import { doc } from "win-doc";
import { KEYS } from "reshow-constant";

var inject = function inject(base, isPrepend) {
  return function (dNode) {
    base = callfunc(base);

    if (base && (base.nodeName === "BODY" || base.nodeName === "HEAD")) {
      if (isPrepend && base.firstChild) {
        base.insertBefore(dNode, base.firstChild);
        return;
      } else {
        base.appendChild(dNode);
        return;
      }
    } else {
      var d = doc();

      if (!base) {
        base = d.currentScript ? d.currentScript : d.body;
      }

      var parentNode = base.parentNode;

      if (parentNode) {
        if (!isPrepend) {
          if (base.nextSibling) {
            parentNode.insertBefore(dNode, base.nextSibling);
            return;
          } else {
            parentNode.appendChild(dNode);
            return;
          }
        } else {
          parentNode.insertBefore(dNode, base);
          return;
        }
      }

      d.body.appendChild(dNode);
    }
  };
};

var create = function create(tag) {
  return function (callback) {
    return function (attrs) {
      var d = doc();

      if (d.createElement) {
        var dNode = d.createElement(tag);

        if (attrs) {
          KEYS(attrs).forEach(function (key) {
            return dNode[key] = attrs[key];
          });
        }

        if (callback) {
          var _isRun;

          dNode.onreadystatechange = dNode.onload = function () {
            var readyState = dNode.readyState;

            if (!readyState || -1 !== "|loaded|complete|".indexOf("|" + readyState + "|")) {
              if (!_isRun) {
                _isRun = true;
                setTimeout(callback);
              }
            }
          };
        }

        return dNode;
      }
    };
  };
};

var remove = function remove(dNode) {
  if (dNode) {
    try {
      dNode.parentNode.removeChild(dNode);
      dNode = null;
    } catch (e) {}
  }
};

var js = function js(base, isPrepend) {
  return function (callback) {
    return function (url, attrs) {
      var dNode = create("script")(callback)(attrs);

      if (false !== base) {
        inject(base, isPrepend)(dNode);
      }

      dNode.src = url;
      return dNode;
    };
  };
};

var css = function css(base, isPrepend) {
  return function (callback) {
    return function (url, attrs) {
      var dNode = create("link")(callback)(_objectSpread({
        rel: "stylesheet",
        type: "text/css"
      }, attrs));

      if (false !== base) {
        inject(base, isPrepend)(dNode);
      }

      dNode.href = url;
      return dNode;
    };
  };
};

export { js, css, inject, create, remove };