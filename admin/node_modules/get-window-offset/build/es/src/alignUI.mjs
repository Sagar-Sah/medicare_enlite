import getOffset from "getoffset";
import getScrollInfo from "get-scroll-info";
import get from "get-object-value";
import getDomPositionInfo from "./getDomPositionInfo.mjs";
import getAfterMove from "./getAfterMove.mjs";
import getWindowOffset from "./getWindowOffset.mjs";
import alignWith from "./alignWith.mjs";
import isFullOnScreen from "./isFullOnScreen.mjs";
import pos from "./positions.mjs";
import getPositionString from "./getPositionString.mjs";
var getAlignWithLoc = function getAlignWithLoc(toLoc) {
  var loc;
  switch (toLoc) {
    case pos.TR:
      loc = pos.TL;
      break;
    case pos.TL:
      loc = pos.TR;
      break;
    case pos.RB:
      loc = pos.BL;
      break;
    case pos.BL:
      loc = pos.RB;
      break;
    default:
      loc = toLoc;
      break;
  }
  return loc;
};
var fixFixedNode = function fixFixedNode(scrollInfo) {
  return function (move) {
    return [move[0] + scrollInfo.left, move[1] + scrollInfo.top];
  };
};
var fixScrollNode = function fixScrollNode(scrollInfo) {
  return function (move) {
    return [move[0] - scrollInfo.left, move[1] - scrollInfo.top];
  };
};
var alignUI = function alignUI(targetEl, floatEl, alignParams, winInfo) {
  var {
    toLoc,
    disableAutoLoc,
    positionFixed,
    exclude
  } = get(alignParams, null, {});
  if (!targetEl) {
    console.warn("targetEl was empty", {
      targetEl
    });
    return false;
  }
  var targetInfo;
  var locs = [];
  if (toLoc) {
    locs.push(toLoc);
  }
  if (!disableAutoLoc) {
    winInfo = winInfo || getWindowOffset(targetEl);
    if (!winInfo) {
      console.warn("get windows offset failed", {
        targetEl
      });
    } else {
      locs = locs.concat(winInfo.locs);
    }
  }
  if (!locs.length) {
    console.warn("Not set any locs", {
      toLoc
    });
    return false;
  }
  if (!targetInfo) {
    if (winInfo) {
      targetInfo = winInfo.domInfo;
    } else {
      targetInfo = getDomPositionInfo(targetEl).domInfo;
    }
  }
  if (!targetInfo) {
    console.warn("[alertUI] can't get target info.", {
      targetEl,
      winInfo
    });
    return false;
  }
  var adjustMove;
  var scrollNode = targetInfo.scrollNode;
  var fixedNode = targetInfo.fixedNode;
  if (fixedNode) {
    if (fixedNode.contains(floatEl)) {
      adjustMove = fixFixedNode(getScrollInfo(fixedNode));
    } else if (positionFixed) {
      adjustMove = fixScrollNode(getScrollInfo(fixedNode));
    } else {
      if (winInfo) {
        adjustMove = fixFixedNode(winInfo.scrollInfo);
      } else {
        adjustMove = fixFixedNode(getScrollInfo());
      }
    }
  } else if (scrollNode) {
    adjustMove = fixScrollNode(getScrollInfo(scrollNode));
  }
  var loc;
  var move;
  var floatInfo = getOffset(floatEl);
  locs.some(function (locItem) {
    loc = locItem;
    if (exclude && -1 !== exclude.indexOf(loc)) {
      return false;
    }
    move = alignWith(targetInfo, floatInfo, loc);
    if (adjustMove) {
      move = adjustMove(move);
    }
    if (!winInfo) {
      return true;
    } else {
      var movePos = getAfterMove(floatInfo, move);
      var bFullOnScreen = isFullOnScreen(movePos, winInfo.scrollInfo);
      if (bFullOnScreen) {
        return true;
      } else {
        return false;
      }
    }
  });
  if (!move) {
    return false;
  }
  var result = {
    loc,
    move,
    toLoc: toLoc || loc,
    locClassName: getPositionString(loc)
  };
  //   console.log(result, {locs, winInfo});
  return result;
};
export default alignUI;