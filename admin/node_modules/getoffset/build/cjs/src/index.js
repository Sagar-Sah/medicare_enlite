"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.unifyTouch = exports.toSvgXY = exports.mouse = exports.getSvgMatrixXY = exports["default"] = void 0;
var _getScrollInfo = _interopRequireDefault(require("get-scroll-info"));
var _getObjectValue = _interopRequireDefault(require("get-object-value"));
var _reshowConstant = require("reshow-constant");
//@ts-check

/**
 * @typedef {object} Coordinate
 * @property {number} [x]
 * @property {number} [y]
 */

/**
 * @param {object} e
 */
var unifyTouch = function unifyTouch(e) {
  return e && e.changedTouches ? (0, _getObjectValue["default"])(e, ["changedTouches", 0]) : e;
};

/**
 * @param {object} e
 * @param {HTMLElement} dom
 * @param {HTMLElement} scrollNode
 * @returns {[number, number]}
 */
exports.unifyTouch = unifyTouch;
var mouse = function mouse(e, dom, scrollNode) {
  if (!dom) {
    dom = e.currentTarget || e.target;
  }
  e = unifyTouch(e);
  var x = e.clientX;
  var y = e.clientY;
  var svgXY = toSvgXY(dom)(x, y);
  if ((0, _reshowConstant.OBJ_SIZE)(svgXY)) {
    var svgX = svgXY.x,
      svgY = svgXY.y;
    return [svgX, svgY];
  } else {
    var domXY = getOffset(dom, scrollNode);
    /**
     * dom.clientLeft
     *
     * https://www.w3schools.com/jsref/prop_element_clientleft.asp
     */
    return [x - domXY.left - dom.clientLeft, y - domXY.top - dom.clientTop];
  }
};

/**
 * @param {object} dom
 * @param {object} zoom
 */
exports.mouse = mouse;
var toSvgXY = function toSvgXY(dom, zoom) {
  return (
    /**
     * @param {number} x
     * @param {number} y
     * @returns {Coordinate}
     */
    function (x, y) {
      var svg = dom.ownerSVGElement || dom;
      if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();
        point.x = x;
        point.y = y;
        point = point.matrixTransform(dom.getScreenCTM().inverse());
        return getZoomXY(zoom)(point.x, point.y);
      } else {
        return {};
      }
    }
  );
};

/**
 * @param {object} dom
 * @param {object} zoom
 */
exports.toSvgXY = toSvgXY;
var getSvgMatrixXY = function getSvgMatrixXY(dom, zoom) {
  return (
    /**
     * @param {number} x
     * @param {number} y
     * @returns {Coordinate}
     */
    function (x, y) {
      var svg = dom.ownerSVGElement || dom;
      if (svg.getScreenCTM) {
        var _dom$getScreenCTM = dom.getScreenCTM(),
          a = _dom$getScreenCTM.a,
          b = _dom$getScreenCTM.b,
          c = _dom$getScreenCTM.c,
          d = _dom$getScreenCTM.d,
          e = _dom$getScreenCTM.e,
          f = _dom$getScreenCTM.f;
        var _svg$getBoundingClien = svg.getBoundingClientRect(),
          left = _svg$getBoundingClien.left,
          top = _svg$getBoundingClien.top;
        var svgX = a * x + c * y + e - left;
        var svgY = b * x + d * y + f - top;
        return getZoomXY(zoom)(svgX, svgY);
      }
    }
  );
};

/**
 * @param {object} zoom
 */
exports.getSvgMatrixXY = getSvgMatrixXY;
var getZoomXY = function getZoomXY(zoom) {
  return (
    /**
     * @param {number} x
     * @param {number} y
     * @returns {Coordinate}
     */
    function (x, y) {
      if (!zoom) {
        return {
          x: x,
          y: y
        };
      }
      var zoomK = (0, _getObjectValue["default"])(zoom, ["k"], 1);
      var zoomX = (0, _getObjectValue["default"])(zoom, ["x"], 0);
      var zoomY = (0, _getObjectValue["default"])(zoom, ["y"], 0);
      var zx = (x - zoomX) / zoomK;
      var zy = (y - zoomY) / zoomK;
      return {
        x: zx,
        y: zy
      };
    }
  );
};

/**
 * @param {object} dom
 * @returns {Coordinate}
 */
var getRectWithElOffset = function getRectWithElOffset(dom) {
  var x = 0;
  var y = 0;
  var el = dom;
  do {
    var offsetTop = el.offsetTop || 0;
    var offsetLeft = el.offsetLeft || 0;
    if ("BODY" === el.nodeName) {
      x += offsetLeft;
      y += offsetTop;
    } else {
      x += offsetLeft - el.scrollLeft;
      y += offsetTop - el.scrollTop;
    }
    el = el.offsetParent;
  } while (el);
  return {
    x: x,
    y: y
  };
};

/**
 * @typedef {object} Offset
 * @property {object} rect
 * @property {object} scrollInfo
 * @property {number} w
 * @property {number} h
 * @property {number} width
 * @property {number} height
 * @property {number} x
 * @property {number} y
 * @property {number} top
 * @property {number} right
 * @property {number} bottom
 * @property {number} left
 */

/**
 * @param {HTMLElement} dom
 * @param {HTMLElement|number} scrollNode
 * @returns {Offset}
 */
var getOffset = function getOffset(dom, scrollNode) {
  if (scrollNode === void 0) {
    scrollNode = null;
  }
  if (!dom) {
    return;
  }
  var top = 0;
  var left = 0;
  var w;
  var h;
  var rect;
  var scrollInfo = 0 === scrollNode ? {
    top: 0,
    left: 0
  } : (0, _getScrollInfo["default"])(scrollNode);
  if (_reshowConstant.UNDEFINED !== typeof SVGElement && dom instanceof SVGElement) {
    rect = dom.getBoundingClientRect();
    top = rect.top + scrollInfo.top;
    left = rect.left + scrollInfo.left;
    w = rect.width;
    h = rect.height;
  } else {
    w = dom.offsetWidth;
    h = dom.offsetHeight;
    if (dom.getBoundingClientRect) {
      rect = dom.getBoundingClientRect();
      top = (rect.top + scrollInfo.top) * 1;
      left = (rect.left + scrollInfo.left) * 1;
    } else {
      var rectOffset = getRectWithElOffset(dom);
      top = rectOffset.y;
      left = rectOffset.x;
    }
  }
  var result = {
    rect: rect,
    scrollInfo: scrollInfo,
    w: w,
    h: h,
    width: w,
    height: h,
    x: left,
    y: top,
    top: top,
    right: left + w,
    bottom: top + h,
    left: left
  };
  return result;
};
var _default = getOffset;
exports["default"] = _default;