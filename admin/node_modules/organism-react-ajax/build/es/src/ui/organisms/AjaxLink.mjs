import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["updateUrl", "disableRandom", "component", "href", "ajax", "target", "callback", "errorCallback", "scrollBack", "path", "onClick", "onTouchStart"];
import React, { forwardRef, useImperativeHandle, useRef, useCallback, useEffect, useState } from "react";
import callfunc from "call-func";
import build from "reshow-build";
import ajaxStore, { ajaxDispatch, getRawUrl, hasUrl } from "../../stores/ajaxStore.mjs";
import isRunAjax from "../../isRunAjax.mjs";
var getHref = function getHref(_ref) {
  var {
    href,
    path
  } = _ref;
  if (hasUrl(href)) {
    return href;
  }
  if (path) {
    var baseUrl = ajaxStore.getState().get("baseUrl");
    return baseUrl ? getRawUrl({
      path,
      baseUrl
    }) : "#";
  } else {
    return null;
  }
};
var useAjaxLink = function useAjaxLink(props) {
  var {
      updateUrl = true,
      disableRandom = false,
      component = "a",
      href: propsHref = "#",
      ajax,
      target,
      callback,
      errorCallback,
      scrollBack,
      path,
      onClick,
      onTouchStart
    } = props,
    rest = _objectWithoutProperties(props, _excluded);
  var isAlreadyTouchStart = useRef(false);
  var [href, setHref] = useState(propsHref);
  useEffect(function () {
    var nextHref = getHref({
      href: propsHref,
      path
    });
    if (hasUrl(href) && !hasUrl(nextHref)) {
      return;
    } else {
      setHref(nextHref);
    }
  }, [propsHref, path]);
  var go = useCallback(function (url) {
    url = url || getRawUrl({
      path,
      url: href
    });
    ajaxDispatch("ajaxGet", {
      disableAjax: !isRunAjax({
        ajax
      }),
      url,
      updateUrl,
      disableRandom,
      callback,
      errorCallback,
      scrollBack
    });
  }, [href, callback, errorCallback, updateUrl, disableRandom, ajax]);
  var handleClick = useCallback(function (callback) {
    return function (type) {
      return function (e) {
        var thisHref = href;
        if (!hasUrl(thisHref)) {
          /**
           * should pass empty url to getRawUrl for this case
           * getRawUrl will tyr get url with baseUrl
           */
          var toBaseUrl = getRawUrl({
            path
          });
          if (toBaseUrl) {
            thisHref = toBaseUrl;
            e.currentTarget.href = thisHref;
          }
        }
        if ("_blank" !== target) {
          e.preventDefault();
        }
        if ("touchStart" === type) {
          isAlreadyTouchStart.current = true;
        } else {
          if (isAlreadyTouchStart.current) {
            isAlreadyTouchStart.current = false;
            return;
          }
        }
        var isContinue = callfunc(callback, [e]);
        if ("_blank" !== target && false !== isContinue) {
          /**
           *  Must use e.currentTarget.href here
           *  becaue it maybe change with callback
           */
          go(e.currentTarget.href);
          setHref(e.currentTarget.href);
        }
      };
    };
  }, [target, href]);
  var expose = {
    go
  };
  return {
    expose,
    component,
    rest,
    target,
    href,
    path,
    onTouchStart: true === onTouchStart ? handleClick(onTouchStart)("touchStart") : onTouchStart,
    onClick: handleClick(onClick)("click")
  };
};
var AjaxLink = /*#__PURE__*/forwardRef(function (props, ref) {
  var {
    expose,
    component,
    rest,
    target,
    href,
    path,
    onTouchStart,
    onClick
  } = useAjaxLink(props);
  useImperativeHandle(ref, function () {
    return expose;
  }, []);
  return build(component)(_objectSpread(_objectSpread({}, rest), {}, {
    ref,
    target,
    href,
    "data-path": path,
    onTouchStart,
    onClick
  }));
});
AjaxLink.displayName = "AjaxLink";
export default AjaxLink;