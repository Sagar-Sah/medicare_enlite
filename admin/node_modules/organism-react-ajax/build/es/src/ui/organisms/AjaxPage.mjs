import React, { isValidElement, useEffect, useRef, useMemo, Suspense } from "react";
import build from "reshow-build";
import { win as getWin } from "win-doc";
import { ajaxDispatch } from "../../stores/ajaxStore.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
var AjaxPage = function AjaxPage(props) {
  var {
    win = getWin(),
    ajax = true,
    baseUrl,
    staticVersion,
    callback,
    themes = {},
    themePath,
    fallback,
    webSocketUrl
  } = props;
  var lastThemePath = useRef();
  useEffect(function () {
    ajaxDispatch({
      ajax,
      baseUrl,
      staticVersion,
      callback
    });
  }, [ajax, baseUrl, staticVersion, callback]);
  useEffect(function () {
    if (win.WebSocket && webSocketUrl) {
      ajaxDispatch("ws/init", {
        url: webSocketUrl
      });
    }
  }, [webSocketUrl]);
  return useMemo(function () {
    var thisThemePath = themePath;
    if (null == themes[thisThemePath]) {
      thisThemePath = lastThemePath.current;
      if (null == themes[thisThemePath]) {
        console.error("Not find a theme for name: [" + themePath + "]", themes);
        return null;
      }
    } else {
      lastThemePath.current = thisThemePath;
    }
    var myTheme = themes[thisThemePath];
    var builded = build(myTheme)();
    if (! /*#__PURE__*/isValidElement(builded)) {
      console.error("Not find a valid element for name: [" + themePath + "]", {
        "Theme List": themes,
        "Theme Path": thisThemePath,
        "Element before build:": myTheme,
        "Element builded:": builded
      });
      return null;
    } else {
      var fallbackEl = fallback || "div";
      return /*#__PURE__*/_jsx(Suspense, {
        fallback: build(fallbackEl)(),
        children: builded
      });
    }
  }, [themePath]);
};
export default AjaxPage;