"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.parseAniValue = exports.initAni = void 0;

var _reactAtomicMolecule = require("react-atomic-molecule");

var _reshowConstant = require("reshow-constant");

var _keyframeCss = _interopRequireDefault(require("keyframe-css"));

var _getObjectValue = require("get-object-value");

//@ts-check
var inject = (0, _reshowConstant.NEW_OBJ)();
var injectDone = (0, _reshowConstant.NEW_OBJ)();
var injectCb = (0, _reshowConstant.NEW_OBJ)();
/**
 * @param {string} aniName
 */

var cleanTask = function cleanTask(aniName) {
  var i = injectCb[aniName].length;
  var tempArr = injectCb[aniName].splice(0, i);

  while (i--) {
    tempArr[i](injectDone[aniName]);
  }

  (0, _reactAtomicMolecule.injectStyle)();
};
/**
 * @param {string} key
 * @param {string} aniName
 * @param {number} timeout
 * @param {function} callback
 */


var initAni = function initAni(key, aniName, timeout, callback) {
  injectDone[aniName] ? callback() : (0, _getObjectValue.initMap)(injectCb)(aniName, []).push(callback);

  if (inject[key]) {
    return;
  }
  /**
   * @param {boolean} inject
   */


  var buildAniStyle = function buildAniStyle(inject) {
    (0, _reactAtomicMolecule.reactStyle)({
      animationName: [aniName],
      animationDuration: [timeout + 1 + "ms"],
      animationIterationCount: [1],
      animationTimingFunction: ["steps(" + Math.floor(timeout / 30) + ", end)"]
    }, "." + key, key);

    if (inject) {
      (0, _reactAtomicMolecule.injectStyle)();
    }
  };

  injectDone[aniName] ? buildAniStyle(true) : injectCb[aniName].push(buildAniStyle); // Need locate after reactStyle, for inject latest style in getKeyframe function

  (0, _keyframeCss["default"])(aniName, function () {
    injectDone[aniName] = true;
    cleanTask(aniName);
  });
  inject[key] = true;
};
/**
 * @typedef {object} AnimationData
 * @property {string} className
 * @property {string} key
 * @property {string} name
 * @property {number} timeout
 * @property {number} delay
 */

/**
 * @param {string} s
 * @returns {AnimationData}
 */


exports.initAni = initAni;

var parseAniValue = function parseAniValue(s) {
  if (s === void 0) {
    s = "";
  }

  var data = s.split("-");
  var name = data[0];
  var timeout = 500;
  var delay = 0;

  if (!isNaN(Number(data[1]))) {
    timeout = parseInt(data[1], 10);
  }

  if (!isNaN(Number(data[2]))) {
    delay = parseInt(data[2], 10);
    timeout += delay;
  }

  var key = [name, timeout, delay].join("-");
  return {
    className: key + " " + name,
    key: key,
    name: name,
    timeout: timeout,
    delay: delay
  };
};

exports.parseAniValue = parseAniValue;