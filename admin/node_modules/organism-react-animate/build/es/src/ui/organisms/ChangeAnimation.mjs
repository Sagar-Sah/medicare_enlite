import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["statusKey", "onEnd", "animation", "children"];
// @ts-check
import { useState, useRef, useEffect } from "react";
import { build, useLazyInject } from "react-atomic-molecule";
import CSSTransition from "../organisms/CSSTransition.mjs";
import { initAni, parseAniValue } from "../../aniUtil.mjs";
import { dataStatusKey } from "../../const.mjs";
import { InjectStyles } from "../../initAniStyle.mjs";
var injects = {};
/**
 * @typedef {object} ChangeAnimationProps
 * @property {string} [statusKey]
 * @property {function} [onEnd]
 * @property {string} [animation]
 * @property {React.ReactElement|string} children
 * @property {Object} [otherProps]
 */

/**
 * @param {ChangeAnimationProps} param
 * @returns {React.ReactElement}
 */

var ChangeAnimation = function ChangeAnimation(_ref) {
  var {
    statusKey = dataStatusKey,
    onEnd = null,
    animation = null,
    children
  } = _ref,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var defaultAniProps = {
    in: false
  };
  var [aniProps, setAniProps] = useState(defaultAniProps);
  var lastAnimation = useRef({
    init: false,
    animation: null
  });
  injects[statusKey] = useLazyInject(InjectStyles({
    statusKey
  }), injects[statusKey]);
  useEffect(function () {
    if ("" === animation) {
      lastAnimation.current.animation = null;
      setAniProps(defaultAniProps);
    } else {
      var aniData = parseAniValue(animation);
      initAni(aniData.key, aniData.name, aniData.timeout, function () {
        var thisAniProps = {
          in: true,
          appear: true,
          enter: true,
          exit: false,
          classNames: {
            appear: aniData.className,
            enter: aniData.className
          },
          timeout: {
            appear: aniData.timeout,
            enter: aniData.timeout
          },
          delay: {
            appear: aniData.delay,
            enter: aniData.delay
          }
        };

        if (lastAnimation.current.animation !== animation) {
          setTimeout(function () {
            lastAnimation.current = {
              init: true,
              animation
            };
            setAniProps(thisAniProps);
          });
        }
      });
    }
  }, [animation]);

  if (!lastAnimation.current.init) {
    return null;
  } else {
    return build(CSSTransition)(_objectSpread(_objectSpread({
      addEndListener: onEnd
    }, aniProps), otherProps), children);
  }
};

export default ChangeAnimation;