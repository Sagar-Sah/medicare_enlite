import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";

var _Transition, _Transition2, _SemanticUI;

import { expect } from "chai";
import { render, act, waitFor } from "reshow-unit";
import Transition from "../Transition.mjs";
import { dataStatusKey } from "../../../const.mjs";
import { SemanticUI } from "react-atomic-molecule";
import { jsx as _jsx } from "react/jsx-runtime";
describe("Test Transition", function () {
  it("basic test", /*#__PURE__*/_asyncToGenerator(function* () {
    var vDom = _Transition || (_Transition = /*#__PURE__*/_jsx(Transition, {
      children: /*#__PURE__*/_jsx("div", {})
    }));

    var wrap = render(vDom);
    yield waitFor(function () {
      act(function () {
        expect(wrap.html()).to.have.string(dataStatusKey + "=\"exited\"");
      });
    });
  }));
  it("test in=true", /*#__PURE__*/_asyncToGenerator(function* () {
    var vDom = _Transition2 || (_Transition2 = /*#__PURE__*/_jsx(Transition, {
      in: true,
      children: /*#__PURE__*/_jsx("div", {})
    }));

    var wrap = render(vDom);
    yield waitFor(function () {
      act(function () {
        expect(wrap.html()).to.have.string(dataStatusKey + "=\"entered\"");
      }, 5);
    });
    yield waitFor(function () {
      act(function () {
        expect(wrap.html()).to.have.string(dataStatusKey + "=\"entering\"");
      });
    });
  }));
  it("test entered", /*#__PURE__*/_asyncToGenerator(function* () {
    var end = function end() {};

    var vDom = /*#__PURE__*/_jsx(Transition, {
      in: true,
      enter: true,
      appear: true,
      addEndListener: end,
      children: _SemanticUI || (_SemanticUI = /*#__PURE__*/_jsx(SemanticUI, {}))
    });

    var wrap = render(vDom);
    yield waitFor(function () {
      act(function () {
        return expect(wrap.html()).to.have.string(dataStatusKey + "=\"entering\"");
      });
    });
    yield waitFor(function () {
      act(function () {
        return expect(wrap.html()).to.have.string(dataStatusKey + "=\"entered\"");
      });
    });
    wrap.unmount();
  }));
});