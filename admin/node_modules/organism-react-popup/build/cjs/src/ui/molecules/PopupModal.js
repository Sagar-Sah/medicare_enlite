"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutPropertiesLoose"));

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("reshow-runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("reshow-runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("reshow-runtime/helpers/createSuper"));

var _defineProperty2 = _interopRequireDefault(require("reshow-runtime/helpers/defineProperty"));

var _reactAtomicMolecule = require("react-atomic-molecule");

var _organismReactAnimate = _interopRequireDefault(require("organism-react-animate"));

var _getScrollInfo2 = _interopRequireDefault(require("get-scroll-info"));

var _getoffset = _interopRequireDefault(require("getoffset"));

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _array = _interopRequireDefault(require("array.merge"));

var _callFunc = _interopRequireWildcard(require("call-func"));

var _classLib = require("class-lib");

var _winDoc = require("win-doc");

var _reshowConstant = require("reshow-constant");

var _PopupOverlay2 = _interopRequireDefault(require("../molecules/PopupOverlay.js"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["basic", "disableClose", "disableClickClose", "disableEscClose", "appear", "enter", "leave", "style", "styles", "contentStyle", "modal", "modalClassName", "modalStyle", "mask", "backgroundScroll", "backgroundOpacity", "toPool", "closeEl", "onClose", "className", "contentClassName", "name", "id"];
var observerConfig = {
  attributes: true,
  childList: true,
  subtree: true
};
/**
 * 1. if you need trace show: true
 * it extend from PopupOverlay
 *
 * 2. if you don't need append <Content /> component
 * you could pass center or content to equla false
 */

var PopupModal = /*#__PURE__*/function (_PopupOverlay) {
  (0, _inherits2["default"])(PopupModal, _PopupOverlay);

  var _super = (0, _createSuper2["default"])(PopupModal);

  function PopupModal() {
    var _this;

    (0, _classCallCheck2["default"])(this, PopupModal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_timer", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_mount", false);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_locked", false);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_observer", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleModalRefCb", function (el) {
      return _this.el = el;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleClose", function () {
      return _this.close() && _this.unlockScreen();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleContainerClick", function (e) {
      var t = e.target;
      var cur = e.currentTarget;

      if (cur.isSameNode(t)) {
        _this.handleClose();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleKeyUp", function (e) {
      switch ((0, _callFunc.getEventKey)(e)) {
        case 27:
        case "Escape":
          var _this$props = _this.props,
              disableClose = _this$props.disableClose,
              disableEscClose = _this$props.disableEscClose;
          !disableClose && !disableEscClose && _this.handleClose();
          break;
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "reCalculate", function () {
      _this.setBodyCssClass();

      _this._timer = setTimeout(function () {
        if (_this.el) {
          var domInfo = (0, _getoffset["default"])(_this.el);

          if (domInfo) {
            var domHalfHeight = domInfo.h / 2;
            var marginTop = Math.floor(1 - domHalfHeight);

            var _getScrollInfo = (0, _getScrollInfo2["default"])(),
                scrollNodeHeight = _getScrollInfo.scrollNodeHeight;

            var maskStyle = {};

            if (domInfo.h * 3 > scrollNodeHeight) {
              marginTop = 0;
            }

            if (domInfo.h + 30 > scrollNodeHeight) {
              maskStyle = Styles.flexAlignTop;
            }

            var _this$state = _this.state,
                orgModalStyle = _this$state.modalStyle,
                orgMaskStyle = _this$state.maskStyle;
            setTimeout(function () {
              if (_this._mount && ((0, _getObjectValue["default"])(orgModalStyle, ["marginTop"]) !== marginTop || (0, _getObjectValue["default"])(orgMaskStyle, ["justifyContent"]) !== maskStyle.justifyContent)) {
                _this.setState(function (_ref) {
                  var modalStyle = _ref.modalStyle;
                  modalStyle = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, modalStyle), {}, {
                    marginTop: marginTop
                  });
                  return {
                    maskStyle: maskStyle,
                    modalStyle: modalStyle
                  };
                });
              }
            });
          }
        }
      }, 300);
    });
    return _this;
  }

  (0, _createClass2["default"])(PopupModal, [{
    key: "getBodyResetClass",
    value: function getBodyResetClass() {
      var body = (0, _winDoc.doc)().body;
      var bodyClass = body.className;
      bodyClass = (0, _classLib.removeClass)(bodyClass, "dimmable");
      bodyClass = (0, _classLib.removeClass)(bodyClass, "scrolling");
      bodyClass = (0, _classLib.removeClass)(bodyClass, "dimmed");
      bodyClass = (0, _classLib.removeClass)(bodyClass, "dimmed-bg-scrolling");
      return bodyClass;
    }
  }, {
    key: "resetBodyCssClass",
    value: function resetBodyCssClass() {
      var toPool = this.props.toPool;
      var body = (0, _winDoc.doc)().body;

      if (!toPool && body) {
        body.className = this.getBodyResetClass();
      }
    }
  }, {
    key: "setBodyCssClass",
    value: function setBodyCssClass() {
      var _this$props2 = this.props,
          toPool = _this$props2.toPool,
          backgroundScroll = _this$props2.backgroundScroll;
      var body = (0, _winDoc.doc)().body;

      if (!toPool && body) {
        var addBodyClass = (0, _classLib.mixClass)(this.getBodyResetClass(), {
          "dimmed-bg-scrolling": backgroundScroll
        }, "dimmable", "dimmed");
        body.className = addBodyClass;
      }
    }
  }, {
    key: "lockScreen",
    value: function lockScreen() {
      this.reCalculate();

      if (!this._locked) {
        this._locked = true;
        (0, _winDoc.win)().addEventListener("resize", this.reCalculate);
        (0, _winDoc.win)().addEventListener("keyup", this.handleKeyUp);
        var MutationObserver = (0, _winDoc.win)().MutationObserver;

        if (MutationObserver && this.el && !this._observer) {
          this._observer = new MutationObserver(this.reCalculate);

          this._observer.observe(this.el, observerConfig);
        }
      }
    }
  }, {
    key: "unlockScreen",
    value: function unlockScreen() {
      if (this._locked) {
        this._locked = false;
      } else {
        return;
      }

      if ((0, _classLib.hasClass)((0, _getObjectValue["default"])((0, _winDoc.doc)(), ["body", "className"]), "dimmed")) {
        var onClose = this.props.onClose; //settimeout is for fixed cant setstate during render error

        setTimeout(function () {
          return (0, _callFunc["default"])(onClose);
        });
      } // do detach (need put after onClose else will make modal can't appear again)


      clearTimeout(this._timer);
      this.resetBodyCssClass();
      (0, _winDoc.win)().removeEventListener("resize", this.reCalculate);
      (0, _winDoc.win)().removeEventListener("keyup", this.handleKeyUp);

      if (this._observer) {
        this._observer.disconnect();

        this._observer = null;
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._mount = true;
      injects = (0, _reactAtomicMolecule.lazyInject)(InjectStyles, injects);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._mount = false;
      this.unlockScreen();
    }
  }, {
    key: "shouldShow",
    value: function shouldShow(show) {
      var _this$state2 = this.state,
          stateModalStyle = _this$state2.modalStyle,
          stateMaskStyle = _this$state2.maskStyle;
      var _this$props3 = this.props,
          basic = _this$props3.basic,
          disableClose = _this$props3.disableClose,
          disableClickClose = _this$props3.disableClickClose,
          disableEscClose = _this$props3.disableEscClose,
          appear = _this$props3.appear,
          enter = _this$props3.enter,
          leave = _this$props3.leave,
          style = _this$props3.style,
          styles = _this$props3.styles,
          contentStyle = _this$props3.contentStyle,
          modal = _this$props3.modal,
          modalClassName = _this$props3.modalClassName,
          modalStyle = _this$props3.modalStyle,
          mask = _this$props3.mask,
          backgroundScroll = _this$props3.backgroundScroll,
          backgroundOpacity = _this$props3.backgroundOpacity,
          toPool = _this$props3.toPool,
          closeEl = _this$props3.closeEl,
          onClose = _this$props3.onClose,
          className = _this$props3.className,
          contentClassName = _this$props3.contentClassName,
          name = _this$props3.name,
          id = _this$props3.id,
          restProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props3, _excluded);
      var containerClick = null;
      var thisCloseEl;
      var content = null;

      if (show) {
        this.lockScreen();

        if (!closeEl) {
          if (!disableClose && !disableClickClose) {
            containerClick = this.handleContainerClick;
          }
        } else {
          var _closeEl$props;

          thisCloseEl = (0, _reactAtomicMolecule.build)(closeEl)({
            onClick: this.handleClose,
            key: "close",
            style: (0, _objectSpread2["default"])({
              zIndex: 1001,
              position: "fixed"
            }, (_closeEl$props = closeEl.props) === null || _closeEl$props === void 0 ? void 0 : _closeEl$props.style)
          });
        }

        var thisModal = modal !== null && modal !== void 0 ? modal : /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactAtomicMolecule.Dimmer, {
          isModal: "true",
          show: show,
          contentStyle: contentStyle
        }, "model");

        if (_reshowConstant.STRING !== typeof thisModal) {
          thisModal = (0, _reactAtomicMolecule.build)(thisModal)((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, restProps), {}, {
            refCb: this.handleModalRefCb,
            className: (0, _classLib.mixClass)({
              basic: basic
            }, modalClassName, (0, _getObjectValue["default"])(thisModal, ["props", "className"])),
            style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, Styles.modal), modalStyle), stateModalStyle)
          }));
        }

        if (mask) {
          if (backgroundOpacity) {
            style.backgroundColor = "rgba(0,0,0," + backgroundOpacity + ")";
          }

          var thisStyles = (0, _array["default"])((0, _reactAtomicMolecule.reactStyle)((0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, Styles.background), style), stateMaskStyle), false, false), styles);
          content = /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactAtomicMolecule.Dimmer, {
            className: (0, _classLib.mixClass)("page modals", contentClassName),
            show: show,
            center: false,
            styles: thisStyles,
            styleOrder: 1,
            onClick: containerClick,
            children: thisModal
          }, "modals");
        } else {
          content = thisModal;
        }
      } else {
        this.unlockScreen();
      }

      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactAtomicMolecule.SemanticUI, {
        ui: false,
        className: className,
        name: name,
        id: id,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_organismReactAnimate["default"], {
          appear: appear,
          enter: enter,
          leave: leave,
          children: content
        }), thisCloseEl]
      });
    }
  }]);
  return PopupModal;
}(_PopupOverlay2["default"]);

(0, _defineProperty2["default"])(PopupModal, "defaultProps", {
  mask: true,
  name: "modal",
  modalClassName: "modal active" // let has chance clean modal className

});
var _default = PopupModal;
exports["default"] = _default;
var Styles = {
  flexAlignTop: {
    justifyContent: "flex-start",
    WebkitBoxPack: "start",
    MsFlexPack: "start"
  },
  background: {
    overflow: "auto",
    boxSizing: "border-box",
    WebkitOverflowScrolling: "touch"
  },
  modal: {
    boxSizing: "border-box",
    right: "auto",
    bottom: "auto",
    transition: "all 500ms ease"
  }
};
var injects;
var InjectStyles = {
  backgroundScroll: [{
    overflow: "auto !important",
    WebkitOverflowScrolling: "touch !important"
  }, ".dimmable.dimmed.dimmed-bg-scrolling"]
};
module.exports = exports.default;