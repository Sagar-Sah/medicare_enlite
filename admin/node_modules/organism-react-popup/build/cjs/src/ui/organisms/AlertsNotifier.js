"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _getRandomId = require("get-random-id");

var _reshowHooks = require("reshow-hooks");

var _organismReactAnimate = _interopRequireDefault(require("organism-react-animate"));

var _X = _interopRequireDefault(require("ricon/X"));

var _reactAtomicMolecule = require("react-atomic-molecule");

var _callFunc = _interopRequireDefault(require("call-func"));

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _jsxRuntime = require("react/jsx-runtime");

var messageTypes = ["success", "info", "warning", "error"];

var useAlert = function useAlert(props) {
  var onClick = props.onClick,
      data = props.data,
      header = props.header,
      message = props.message,
      messageType = props.messageType;
  var duration = props.duration * 1;

  var _useState = (0, _react.useState)(),
      hoverStyle = _useState[0],
      setHoverStyle = _useState[1];

  var _useTimer = (0, _reshowHooks.useTimer)(),
      run = _useTimer[0];

  (0, _react.useEffect)(function () {
    if (duration > 0) {
      run(function () {
        return onClick({
          data: data
        });
      }, duration);
    }
  }, []);
  var handler = {
    mouseEnter: function mouseEnter() {
      setHoverStyle({
        opacity: ".9"
      });
    },
    mouseLeave: function mouseLeave() {
      setHoverStyle(null);
    },
    click: function click(e) {
      e.data = data;
      onClick(e);
    }
  };
  return {
    handler: handler,
    hoverStyle: hoverStyle,
    header: header,
    message: message,
    messageType: messageType
  };
};

var Alert = function Alert(props) {
  var _useAlert = useAlert(props),
      handler = _useAlert.handler,
      hoverStyle = _useAlert.hoverStyle,
      header = _useAlert.header,
      message = _useAlert.message,
      messageType = _useAlert.messageType;

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactAtomicMolecule.Message, {
    messageType: messageType,
    header: header,
    style: Styles.message,
    children: [message, /*#__PURE__*/(0, _jsxRuntime.jsx)(_X["default"], {
      style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, Styles.xicon), hoverStyle),
      weight: ".1rem",
      onMouseEnter: handler.mouseEnter,
      onMouseLeave: handler.mouseLeave,
      onClick: handler.click
    })]
  });
};

var defaultName = "alerts";

var AlertsNotifier = function AlertsNotifier(props) {
  var _ref = props || {},
      _ref$ani = _ref.ani,
      ani = _ref$ani === void 0 ? {
    appear: "fadeIn",
    enter: "fadeIn",
    leave: "fadeOut"
  } : _ref$ani,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? "top" : _ref$position,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? defaultName : _ref$name,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? 5000 : _ref$duration,
      alerts = _ref.alerts,
      onDismiss = _ref.onDismiss;

  var prevAlerts = (0, _reshowHooks.usePrevious)(props.alerts);

  var _useState2 = (0, _react.useState)({}),
      dismissedAlerts = _useState2[0],
      setDismissedAlerts = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      alertArr = _useState3[0],
      setAlertArr = _useState3[1];

  if (prevAlerts !== props.alerts) {
    var nextAlertArr = (alerts || []).map(function (item) {
      var thisItem = "string" === typeof item ? {
        message: item
      } : item;

      if (-1 === messageTypes.indexOf(thisItem.type)) {
        thisItem.type = "info";
      }

      if (!thisItem.id) {
        thisItem.id = (0, _getRandomId.getSN)("alert");
      }

      return thisItem;
    });
    setAlertArr(nextAlertArr);
  }

  return (0, _react.useMemo)(function () {
    var handleDismiss = function handleDismiss(e) {
      var isContinue = (0, _callFunc["default"])(onDismiss, [e]);

      if (false !== isContinue) {
        // if no callback for dismissal, just update our state
        setDismissedAlerts(function (dismissedAlerts) {
          dismissedAlerts[e.data.id] = e.data;
          return (0, _objectSpread2["default"])({}, dismissedAlerts);
        });
      }
    };

    var positionStyle = {};

    if ("top" === position) {
      positionStyle.top = 5;
    } else {
      positionStyle.bottom = 5;
    }

    var displayAlert = alertArr.filter(function (item) {
      return !(0, _getObjectValue["default"])(dismissedAlerts, [item.id]);
    }).map(function (item) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Alert, {
        duration: duration,
        messageType: item.type,
        message: item.message,
        header: item.header,
        data: item,
        onClick: handleDismiss
      }, item.id);
    });
    return (0, _reactAtomicMolecule.build)(_organismReactAnimate["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, ani), {}, {
      key: name,
      name: name,
      style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, Styles.container), positionStyle)
    }), displayAlert);
  }, [alertArr, dismissedAlerts]);
};

AlertsNotifier.displayName = defaultName;
AlertsNotifier.propTypes = process.env.NODE_ENV !== "production" ? {
  alerts: _propTypes["default"].array,
  onDismiss: _propTypes["default"].func
} : {};
var _default = AlertsNotifier;
exports["default"] = _default;
var Styles = {
  container: {
    position: "fixed",
    left: 10,
    right: 10,
    zIndex: 9999
  },
  xicon: {
    top: 20,
    right: 10,
    opacity: ".5"
  },
  message: {
    margin: "3px 0"
  }
};
module.exports = exports.default;