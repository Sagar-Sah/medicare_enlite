import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import { Map, ImmutableStore, mergeMap } from "reshow-flux";
import get from "get-object-value";
import set from "set-object-value";
import callfunc from "call-func";
import { KEYS, IS_ARRAY, OBJECT } from "reshow-constant";
var groups = {};
var SHOW_NEXT = "show_next";
var SHOW_KEY = "shows";
var NODE_KEY = "nodes";

var getName = function getName(node, defaultVal) {
  if (defaultVal === void 0) {
    defaultVal = "default";
  }

  var name = get(node, ["props", "name"], function () {
    return get(node, ["type", "displayName"], function () {
      return get(node, ["type", "name"], defaultVal);
    });
  });
  return name;
};

var handlePopup = /*#__PURE__*/function () {
  function handlePopup() {
    _classCallCheck(this, handlePopup);
  }

  _createClass(handlePopup, [{
    key: "updateDom",
    value: function updateDom(state, action) {
      var popupNode = get(action, ["params", "popup"]);
      var key = getName(popupNode);

      if (key !== getName(popupNode, null)) {
        console.warn({
          Warn: "Popup Key not consistence, you use a default key. you should assign name to each specific popup element.",
          PopUp: popupNode,
          ActualKey: key
        });
      }

      var shows = state.get(SHOW_KEY).set(key, true);
      var nodes = state.get(NODE_KEY).set(key, popupNode);
      var nodeGroups = get(popupNode, ["props", "group"]);

      if (nodeGroups) {
        if (!IS_ARRAY(nodeGroups)) {
          nodeGroups = [nodeGroups];
        }

        nodeGroups.forEach(function (nodegroup) {
          return set(groups, [nodegroup, key], true);
        });
      }

      return state.set(SHOW_KEY, shows).set(NODE_KEY, nodes).set(SHOW_NEXT, key);
    }
  }, {
    key: "getKey",
    value: function getKey(action) {
      var popup = get(action, ["params", "popup"], "default");
      var key;

      if (OBJECT === typeof popup) {
        key = getName(popup, popup);
      } else {
        key = popup;
      }

      return key;
    }
  }, {
    key: "closeAll",
    value: function closeAll(state, action) {
      return state.set(SHOW_KEY, Map());
    }
  }, {
    key: "closeOne",
    value: function closeOne(state, action) {
      var key = this.getKey(action);
      var shows = state.get(SHOW_KEY).delete(key);
      return state.set(SHOW_KEY, shows);
    }
  }, {
    key: "closeGroup",
    value: function closeGroup(state, action) {
      var groupKey = get(action, ["params", "group"]);
      var group = get(groups, [groupKey]);
      var shows = state.get(SHOW_KEY);

      if (group) {
        KEYS(group).forEach(function (key) {
          shows = shows.delete(key);
        });
      }

      return state.set(SHOW_KEY, shows);
    }
  }, {
    key: "cleanAll",
    value: function cleanAll(state, action) {
      return state.set(SHOW_KEY, Map()).set(NODE_KEY, Map());
    }
  }, {
    key: "cleanOne",
    value: function cleanOne(state, action) {
      var key = this.getKey(action);
      var nodes = state.get(NODE_KEY).delete(key);
      var shows = state.get(SHOW_KEY).delete(key);
      return state.set(NODE_KEY, nodes).set(SHOW_KEY, shows);
    }
  }, {
    key: "cleanGroup",
    value: function cleanGroup(state, action) {
      var groupKey = get(action, ["params", "group"]);
      var group = get(groups, [groupKey]);

      if (group) {
        var nodes = state.get(NODE_KEY);
        var shows = state.get(SHOW_KEY);
        KEYS(group).forEach(function (key) {
          nodes = nodes.delete(key);
          shows = shows.delete(key);
        });
        return state.set(NODE_KEY, nodes).set(SHOW_KEY, shows);
      } else {
        return state;
      }
    }
  }]);

  return handlePopup;
}();

var oPopup = new handlePopup();
var [store, popupDispatch] = ImmutableStore(function (state, action) {
  switch (action.type) {
    case "dom/update":
      return oPopup.updateDom(state, action);

    case "dom/closeAll":
      return oPopup.closeAll(state, action);

    case "dom/cleanAll":
      return oPopup.cleanAll(state, action);

    case "dom/closeOne":
      return oPopup.closeOne(state, action);

    case "dom/cleanOne":
      return oPopup.cleanOne(state, action);

    case "dom/closeGroup":
      return oPopup.closeGroup(state, action);

    case "dom/cleanGroup":
      return oPopup.cleanGroup(state, action);

    case "config/set":
      return mergeMap(state, action.params);

    default:
      return state;
  }
}, Map({
  shows: Map(),
  nodes: Map()
}));
export default store;
export { popupDispatch, SHOW_NEXT, SHOW_KEY, NODE_KEY };