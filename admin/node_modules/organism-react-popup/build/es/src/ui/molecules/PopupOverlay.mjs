import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
var _excluded = ["className"],
    _excluded2 = ["targetEl", "toPool", "alignParams", "retryAt", "isFollowTransform", "className", "style", "group"];
import Return from "reshow-return";
import { build, mixClass, SemanticUI } from "react-atomic-molecule";
import get from "get-object-value";
import getStyle from "get-style";
import BasePopup from "../molecules/BasePopup.mjs";
import popupStore, { SHOW_KEY } from "../../stores/popupStore.mjs";
import { jsx as _jsx } from "react/jsx-runtime";

var PopupOverlay = /*#__PURE__*/function (_BasePopup) {
  _inherits(PopupOverlay, _BasePopup);

  var _super = _createSuper(PopupOverlay);

  function PopupOverlay() {
    _classCallCheck(this, PopupOverlay);

    return _super.apply(this, arguments);
  }

  _createClass(PopupOverlay, [{
    key: "resetStyle",
    value: function resetStyle(key, thisStyle) {
      var _this = this;

      var value = get(this.state, [key], function () {
        return get(_this.props, [key]);
      });

      if ("undefined" !== typeof value) {
        thisStyle[key] = value + "px";
      }
    }
  }, {
    key: "renderOverlay",
    value: function renderOverlay(props) {
      var {
        className
      } = props,
          others = _objectWithoutProperties(props, _excluded);

      var classes = mixClass("popup", className);
      return /*#__PURE__*/_jsx(SemanticUI, _objectSpread(_objectSpread({}, others), {}, {
        className: classes
      }));
    }
  }, {
    key: "shouldShow",
    value: function shouldShow(show) {
      var _this2 = this;

      if (!show) {
        return null;
      }

      var _this$props = this.props,
          {
        targetEl,
        toPool,
        alignParams,
        retryAt,
        isFollowTransform,
        className,
        style,
        group
      } = _this$props,
          others = _objectWithoutProperties(_this$props, _excluded2);
      /* <!-- Handle Style */


      var thisStyle = _objectSpread({}, style);

      this.resetStyle("top", thisStyle);
      this.resetStyle("left", thisStyle);
      this.resetStyle("width", thisStyle);
      this.resetStyle("height", thisStyle);

      if (targetEl && isFollowTransform) {
        thisStyle.transform = getStyle(targetEl, "transform");
      }

      others.style = thisStyle;
      /*  Handle Style --> */

      var refCb = get(this.state, ["refCb"], function () {
        return get(_this2.props, ["refCb"]);
      });

      if (refCb) {
        others.refCb = refCb;
      }

      others.className = mixClass(className, get(this, ["state", "className"]), "visible");
      return this.renderOverlay(others);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      /**
       * Use build + anonymous function to suppress render.
       */
      return this.state.hasError ? null : build(Return)({
        store: popupStore,
        initStates: [SHOW_KEY]
      }, function (props) {
        var name = _this3.props.name;
        var show = get(props[SHOW_KEY], [name]);
        return _this3.shouldShow(show);
      });
    }
  }]);

  return PopupOverlay;
}(BasePopup);

export default PopupOverlay;