import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["name", "i18nNegativeBtn", "i18nPositiveBtn", "size", "disableClose", "className", "buttons", "header", "children", "onClick"];
import React, { useRef } from "react";
import { build, mixClass, Header, Content, List, Button } from "react-atomic-molecule";
import { IS_ARRAY } from "reshow-constant";
import callfunc from "call-func";
import PopupModal from "../molecules/PopupModal.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var defaultName = "dialog";

var Dialog = function Dialog(_ref) {
  var {
    name = defaultName,
    i18nNegativeBtn = "No",
    i18nPositiveBtn = "Yes",
    size = "mini",
    disableClose = true,
    className,
    buttons,
    header,
    children,
    onClick
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  var thisPopup = useRef();

  var handleClick = function handleClick(button) {
    return function (e) {
      // Locate befor this.popup.close()
      // because need trigger befor onClose
      (e.button = button) && callfunc(onClick, [e]);
      thisPopup.current.close();
    };
  };

  var thisHeader = null;

  if (header) {
    thisHeader = /*#__PURE__*/_jsx(Header, {
      children: header
    });
  }

  var thisButtons = buttons;

  if (!IS_ARRAY(thisButtons) || !thisButtons.length) {
    thisButtons = [/*#__PURE__*/_jsx(Button, {
      value: false,
      className: "negative",
      children: i18nNegativeBtn
    }, "b-negative"), /*#__PURE__*/_jsx(Button, {
      value: true,
      className: "positive",
      children: i18nPositiveBtn
    }, "b-positive")];
  }

  thisButtons = thisButtons.map(function (button) {
    return build(button)({
      onClick: handleClick(button)
    });
  });
  var classes = mixClass(className, "dialog", size);
  return /*#__PURE__*/_jsxs(PopupModal, _objectSpread(_objectSpread({
    modalClassName: classes,
    name: name,
    content: false,
    ref: thisPopup,
    disableClose: disableClose
  }, props), {}, {
    children: [thisHeader, /*#__PURE__*/_jsx(Content, {
      children: children
    }), /*#__PURE__*/_jsx(List, {
      type: "actions",
      children: thisButtons
    })]
  }));
};

Dialog.displayName = defaultName;
export default Dialog;