import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
var _excluded = ["children", "style", "className", "component", "container", "popup", "callback", "onClose", "once"];
import React, { Component } from "react";
import { build, mixClass, SemanticUI } from "react-atomic-molecule";
import { getTimestamp } from "get-random-id";
import callfunc from "call-func";
import get from "get-object-value";
import PopupOverlay from "../molecules/PopupOverlay.mjs";
import DisplayPopupEl from "../organisms/DisplayPopupEl.mjs";
import { popupDispatch } from "../../stores/popupStore.mjs";
import { jsx as _jsx } from "react/jsx-runtime";

var PopupClick = /*#__PURE__*/function (_Component) {
  _inherits(PopupClick, _Component);

  var _super = _createSuper(PopupClick);

  function PopupClick() {
    var _this;

    _classCallCheck(this, PopupClick);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "handleClick", function () {
      return _this.open();
    });

    return _this;
  }

  _createClass(PopupClick, [{
    key: "open",
    value: function open() {
      var {
        callback,
        once,
        popup
      } = this.props;

      if (once) {
        popupDispatch({
          type: "dom/update",
          params: {
            popup: build(popup, {
              wrap: PopupOverlay,
              doCallFunction: true
            })()
          }
        });
        callfunc(callback);
      } else {
        this.setState({
          show: true,
          bust: getTimestamp()
        }, function () {
          callfunc(callback);
        });
      }
    }
  }, {
    key: "close",
    value: function close() {
      var {
        onClose
      } = this.props;
      this.setState({
        show: false
      }, function () {
        callfunc(onClose);
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var {
        container
      } = this.props;
      container && console.warn("Container will retire soon, change to use component");
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          {
        children,
        style,
        className,
        component,
        container,
        // Retire, will not use.
        popup,
        callback,
        onClose,
        once
      } = _this$props,
          reset = _objectWithoutProperties(_this$props, _excluded);

      var {
        show,
        bust
      } = this.state || {};

      var thisStyle = _objectSpread(_objectSpread({}, style), Styles.container);

      var popupEl = null;

      if (show && !once) {
        popupEl = /*#__PURE__*/_jsx(DisplayPopupEl, {
          bust: bust,
          children: build(popup, {
            wrap: PopupOverlay,
            doCallFunction: true
          })()
        }, "popup-el");
      }

      var thisComponent = component || container || SemanticUI;
      var thisChildren = [children || get(thisComponent, ["props", "children"]), popupEl];

      var props = _objectSpread(_objectSpread({}, reset), {}, {
        onClick: this.handleClick,
        className: mixClass(className, "popup-click"),
        style: thisStyle
      });

      return build(thisComponent)(props, thisChildren);
    }
  }]);

  return PopupClick;
}(Component);

_defineProperty(PopupClick, "defaultProps", {
  once: true
});

export default PopupClick;
var Styles = {
  container: {
    cursor: "pointer"
  }
};