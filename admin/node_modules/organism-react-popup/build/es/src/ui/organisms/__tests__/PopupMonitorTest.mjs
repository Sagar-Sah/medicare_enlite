import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";

var _PopupMonitor, _PopupPool;

import React, { useState, useEffect } from "react";
import { expect } from "chai";
import { act, render, waitFor } from "reshow-unit";
import PopupMonitor from "../PopupMonitor.mjs";
import PopupPool from "../PopupPool.mjs";
import popupStore, { popupDispatch } from "../../../stores/popupStore.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
describe("Test PopupMonitor", function () {
  beforeEach(function () {
    popupStore.reset();
    popupDispatch("dom/cleanAll");
  });
  it("basic test", function () {
    var wrap = render(_PopupMonitor || (_PopupMonitor = /*#__PURE__*/_jsx(PopupMonitor, {
      children: /*#__PURE__*/_jsx("div", {})
    })));
    expect(wrap.html()).to.have.string("popup-monitor");
  });
  it("feature test", /*#__PURE__*/_asyncToGenerator(function* () {
    var expectedWithoutPopup = '<div><div class="popup-monitor ui">Test Monitor</div></div>';

    var FakeDom = function FakeDom(props) {
      var [id, setId] = useState();
      useEffect(function () {
        setId("foo");
      }, []);
      return /*#__PURE__*/_jsxs("div", {
        children: [/*#__PURE__*/_jsx(PopupMonitor, {
          ids: props.ids || ["foo"],
          id: id,
          getIsShow: function getIsShow(props) {
            var {
              id,
              ids
            } = props;
            delete props["id"];
            delete props["ids"];

            if (-1 !== ids.indexOf(id)) {
              return true;
            }
          },
          popup: "test-popup",
          children: "Test Monitor"
        }), _PopupPool || (_PopupPool = /*#__PURE__*/_jsx(PopupPool, {}))]
      });
    };

    var gSet;

    var Comp = function Comp() {
      var [props, setProps] = useState();
      gSet = setProps;
      return /*#__PURE__*/_jsx(FakeDom, _objectSpread({}, props));
    };

    var wrap = render( /*#__PURE__*/_jsx(Comp, {}));
    yield waitFor(function () {
      act(function () {
        return expect(wrap.html()).to.have.string("test-popup");
      });
    });
    yield act(function () {
      gSet({
        ids: []
      });
    });
    yield waitFor(function () {
      act(function () {
        return expect(wrap.html()).to.equal(expectedWithoutPopup);
      });
    });
  }));
});