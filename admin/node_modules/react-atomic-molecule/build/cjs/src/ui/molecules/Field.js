"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutPropertiesLoose"));

var _classLib = require("class-lib");

var _reshowBuild = _interopRequireDefault(require("reshow-build"));

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _SemanticUI = _interopRequireDefault(require("../molecules/SemanticUI.js"));

var _Message = _interopRequireDefault(require("../molecules/Message.js"));

var _Label = _interopRequireDefault(require("../molecules/Label.js"));

var _useCSS = _interopRequireDefault(require("../../useCSS.js"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["className", "fieldClassName", "fieldStyle", "fieldStyles", "fieldProps", "children", "inline", "type", "inputComponent", "inputWrapper", "inputWrapperAttr", "label", "labelStyle", "labelStyles", "labelWrap", "style", "styles", "styleOrder", "required", "messageType", "messageProps", "message", "topTip", "bottomTip", "rightTip"];

var Field = function Field(props) {
  (0, _useCSS["default"])(["input", "search", "form"], "semantic");

  var _ref = props || {},
      className = _ref.className,
      fieldClassName = _ref.fieldClassName,
      fieldStyle = _ref.fieldStyle,
      fieldStyles = _ref.fieldStyles,
      fieldProps = _ref.fieldProps,
      children = _ref.children,
      inline = _ref.inline,
      type = _ref.type,
      _ref$inputComponent = _ref.inputComponent,
      inputComponent = _ref$inputComponent === void 0 ? _SemanticUI["default"] : _ref$inputComponent,
      inputWrapper = _ref.inputWrapper,
      inputWrapperAttr = _ref.inputWrapperAttr,
      label = _ref.label,
      labelStyle = _ref.labelStyle,
      labelStyles = _ref.labelStyles,
      labelWrap = _ref.labelWrap,
      style = _ref.style,
      styles = _ref.styles,
      styleOrder = _ref.styleOrder,
      required = _ref.required,
      messageType = _ref.messageType,
      messageProps = _ref.messageProps,
      message = _ref.message,
      topTip = _ref.topTip,
      bottomTip = _ref.bottomTip,
      rightTip = _ref.rightTip,
      others = (0, _objectWithoutPropertiesLoose2["default"])(_ref, _excluded);

  var thisMessage = message !== null && message !== void 0 ? message : props["data-message"];
  var thisMessageType = messageType !== null && messageType !== void 0 ? messageType : props["data-message-type"];
  /**
   * isGroup need check with props to avoid default value.
   */

  var isGroup = !props.atom && !props.inputComponent;
  var classes = (0, _classLib.mixClass)(fieldClassName, {
    "label-wrap": labelWrap,
    required: !!required,
    field: !isGroup,
    fields: isGroup,
    inline: !!inline,
    info: thisMessageType === "info",
    error: thisMessageType === "error",
    success: thisMessageType === "success",
    warning: thisMessageType === "warning"
  });
  var oLabel = null;
  var thisMessageProps = messageProps || {};

  if (label) {
    var thisLabelStyle = (0, _objectSpread2["default"])({}, (0, _getObjectValue["default"])(labelStyle, null, {}));

    if (props.id) {
      thisLabelStyle.cursor = "pointer";
    }

    if (labelWrap) {
      thisLabelStyle.flex = "0 1 100%";
      thisMessageProps.style = (0, _objectSpread2["default"])({}, thisMessageProps.style);
      thisMessageProps.style.flex = "0 1 100%";
    }

    oLabel = /*#__PURE__*/(0, _jsxRuntime.jsx)(_SemanticUI["default"], {
      atom: "label",
      htmlFor: props.id,
      style: thisLabelStyle,
      styles: labelStyles,
      styleOrder: styleOrder,
      title: label,
      children: label
    }, "label");
  }

  var input = null;
  var thisFieldStyles = fieldStyles;
  var thisFieldStyle = fieldStyle;
  var thisChildren = children;

  if (isGroup) {
    if (!thisFieldStyles) {
      thisFieldStyles = styles;
    }

    if (!thisFieldStyle) {
      thisFieldStyle = (0, _objectSpread2["default"])({}, style);
    } else {
      thisFieldStyle = (0, _objectSpread2["default"])({}, thisFieldStyle);
    }

    if (label && labelWrap) {
      thisFieldStyle.flexWrap = "wrap";
    }
  } else {
    var isSelect = "select" === props.atom;
    var inputProps = (0, _getObjectValue["default"])(inputComponent, ["props"], {}); // set inputChildren

    var inputChildren = inputProps.children || null;

    if (isSelect) {
      thisChildren = null;
      inputChildren = children;
    }

    var inputClasses = (0, _classLib.mixClass)(className, inputProps.className, {
      dropdown: isSelect
    });
    input = (0, _reshowBuild["default"])(inputComponent)((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, others), {}, {
      style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
        boxSizing: "inherit"
      }, inputProps.style), style),
      key: "input",
      className: inputClasses,
      styles: styles,
      styleOrder: styleOrder,
      required: required,
      type: type
    }), inputChildren);
  }

  var topTipEl;

  if (topTip) {
    topTipEl = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Label["default"], {
      className: "pointing below prompt",
      children: topTip
    }, "topTip");
  }

  var inputs;

  if ("checkbox" === type || "radio" === type) {
    inputs = [topTipEl, input, oLabel];
  } else {
    inputs = [oLabel, topTipEl, input];
  }

  if (inputWrapper) {
    inputs = (0, _reshowBuild["default"])(inputWrapper)(inputWrapperAttr, inputs);
  }

  var messageEl;
  var bottomTipEl;
  var rightTipEl;

  if (thisMessage) {
    messageEl = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Message["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
      messageType: thisMessageType
    }, thisMessageProps), {}, {
      children: thisMessage
    }));
  }

  if (bottomTip) {
    bottomTipEl = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Label["default"], {
      className: "above pointing prompt",
      children: bottomTip
    });
  }

  if (rightTip) {
    rightTipEl = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Label["default"], {
      className: "left pointing prompt",
      children: rightTip
    });
  } // init FieldStyle boxSizing


  thisFieldStyle = (0, _objectSpread2["default"])({}, thisFieldStyle);

  if (!thisFieldStyle.boxSizing) {
    thisFieldStyle.boxSizing = "inherit";
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_SemanticUI["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, fieldProps), {}, {
    className: classes,
    style: thisFieldStyle,
    styles: thisFieldStyles,
    styleOrder: styleOrder,
    children: [inputs, thisChildren, rightTipEl, bottomTipEl, messageEl]
  }));
};

var _default = Field;
exports["default"] = _default;
module.exports = exports.default;