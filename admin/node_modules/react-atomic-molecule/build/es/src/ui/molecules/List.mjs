import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["type", "className", "children", "horizontal"];
import { Children, cloneElement } from "react";
import { mixClass } from "class-lib";
import SemanticUI from "../molecules/SemanticUI.mjs";
import useCSS from "../../useCSS.mjs";
import { jsx as _jsx } from "react/jsx-runtime";

var renderChildren = function renderChildren(children, pAtom, horizontal) {
  return Children.map(children, function (child) {
    if (!child) {
      return null;
    }

    if ("ul" === pAtom || "ol" === pAtom) {
      child = /*#__PURE__*/cloneElement(child, {
        atom: "li"
      });
    } else if ("table" === pAtom) {
      child = /*#__PURE__*/cloneElement(child, {
        atom: "td"
      });

      if (!horizontal) {
        child = /*#__PURE__*/_jsx("tr", {
          children: child
        });
      }
    }

    return child;
  });
};

var List = function List(props) {
  useCSS(["list"], "semantic");
  /**
   * Why need type?
   *
   * List not the only type, such as segments.
   * https://semantic-ui.com/elements/segment.html#raised-segments
   *
   */

  var {
    type = "list",
    className,
    children,
    horizontal
  } = props,
      others = _objectWithoutProperties(props, _excluded);

  var atom = props.atom;
  var classes = mixClass(className, type, {
    horizontal
  });
  var child = renderChildren(children, atom, horizontal);

  if (atom === "table") {
    if (child) {
      if (horizontal) {
        child = /*#__PURE__*/_jsx("tbody", {
          children: /*#__PURE__*/_jsx("tr", {
            children: child
          })
        });
      } else {
        child = /*#__PURE__*/_jsx("tbody", {
          children: child
        });
      }
    }
  }

  return /*#__PURE__*/_jsx(SemanticUI, _objectSpread(_objectSpread({}, others), {}, {
    className: classes,
    children: child
  }));
};

export default List;