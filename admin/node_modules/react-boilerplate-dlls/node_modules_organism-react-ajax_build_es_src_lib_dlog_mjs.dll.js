"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_name_"] = self["webpackChunk_name_"] || []).push([["node_modules_organism-react-ajax_build_es_src_lib_dlog_mjs"],{

/***/ "./node_modules/organism-react-ajax/build/es/src/lib/dlog.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/organism-react-ajax/build/es/src/lib/dlog.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// dlog 0.1.1\n// http://ddo.github.io/dlog\n// (c) 2014 Ddo <http://ddo.me>\n\nfunction dlog(opts) {\n  if (!(this instanceof dlog)) {\n    return new dlog(opts);\n  }\n  opts = opts || {};\n\n  //default name = DLOG\n  this.setName(opts.name);\n\n  //default level = info\n  this.setLevel(opts.level);\n\n  //default font-size = 14\n  this.setSize(opts.size);\n}\ndlog.prototype.setName = function (name) {\n  this.name = name || \"DLOG\";\n  return this.name;\n};\ndlog.prototype.setLevel = function (level) {\n  this.level = level ? this.level_map[level] ? level : \"info\" : \"info\";\n  this.level_no = this.level_map[this.level];\n  return this.level;\n};\ndlog.prototype.setSize = function (size) {\n  this.size = size ? size : 14;\n  return this.size;\n};\ndlog.prototype.level_map = {\n  trace: 1,\n  debug: 2,\n  info: 3,\n  warn: 4,\n  error: 5,\n  silent: 6\n};\ndlog.prototype.color_map = {\n  name: \"cyan\",\n  trace: \"black\",\n  debug: \"green\",\n  info: \"blue\",\n  warn: \"orange\",\n  error: \"red\"\n};\ndlog.prototype.getCSS = function (level) {\n  if (!this.color_map[level]) {\n    level = \"info\";\n  }\n  return level ? \"font-size: \" + this.size + \"px;color: \" + this.color_map[level] : \"font-size: \" + this.size + \"px\";\n};\ndlog.prototype.log = function (level, data) {\n  if (level === \"silent\") {\n    return;\n  }\n  if (this.level_map[level] >= this.level_no) {\n    this.show(level, data);\n  }\n};\ndlog.prototype.show = function (level, data) {\n  var keys = function keys(o) {\n    o = o || {};\n    return Object.keys(o);\n  };\n  var isDataSet = function isDataSet(a) {\n    var arrKey = keys(a);\n    for (var i = 0, j = arrKey.length; i < j; i++) {\n      var key = arrKey[i];\n      if (!key || isNaN(key)) {\n        return false;\n      }\n      if (\"string\" === typeof a[key] || !keys(a[key]).length) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var jsonParse = function jsonParse(s) {\n    if (\"string\" === typeof s) {\n      try {\n        return JSON.parse(s, function (k, v) {\n          if (v && typeof v === \"object\") {\n            var nextObj = Object.create(null);\n            keys(v).forEach(function (k) {\n              nextObj[k] = v[k];\n            });\n            return nextObj;\n          }\n          return v;\n        });\n      } catch (e) {\n        return s;\n      }\n    } else {\n      return s;\n    }\n  };\n  console.info(\"%c [%s] %c %s %c %s:\", this.getCSS(), new Date().toJSON(), this.getCSS(\"name\"), this.name, this.getCSS(level), level.toUpperCase());\n  if (!console[level]) {\n    level = \"info\";\n  }\n  if (level === \"trace\") {\n    level = \"debug\"; // tricky for hidden trace in browser console.\n  } else if (level === \"debug\") {\n    level = \"log\"; // avoid message hidden when chrome verbose not checked.\n  }\n\n  data[0] = jsonParse(data[0]);\n  if (isDataSet(data[0])) {\n    console.table(data[0]);\n  } else {\n    console[level].apply(console, data);\n  }\n};\ndlog.prototype.trace = function () {\n  this.log(\"trace\", arguments);\n};\ndlog.prototype.debug = function () {\n  this.log(\"debug\", arguments);\n};\ndlog.prototype.info = function () {\n  this.log(\"info\", arguments);\n};\ndlog.prototype.warn = function () {\n  this.log(\"warn\", arguments);\n};\ndlog.prototype.error = function () {\n  this.log(\"error\", arguments);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dlog);\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/organism-react-ajax/build/es/src/lib/dlog.mjs?");

/***/ })

}]);