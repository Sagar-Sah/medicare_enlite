"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutPropertiesLoose"));

var _react = require("react");

var _reshowConstant = require("reshow-constant");

var _array = require("array.merge");

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["children"];

/**
 * @typedef Component
 * @type any
 */

/**
 * @param {function} component
 * @param {object} props
 * @param {Component} child
 * @param {object} componentOption
 * @returns {React.ReactElement}
 */
var buildFunc = function buildFunc(component, props, child, componentOption) {
  // anonymous function will call directly
  var _ref = componentOption || {},
      wrap = _ref.wrap,
      doCallFunction = _ref.doCallFunction;

  if (_reshowConstant.FUNCTION === typeof component && (!component.name || "children" === component.name) || doCallFunction) {
    try {
      if (child != _reshowConstant.T_NULL) {
        props.children = child;
      }

      var el = component(props);
      return /*#__PURE__*/(0, _react.isValidElement)(el) ? el : wrap ? buildReact(wrap, props, el) : buildReact(el, props);
    } catch (e) {
      if (e.name === _reshowConstant.TYPE_ERROR) {
        return buildReact(component, props, child);
      } else {
        throw e;
      }
    }
  } else {
    return buildReact(component, props, child);
  }
};
/**
 * @param {Component} component
 * @param {object} props
 * @param {Component} child
 * @returns {React.ReactElement}
 */


var buildReact = function buildReact(component, props, child) {
  if (props === void 0) {
    props = {};
  }

  if (child === void 0) {
    child = _reshowConstant.T_UNDEFINED;
  }

  if (!component) {
    return _reshowConstant.T_NULL;
  }

  var isValidComp = /*#__PURE__*/(0, _react.isValidElement)(component);

  if (isValidComp && !(0, _reshowConstant.OBJ_SIZE)(props) && null == child) {
    return component;
  }

  var params = [component, props];

  if (child != _reshowConstant.T_NULL) {
    params.push(child);
  }

  if (_reshowConstant.STRING === typeof component && component !== component.replace(/[^a-z]/g, "")) {
    var _props = props,
        children = _props.children,
        restProps = (0, _objectWithoutPropertiesLoose2["default"])(_props, _excluded);
    return buildReact( /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      children: component
    }), restProps);
  } else {
    return (isValidComp ? _react.cloneElement : _react.createElement).apply(_reshowConstant.T_NULL, params);
  }
};
/**
 * @param {Component} component
 * @param {object} componentOption
 */


var build = function build(component, componentOption) {
  if (componentOption === void 0) {
    componentOption = {};
  }

  return (
    /**
     * @param {object} props
     * @param {Component} child
     * @returns {React.ReactElement}
     */
    function (props, child) {
      if (props === void 0) {
        props = {};
      }

      if (child === void 0) {
        child = _reshowConstant.T_UNDEFINED;
      }

      if (!component) {
        return _reshowConstant.T_NULL;
      }

      var _ref2 = componentOption || {},
          wrap = _ref2.wrap;

      if (wrap) {
        if (_reshowConstant.FUNCTION !== typeof component && ! /*#__PURE__*/(0, _react.isValidElement)(component)) {
          child = component;
          component = wrap;
        }
      }
      /**
       * @param {Component} comp
       */


      var run = function run(comp) {
        props = (0, _array.removeEmpty)(props, _reshowConstant.T_TRUE);
        return ( /*#__PURE__*/(0, _react.isValidElement)(comp) ? buildReact : buildFunc)(comp, props, child, componentOption);
      };

      if ((0, _reshowConstant.IS_ARRAY)(component)) {
        var key = props.key;
        props.key = _reshowConstant.T_UNDEFINED;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.Fragment, {
          children: _react.Children.map(component.map(function (comp) {
            return run(comp);
          }), function (c) {
            return c;
          })
        }, key);
      } else {
        return run(component);
      }
    }
  );
};

var _default = build;
exports["default"] = _default;
module.exports = exports.default;