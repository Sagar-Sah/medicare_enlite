import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
var _excluded = ["comp"];

var _div, _div2, _div3, _div4, _div5;

import { PureComponent } from "react";
import { expect } from "chai";
import { render } from "reshow-unit";
import build from "../index.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("Test build render", function () {
  it("test build string", function () {
    var vdom = build("Foo Bar")();
    var actual = render(vdom).html();
    expect(actual).to.equal("<span>Foo Bar</span>");
  });
  it("test build string with child", function () {
    var vdom = build("Foo Bar")({}, _div || (_div = /*#__PURE__*/_jsx("div", {})));
    var actual = render(vdom).html();
    expect(actual).to.equal("<span>Foo Bar</span>");
  });
  it("test build string with params has child", function () {
    var vdom = build("Foo Bar")({
      children: _div2 || (_div2 = /*#__PURE__*/_jsx("div", {}))
    });
    var actual = render(vdom).html();
    expect(actual).to.equal("<span>Foo Bar</span>");
  });
  it("test build native html", function () {
    var vdom = build("a")();
    var actual = render(vdom).html();
    expect(actual).to.equal("<a></a>");
  });
  it("test function return another component", function () {
    var FakeComponent = /*#__PURE__*/function (_PureComponent) {
      _inherits(FakeComponent, _PureComponent);

      var _super = _createSuper(FakeComponent);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _super.apply(this, arguments);
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return /*#__PURE__*/_jsx("div", {
            children: this.props.foo
          });
        }
      }]);

      return FakeComponent;
    }(PureComponent);

    var func = function func(props) {
      return /*#__PURE__*/_jsx(FakeComponent, _objectSpread({}, props));
    };

    var vDom = build(func)({
      foo: "bar3"
    });
    var html = render(vDom).html();
    expect(html).to.equal("<div>bar3</div>");
  });
  it("test with anonymous func and child", function () {
    var child = [_div3 || (_div3 = /*#__PURE__*/_jsx("div", {
      id: "1"
    }, "0")), _div4 || (_div4 = /*#__PURE__*/_jsx("div", {
      id: "2"
    }, "1"))];
    var buildDom = build(function (_ref) {
      var {
        children
      } = _ref;
      return /*#__PURE__*/_jsx("div", {
        id: "root",
        children: children
      });
    })({}, child);
    var html = render( /*#__PURE__*/_jsx("div", {
      children: buildDom
    })).html();

    var stateFunc = function stateFunc(_ref2) {
      var {
        children
      } = _ref2;
      return /*#__PURE__*/_jsx("div", {
        id: "root",
        children: children
      });
    };

    var stateFuncBuildDom = build(stateFunc)({}, child);
    var stateFuncHtml = render( /*#__PURE__*/_jsx("div", {
      children: stateFuncBuildDom
    })).html();
    var expected = '<div><div id="root"><div id="1"></div><div id="2"></div></div></div>';
    expect(html).to.equal(expected);
    expect(stateFuncHtml).to.equal(expected);
  });
  it("test with component", function () {
    var FakeComponent = function FakeComponent(props) {
      return /*#__PURE__*/_jsx("div", {
        children: props.foo
      });
    };

    var vDom = build(FakeComponent)({
      foo: "bar"
    });
    var html = render(vDom).html();
    expect(html).to.equal("<div>bar</div>");
  });
  it("test with instance", function () {
    var FakeComponent = function FakeComponent(props) {
      return /*#__PURE__*/_jsx("div", {
        children: props.foo
      });
    };

    var vDom = /*#__PURE__*/_jsx(FakeComponent, {});

    var html = render(build(vDom)({
      foo: "bar1"
    })).html();
    expect(html).to.equal("<div>bar1</div>");
  });
  it("test with class component", function () {
    var FakeComponent = /*#__PURE__*/function (_PureComponent2) {
      _inherits(FakeComponent, _PureComponent2);

      var _super2 = _createSuper(FakeComponent);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _super2.apply(this, arguments);
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return /*#__PURE__*/_jsx("div", {
            children: this.props.foo
          });
        }
      }]);

      return FakeComponent;
    }(PureComponent);

    var vDom = build(FakeComponent)({
      foo: "bar2"
    });
    var html = render(vDom).html();
    expect(html).to.equal("<div>bar2</div>");
  });
  it("test with clone and child", function () {
    var FakeComponent = /*#__PURE__*/function (_PureComponent3) {
      _inherits(FakeComponent, _PureComponent3);

      var _super3 = _createSuper(FakeComponent);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _super3.apply(this, arguments);
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
              {
            comp
          } = _this$props,
              others = _objectWithoutProperties(_this$props, _excluded);

          return build(comp)(others, "bar");
        }
      }]);

      return FakeComponent;
    }(PureComponent);

    var html = render( /*#__PURE__*/_jsx(FakeComponent, {
      id: "foo",
      comp: _div5 || (_div5 = /*#__PURE__*/_jsx("div", {
        children: "foo"
      }))
    })).html();
    expect(html).to.equal('<div id="foo">bar</div>');
  });
  it("test with class and child", function () {
    var FakeComponent = /*#__PURE__*/function (_PureComponent4) {
      _inherits(FakeComponent, _PureComponent4);

      var _super4 = _createSuper(FakeComponent);

      function FakeComponent() {
        _classCallCheck(this, FakeComponent);

        return _super4.apply(this, arguments);
      }

      _createClass(FakeComponent, [{
        key: "render",
        value: function render() {
          return /*#__PURE__*/_jsx("div", _objectSpread({}, this.props));
        }
      }]);

      return FakeComponent;
    }(PureComponent);

    var vDom = build(FakeComponent)({
      id: "foo"
    }, "hello");
    var html = render(vDom).html();
    expect(html).to.equal('<div id="foo">hello</div>');
  });
});