import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["children"];
// @ts-check
import { isValidElement, cloneElement, createElement, Children, Fragment } from "react";
import { OBJ_SIZE, STRING, FUNCTION, T_NULL, T_TRUE, TYPE_ERROR, T_UNDEFINED, IS_ARRAY } from "reshow-constant";
import { removeEmpty } from "array.merge";
/**
 * @typedef Component
 * @type any
 */

/**
 * @param {function} component
 * @param {object} props
 * @param {Component} child
 * @param {object} componentOption
 * @returns {React.ReactElement}
 */

import { jsx as _jsx } from "react/jsx-runtime";

var buildFunc = function buildFunc(component, props, child, componentOption) {
  // anonymous function will call directly
  var {
    wrap,
    doCallFunction
  } = componentOption || {};

  if (FUNCTION === typeof component && (!component.name || "children" === component.name) || doCallFunction) {
    try {
      if (child != T_NULL) {
        props.children = child;
      }

      var el = component(props);
      return /*#__PURE__*/isValidElement(el) ? el : wrap ? buildReact(wrap, props, el) : buildReact(el, props);
    } catch (e) {
      if (e.name === TYPE_ERROR) {
        return buildReact(component, props, child);
      } else {
        throw e;
      }
    }
  } else {
    return buildReact(component, props, child);
  }
};
/**
 * @param {Component} component
 * @param {object} props
 * @param {Component} child
 * @returns {React.ReactElement}
 */


var buildReact = function buildReact(component, props, child) {
  if (props === void 0) {
    props = {};
  }

  if (child === void 0) {
    child = T_UNDEFINED;
  }

  if (!component) {
    return T_NULL;
  }

  var isValidComp = /*#__PURE__*/isValidElement(component);

  if (isValidComp && !OBJ_SIZE(props) && null == child) {
    return component;
  }

  var params = [component, props];

  if (child != T_NULL) {
    params.push(child);
  }

  if (STRING === typeof component && component !== component.replace(/[^a-z]/g, "")) {
    var {
      children
    } = props,
        restProps = _objectWithoutProperties(props, _excluded);

    return buildReact( /*#__PURE__*/_jsx("span", {
      children: component
    }), restProps);
  } else {
    return (isValidComp ? cloneElement : createElement).apply(T_NULL, params);
  }
};
/**
 * @param {Component} component
 * @param {object} componentOption
 */


var build = function build(component, componentOption) {
  if (componentOption === void 0) {
    componentOption = {};
  }

  return (
    /**
     * @param {object} props
     * @param {Component} child
     * @returns {React.ReactElement}
     */
    function (props, child) {
      if (props === void 0) {
        props = {};
      }

      if (child === void 0) {
        child = T_UNDEFINED;
      }

      if (!component) {
        return T_NULL;
      }

      var {
        wrap
      } = componentOption || {};

      if (wrap) {
        if (FUNCTION !== typeof component && ! /*#__PURE__*/isValidElement(component)) {
          child = component;
          component = wrap;
        }
      }
      /**
       * @param {Component} comp
       */


      var run = function run(comp) {
        props = removeEmpty(props, T_TRUE);
        return ( /*#__PURE__*/isValidElement(comp) ? buildReact : buildFunc)(comp, props, child, componentOption);
      };

      if (IS_ARRAY(component)) {
        var key = props.key;
        props.key = T_UNDEFINED;
        return /*#__PURE__*/_jsx(Fragment, {
          children: Children.map(component.map(function (comp) {
            return run(comp);
          }), function (c) {
            return c;
          })
        }, key);
      } else {
        return run(component);
      }
    }
  );
};

export default build;