import { expect } from "chai";
import sinon from "sinon";
import createReducer from "../createReducer.mjs";
describe("Test createReducer", function () {
  var reducer;
  beforeEach(function () {
    reducer = createReducer(function (state, action) {
      return action;
    }, {});
  });
  describe("Test dispatch", function () {
    it("basic dispatch", function () {
      var [store, dispatch] = reducer;
      var action = {
        aaa: "bbb"
      };
      dispatch(action);
      expect(store.getState()).to.deep.equal(action);
    });
    it("dispatch empty", function () {
      var [store, dispatch] = reducer;
      dispatch();
      expect(store.getState()).to.be.empty;
    });
    it("could support text dispatch", function () {
      var [store, dispatch] = reducer;
      dispatch("xxx");
      expect(store.getState()).to.deep.equal({
        type: "xxx"
      });
    });
    it("it could dispatch with function", function () {
      var [store, dispatch] = reducer;
      dispatch(function () {
        return "xxx";
      });
      expect(store.getState()).to.deep.equal("xxx");
      dispatch(function (prev) {
        return prev + "yyy";
      });
      expect(store.getState()).to.deep.equal("xxxyyy");
    });
  });
  it("Emit with custom event", function (done) {
    var [store, dispatch] = reducer;
    var callback = sinon.spy();
    store.addListener(callback);
    dispatch();
    setTimeout(function () {
      expect(callback.called).to.be.true;
      done();
    });
  });
  it("Test reset", function () {
    var [store, dispatch] = createReducer(function (state, action) {
      return action;
    }, "foo");
    var resetVal = store.reset();
    expect(resetVal).to.equal("foo");
  });
  it("Test reset event", function (done) {
    var [store, dispatch] = reducer;
    var callback = sinon.spy();
    store.addListener(callback);
    dispatch();
    setTimeout(function () {
      expect(callback.callCount).to.equal(1);
      store.reset();
      dispatch();
      setTimeout(function () {
        expect(callback.callCount).to.equal(1);
        done();
      });
    });
  });
});