"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _react = require("react");

var _reshowHooks = require("reshow-hooks");

var _reshowConstant = require("reshow-constant");

var _getStore = _interopRequireDefault(require("./getStore.js"));

var handleShouldComponentUpdate = function handleShouldComponentUpdate(_ref) {
  var options = _ref.options,
      shouldComponentUpdate = _ref.shouldComponentUpdate,
      calculateState = _ref.calculateState,
      prev = _ref.prev,
      props = _ref.props;
  var nextState = calculateState(prev.state, options);
  var bUpdate = !shouldComponentUpdate || shouldComponentUpdate({
    prev: prev,
    nextProps: props,
    nextState: nextState
  });

  if (!bUpdate || props === prev.props && nextState === prev.state) {
    prev.__init__ = _reshowConstant.T_TRUE;
    return prev;
  } else {
    return {
      props: props,
      __init__: _reshowConstant.T_TRUE,
      state: nextState
    };
  }
};

var useConnect = function useConnect(inputOptions) {
  if (inputOptions === void 0) {
    inputOptions = {};
  }

  return function (props) {
    var options = (0, _getStore["default"])({
      options: inputOptions,
      props: props
    });
    var calculateState = options.calculateState,
        shouldComponentUpdate = options.shouldComponentUpdate,
        _options$displayName = options.displayName,
        displayName = _options$displayName === void 0 ? "useConnect" : _options$displayName;
    (0, _react.useDebugValue)(displayName);

    var _useState = (0, _react.useState)(function () {
      return {
        props: props,
        state: calculateState({}, options)
      };
    }),
        data = _useState[0],
        setData = _useState[1];

    var isMount = (0, _reshowHooks.useMounted)();
    (0, _react.useEffect)(function () {
      var handleChange = function handleChange(storeSyncState) {
        if (_reshowConstant.T_TRUE === isMount()) {
          /**
           * Why storeSyncState?
           *
           * It's useful for synchronous programing to get correct data,
           * when it pass from reducer directly.
           */
          options.storeSyncState = storeSyncState;
          setData(function (prev) {
            return handleShouldComponentUpdate({
              options: options,
              shouldComponentUpdate: shouldComponentUpdate,
              calculateState: calculateState,
              prev: prev,
              props: props
            });
          });
        }
      };

      if (!data.__init__ || data.props !== props) {
        handleChange(options.store.getState());
      }

      options.store.addListener(handleChange);
      return function () {
        options.store.removeListener(handleChange);
      };
    }, props.renewProps ? [props] : []);
    return data.state || {};
  };
};

var _default = useConnect;
exports["default"] = _default;
module.exports = exports.default;