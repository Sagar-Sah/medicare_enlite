"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _react = require("react");

/**
 * How to use?
 *
 *  import { useEffect } from "react";
 *  import { useStore, ImmutableStore } from "reshow-flux";
 *  const [store, dispatch] = ImmutableStore();
 *  const Comp = props => {
 *    const state = useStore(store);
 *    useEffect(()=>dispatch({foo: "bar"}), []);
 *    return <div>{state.get("foo")}</div>;
 *  }
 */
var useStore = function useStore(store, heeding) {
  var lastEmit = (0, _react.useRef)();

  if (!lastEmit.current) {
    lastEmit.current = {
      /**
       * Pass empty {} to heeding, that easy use
       * if(!emit.current){return initState;}
       * inside heeding.
       */
      state: heeding ? heeding({}) : store.getState()
    };
  }

  var subscribe = (0, _react.useCallback)(function (notify) {
    var myHeeding = heeding || function (emit) {
      emit.current.state = emit.current.storeState;
      emit.current.notify();
    };

    var myListener = function myListener(storeState, action, prevStoreState) {
      lastEmit.current = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, lastEmit.current), {}, {
        storeState: storeState,
        action: action,
        prevStoreState: prevStoreState,
        notify: notify
      });
      myHeeding(lastEmit);
    };

    store.addListener(myListener);
    return function () {
      return store.removeListener(myListener);
    };
  }, [store, heeding]);

  var getState = function getState() {
    return lastEmit.current.state;
  };

  return (0, _react.useSyncExternalStore)(subscribe, getState, getState);
};

var _default = useStore;
exports["default"] = _default;
module.exports = exports.default;