import { useState, useEffect, useDebugValue } from "react";
import { useMounted } from "reshow-hooks";
import { T_TRUE } from "reshow-constant";
import getStore from "./getStore.mjs";

var handleShouldComponentUpdate = function handleShouldComponentUpdate(_ref) {
  var {
    options,
    shouldComponentUpdate,
    calculateState,
    prev,
    props
  } = _ref;
  var nextState = calculateState(prev.state, options);
  var bUpdate = !shouldComponentUpdate || shouldComponentUpdate({
    prev,
    nextProps: props,
    nextState
  });

  if (!bUpdate || props === prev.props && nextState === prev.state) {
    prev.__init__ = T_TRUE;
    return prev;
  } else {
    return {
      props,
      __init__: T_TRUE,
      state: nextState
    };
  }
};

var useConnect = function useConnect(inputOptions) {
  if (inputOptions === void 0) {
    inputOptions = {};
  }

  return function (props) {
    var options = getStore({
      options: inputOptions,
      props
    });
    var {
      calculateState,
      shouldComponentUpdate,
      displayName = "useConnect"
    } = options;
    useDebugValue(displayName);
    var [data, setData] = useState(function () {
      return {
        props,
        state: calculateState({}, options)
      };
    });
    var isMount = useMounted();
    useEffect(function () {
      var handleChange = function handleChange(storeSyncState) {
        if (T_TRUE === isMount()) {
          /**
           * Why storeSyncState?
           *
           * It's useful for synchronous programing to get correct data,
           * when it pass from reducer directly.
           */
          options.storeSyncState = storeSyncState;
          setData(function (prev) {
            return handleShouldComponentUpdate({
              options,
              shouldComponentUpdate,
              calculateState,
              prev,
              props
            });
          });
        }
      };

      if (!data.__init__ || data.props !== props) {
        handleChange(options.store.getState());
      }

      options.store.addListener(handleChange);
      return function () {
        options.store.removeListener(handleChange);
      };
    }, props.renewProps ? [props] : []);
    return data.state || {};
  };
};

export default useConnect;