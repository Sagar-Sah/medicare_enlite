import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";
import { useState } from "react";
import { expect } from "chai";
import { render, act, cleanIt, getSinon as sinon } from "reshow-unit";
import usePrevious from "../usePrevious.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("test usePrevious", function () {
  afterEach(function () {
    return cleanIt();
  });
  it("basic test", /*#__PURE__*/_asyncToGenerator(function* () {
    var hackGlobal;
    var i = 0;
    var expectedPrev = [undefined, undefined, "foo", "bar"];

    var FOO = function FOO(props) {
      var prev = usePrevious(props.v);
      expect(prev).to.equal(expectedPrev[i++]);

      hackGlobal = function hackGlobal() {
        return {
          v: props.v,
          prev
        };
      };

      return null;
    };

    var gSet;

    var Comp = function Comp(props) {
      var [state, setState] = useState("foo");
      gSet = setState;
      return /*#__PURE__*/_jsx(FOO, {
        v: state
      });
    };

    render( /*#__PURE__*/_jsx(Comp, {}));
    expect(hackGlobal(), 1).to.deep.equal({
      v: "foo",
      prev: undefined
    });
    yield act(function () {
      gSet("bar");
    });
    expect(hackGlobal(), 2).to.deep.equal({
      v: "bar",
      prev: "bar"
    });
  }));
  it("test call times", /*#__PURE__*/_asyncToGenerator(function* () {
    var spy = sinon().spy();

    var FOO = function FOO(_ref3) {
      var {
        v
      } = _ref3;
      var prev = usePrevious(v);

      if (v !== prev) {
        spy();
      }

      return null;
    };

    var gSet;

    var Comp = function Comp(props) {
      var [state, setState] = useState("foo");
      gSet = setState;
      return /*#__PURE__*/_jsx(FOO, {
        v: state
      });
    };

    yield render( /*#__PURE__*/_jsx(Comp, {}));
    expect(spy.callCount <= 2).to.be.true;
    yield act(function () {
      gSet("bar");
    });
    expect(spy.callCount <= 3).to.be.true;
  }));
  it("test call times with init", /*#__PURE__*/_asyncToGenerator(function* () {
    var spy = sinon().spy();

    var FOO = function FOO(_ref5) {
      var {
        v
      } = _ref5;
      var prev = usePrevious(v, "foo");

      if (v !== prev) {
        spy();
      }

      return null;
    };

    var gSet;

    var Comp = function Comp(props) {
      var [state, setState] = useState("foo");
      gSet = setState;
      return /*#__PURE__*/_jsx(FOO, {
        v: state
      });
    };

    yield render( /*#__PURE__*/_jsx(Comp, {}));
    expect(spy.callCount === 0).to.be.true;
  }));
});