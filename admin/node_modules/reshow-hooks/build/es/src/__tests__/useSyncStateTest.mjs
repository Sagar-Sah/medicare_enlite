import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";
import { useRef, useEffect } from "react";
import { expect } from "chai";
import { render, waitFor, getSinon, act } from "reshow-unit";
import useSyncState from "../useSyncState.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("test useSyncState", function () {
  it("basic test", function () {
    var Comp = function Comp() {
      var [state, setState] = useSyncState("foo");
      return /*#__PURE__*/_jsx("div", {
        children: state
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(Comp, {}));
    expect(wrap.html()).to.equal("<div>foo</div>");
  });
  it("should sync", function () {
    var gFoo1;
    var gFoo2;
    var gFoo3;

    var Comp = function Comp() {
      var [state, setState, lastState] = useSyncState("foo");
      var lastSync = useRef(state);
      gFoo1 = lastSync;
      useEffect(function () {
        setState("bar");
        gFoo2 = state;
        gFoo3 = lastState();
      }, []);
      return /*#__PURE__*/_jsx("div", {
        children: state
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(Comp, {}));
    expect(wrap.html()).to.equal("<div>bar</div>");
    expect(gFoo1.current).to.equal("foo");
    expect(gFoo2).to.equal("foo");
    expect(gFoo3).to.equal("bar");
  });
  it("test set callback", function () {
    var gFoo1;

    var Comp = function Comp() {
      var [state, setState, lastState] = useSyncState("foo");
      useEffect(function () {
        setState(function (prev) {
          if (null == gFoo1) {
            gFoo1 = prev;
          }

          return "bar";
        });
      }, []);
      return /*#__PURE__*/_jsx("div", {
        children: state
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(Comp, {}));
    expect(wrap.html()).to.equal("<div>bar</div>");
    expect(gFoo1).to.equal("foo");
  });
  it("test render times", /*#__PURE__*/_asyncToGenerator(function* () {
    var spy = getSinon().spy();
    var gSet;

    var Comp = function Comp() {
      var [state, setState] = useSyncState("foo");
      gSet = setState;
      spy();
      return /*#__PURE__*/_jsx("div", {
        children: state
      });
    };

    yield render( /*#__PURE__*/_jsx(Comp, {}));
    expect(spy.callCount <= 2).to.be.true;
    yield act(function () {
      return gSet("foobar");
    });
    expect(spy.callCount <= 4).to.be.true;
    yield act(function () {
      return gSet("foobar");
    });
    expect(spy.callCount <= 4).to.be.true;
  }));
});