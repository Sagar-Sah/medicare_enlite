import { expect } from "chai";
import { render } from "reshow-unit";
import { Map, fromJS } from "reshow-flux";
import { createReducer } from "reshow-flux-base";
import useReturn from "../useReturn.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("Test useReturn", function () {
  it("basic test", function () {
    var [store, dispatch] = createReducer(function (state, ation) {
      return action;
    }, {
      foo: "bar"
    });

    var Dom = function Dom(props) {
      var state = useReturn(["foo"], store);
      return state.foo;
    };

    var wrap = render( /*#__PURE__*/_jsx(Dom, {}));
    expect(wrap.html()).to.equal("bar");
  });
  it("test default immutable", function () {
    var [store, dispatch] = createReducer(function (state, ation) {
      return action;
    }, fromJS({
      m: {}
    }));

    var Dom = function Dom(props) {
      var state = useReturn(["m"], store);
      expect(Map.isMap(state.m)).to.be.true;
      return null;
    };

    var wrap = render( /*#__PURE__*/_jsx(Dom, {}));
  });
  it("test default is not immutable", function () {
    var [store, dispatch] = createReducer(function (state, ation) {
      return action;
    }, fromJS({
      m: {}
    }));

    var Dom = function Dom(props) {
      var state = useReturn(["m"], store, {
        immutable: false
      });
      expect(Map.isMap(state.m)).to.be.false;
      return null;
    };

    var wrap = render( /*#__PURE__*/_jsx(Dom, {}));
  });
});