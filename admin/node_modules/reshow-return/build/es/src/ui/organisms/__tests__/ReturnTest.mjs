import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
var _excluded = ["store", "initStates", "pathStates"];

var _div;

import { PureComponent, useState } from "react";
import { ImmutableStore, mergeMap, fromJS } from "reshow-flux";
import { expect } from "chai";
import { act, waitFor, render, getRoleHtml, cleanIt, getSinon as sinon } from "reshow-unit";
import Return from "../Return.mjs";
import MemoReturn from "../MemoReturn.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
var [pageStore, dispatch] = ImmutableStore(function (state, action) {
  switch (action.type) {
    case "config/reset":
      return fromJS(action.params) || state.clear();

    default:
      return mergeMap(state, action);
  }
});
describe("Test Return", function () {
  var _FakeComponent, _FakeComponent2, _FakeComponent3;

  var TestEl = /*#__PURE__*/function (_PureComponent) {
    _inherits(TestEl, _PureComponent);

    var _super = _createSuper(TestEl);

    function TestEl() {
      _classCallCheck(this, TestEl);

      return _super.apply(this, arguments);
    }

    _createClass(TestEl, [{
      key: "render",
      value: function render() {
        return _div || (_div = /*#__PURE__*/_jsx("div", {}));
      }
    }]);

    return TestEl;
  }(PureComponent);

  var uFake;

  var FakeComponent = /*#__PURE__*/function (_PureComponent2) {
    _inherits(FakeComponent, _PureComponent2);

    var _super2 = _createSuper(FakeComponent);

    function FakeComponent(props) {
      var _this;

      _classCallCheck(this, FakeComponent);

      _this = _super2.call(this, props);

      _defineProperty(_assertThisInitialized(_this), "state", {
        store: pageStore,
        initStates: ["data"],
        pathStates: {
          I13N: ["data", "I13N"]
        }
      });

      uFake = _assertThisInitialized(_this);
      return _this;
    }

    _createClass(FakeComponent, [{
      key: "setNew",
      value: function setNew(k, v) {
        this.setState({
          [k]: v
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$state = this.state,
            {
          store,
          initStates,
          pathStates
        } = _this$state,
            otherState = _objectWithoutProperties(_this$state, _excluded);

        return /*#__PURE__*/_jsx(Return, _objectSpread(_objectSpread({
          renewProps: true,
          store: store,
          initStates: initStates,
          pathStates: pathStates
        }, this.props), {}, {
          children: /*#__PURE__*/_jsx(TestEl, _objectSpread({
            ref: function ref(el) {
              return _this2.el = el;
            }
          }, otherState))
        }));
      }
    }]);

    return FakeComponent;
  }(PureComponent);

  afterEach(function () {
    cleanIt();
    dispatch("config/reset");
  });
  it("assign props", /*#__PURE__*/_asyncToGenerator(function* () {
    var wrap = render(_FakeComponent || (_FakeComponent = /*#__PURE__*/_jsx(FakeComponent, {})));
    yield act(function () {
      return dispatch({
        data: {
          foo: "bar",
          I13N: {
            aaa: "bbb"
          }
        }
      });
    }, 5);
    expect(uFake.el.props.data).to.deep.equal({
      foo: "bar",
      I13N: {
        aaa: "bbb"
      }
    });
    expect(uFake.el.props.I13N).to.deep.equal({
      aaa: "bbb"
    });
    yield act(function () {
      return uFake.setNew("pathStates", {
        foo: ["data", "foo"]
      });
    });
    expect(uFake.el.props.foo).to.equal("bar");
  }));
  it("test Immutable path state", /*#__PURE__*/_asyncToGenerator(function* () {
    var wrap = render(_FakeComponent2 || (_FakeComponent2 = /*#__PURE__*/_jsx(FakeComponent, {
      immutable: true
    })));
    yield act(function () {
      dispatch(fromJS({
        data: {
          foo: "bar",
          I13N: {
            a: "b"
          }
        }
      }));
    }, 5);
    var firstData = uFake.el.props.data;
    var firstI13N = uFake.el.props.I13N;
    yield act(function () {
      uFake.setNew("bar", "bbb");
    }, 5);
    var secondData = uFake.el.props.data;
    var secondI13N = uFake.el.props.I13N;
    expect(firstData === secondData).to.be.true;
    expect(firstI13N === secondI13N).to.be.true;
    expect(firstData.toJS()).to.deep.equal({
      foo: "bar",
      I13N: {
        a: "b"
      }
    });
    expect(firstI13N.toJS()).to.deep.equal({
      a: "b"
    });
  }));
  it("test path state should clean", /*#__PURE__*/_asyncToGenerator(function* () {
    render(_FakeComponent3 || (_FakeComponent3 = /*#__PURE__*/_jsx(FakeComponent, {
      immutable: true
    })));
    expect(uFake.el.props.data).to.undefined;
    yield act(function () {
      return dispatch({
        data: ""
      });
    }, 3);
    expect(uFake.el.props.I13N).to.undefined;
    expect(uFake.el.props.data).to.equal("");
  }));
  it("test child with function", /*#__PURE__*/_asyncToGenerator(function* () {
    var vDom = /*#__PURE__*/_jsx(Return, {
      store: pageStore,
      initStates: ["data"],
      children: function children(props) {
        return /*#__PURE__*/_jsx("div", {
          role: "dom",
          children: props.data
        });
      }
    });

    render(vDom);
    yield act(function () {
      dispatch({
        data: "foo"
      });
    }, 10);
    expect(getRoleHtml("dom")).to.equal("<div role=\"dom\">foo</div>");
  }));
  it("test backfill props", function () {
    dispatch({
      foo: "foo",
      bar: "bar"
    });
    var wrap = render( /*#__PURE__*/_jsx(FakeComponent, {
      store: pageStore,
      initStates: ["foo", "bar"],
      backfillProps: true,
      foo: "foo1"
    }));
    var uFakeEl = uFake.el;
    expect(uFakeEl.props).to.deep.equal({
      foo: "foo1",
      bar: "bar"
    });
  });
  it("test non backfill", function () {
    dispatch({
      foo: "foo",
      bar: "bar"
    });
    var wrap = render( /*#__PURE__*/_jsx(FakeComponent, {
      store: pageStore,
      initStates: ["foo", "bar"],
      foo: "foo1"
    }));
    var uFakeEl = uFake.el;
    expect(uFakeEl.props).to.deep.equal({
      foo: "foo",
      bar: "bar"
    });
  });
  it("test Return render times", /*#__PURE__*/_asyncToGenerator(function* () {
    var spy = sinon().spy(function (props) {
      return /*#__PURE__*/_jsx("div", {
        "data-state": props.foo,
        "data-props": props.bar
      });
    });
    var gSet;

    var Comp = function Comp(props) {
      var [state, setState] = useState({});
      gSet = setState;
      return /*#__PURE__*/_jsx(MemoReturn, {
        props: state.bar,
        children: /*#__PURE__*/_jsx(Return, {
          initStates: ["foo"],
          store: pageStore,
          children: spy
        })
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(Comp, {}));
    var count;
    count = spy.callCount;
    expect(count > 1, 1).to.be.true;
    yield act(function () {
      return dispatch({
        foo: "bar"
      });
    });
    yield waitFor(function () {
      return expect(count < spy.callCount, 2).to.be.true;
    });
    count = spy.callCount;
    yield act(function () {
      return dispatch({
        bar: "bar"
      });
    });
    expect(count === spy.callCount, 3).to.be.true;
    count = spy.callCount;
    yield act(function () {
      return gSet(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          bar: {
            bar: "b"
          }
        });
      });
    });
    expect(count < spy.callCount, 4).to.be.true;
    count = spy.callCount;
    yield act(function () {
      return gSet(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          foo: {
            bar: "b"
          }
        });
      });
    });
    expect(count === spy.callCount, 5).to.be.true;
    expect(wrap.html()).to.equal("<div data-state=\"bar\" data-props=\"b\"></div>");
  }));
});