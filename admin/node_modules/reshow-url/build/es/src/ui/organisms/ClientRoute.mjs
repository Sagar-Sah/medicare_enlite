import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _get from "reshow-runtime/es/helpers/get";
import _getPrototypeOf from "reshow-runtime/es/helpers/getPrototypeOf";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
//@ts-check
import Reshow, { dispatch } from "reshow";
import { ajaxDispatch } from "organism-react-ajax";
import { doc } from "win-doc";
import handleAnchor from "../../handleAnchor.mjs";
/**
 * @param {string} url
 */

var defaultOnUrlChange = function defaultOnUrlChange(url) {
  return (
    /**
     * @param {function} handleAnchor
     */
    function (handleAnchor) {
      return (
        /**
         * @param {number} goAnchorDelay
         * @returns {Object}
         */
        function (goAnchorDelay) {
          var separator = "/";
          var params = url.split(separator);
          var last = params.length - 1;
          var lastPath = params[last];
          var next = {
            pvid: url,
            themePath: null
          };

          if (lastPath) {
            next.themePath = handleAnchor(lastPath)(goAnchorDelay);
          }

          return next;
        }
      );
    }
  );
};
/**
 * @extends {Reshow}
 */


var ClientRoute = /*#__PURE__*/function (_Reshow) {
  _inherits(ClientRoute, _Reshow);

  var _super = _createSuper(ClientRoute);

  function ClientRoute() {
    _classCallCheck(this, ClientRoute);

    return _super.apply(this, arguments);
  }

  _createClass(ClientRoute, [{
    key: "getPath",
    value: function getPath() {
      var _this$getUrlChangeSta,
          _this = this;

      var themePath = (_this$getUrlChangeSta = this.getUrlChangeState(this.props.url || doc().URL)) === null || _this$getUrlChangeSta === void 0 ? void 0 : _this$getUrlChangeSta.themePath;
      var themes = this.props.themes;

      if (themes[themePath]) {
        setTimeout(function () {
          return dispatch({
            themePath: themePath !== null && themePath !== void 0 ? themePath : _this.getGlobalPath()
          });
        });
        return themePath;
      }
    }
    /**
     * @param {string} url
     * @returns {Object}
     */

  }, {
    key: "getUrlChangeState",
    value: function getUrlChangeState(url) {
      var {
        onUrlChange,
        onHashChange,
        goAnchorDelay
      } = this.props;
      var thisUrlChangeFunc = onUrlChange ? onUrlChange : defaultOnUrlChange;
      return thisUrlChangeFunc(url)(onHashChange)(goAnchorDelay);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      _get(_getPrototypeOf(ClientRoute.prototype), "componentDidMount", this).call(this);

      ajaxDispatch({
        onUrlChange: this.getUrlChangeState.bind(this)
      });
    }
  }]);

  return ClientRoute;
}(Reshow);

_defineProperty(ClientRoute, "defaultProps", {
  ajax: false,
  goAnchorDelay: 1500,
  fallback: "div",
  onHashChange: handleAnchor
});

export default ClientRoute;