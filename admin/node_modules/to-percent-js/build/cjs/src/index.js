"use strict";

exports.__esModule = true;
exports.toNum = exports.toInt = exports.round = exports.percent = exports.getNum = exports["default"] = void 0;

var _reshowConstant = require("reshow-constant");

var numTypes = "|" + _reshowConstant.NUMBER + "|" + _reshowConstant.STRING + "|";

var toPercent = function toPercent(num) {
  return percent(num) + "%";
};

var percent = function percent(num) {
  return round(toNum(num) * 100);
};

exports.percent = percent;

var round = function round(f, precision) {
  return toNum(f).toFixed(precision !== null && precision !== void 0 ? precision : 2);
};

exports.round = round;
var ERROR_INFO = "Get number fail.";

var toNum = function toNum(num) {
  if (_reshowConstant.UNDEFINED === typeof num) {
    return 0;
  } else if (-1 === numTypes.indexOf("|" + typeof num + "|") || !num) {
    var maybeNaN = Number(num);
    return isNaN(maybeNaN) ? 0 : maybeNaN;
  } else {
    var maybeString = num && num.trim ? num.trim() : num + "";
    var maybeFloat = parseFloat(maybeString);
    var maybeInt = parseInt(maybeString, 10);

    if (maybeFloat === maybeInt && (maybeInt + "" === maybeString || 0 === maybeInt)) {
      return maybeInt;
    } else {
      if (maybeString === maybeFloat + "") {
        return maybeFloat;
      } else {
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER
        var willNum = 0;

        if (-1 !== maybeString.indexOf(".")) {
          return maybeFloat;
        } else {
          if (!isNaN(maybeString)) {
            willNum = maybeString;
          }
        }

        console.warn(ERROR_INFO, {
          willNum: willNum,
          maybeString: maybeString,
          num: num
        });
        return willNum;
      }
    }
  }
};

exports.toNum = toNum;

var toInt = function toInt(num) {
  return toNum(round(num, 0));
};

exports.toInt = toInt;
var numReg = /(\-)?(\d+)(\.)?(\d+)?/g;

var getNum = function getNum(s) {
  if (_reshowConstant.STRING !== typeof s) {
    return toNum(s);
  }

  var match = s.replace(",", "").match(numReg);

  if (!match) {
    console.warn(ERROR_INFO, s);
    return 0;
  } else {
    return toNum(match[0]);
  }
};

exports.getNum = getNum;
var _default = toPercent;
exports["default"] = _default;