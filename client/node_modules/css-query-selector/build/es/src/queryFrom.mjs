import _toConsumableArray from "reshow-runtime/es/helpers/toConsumableArray";
import { doc } from "win-doc";
import { FUNCTION, STRING } from "reshow-constant";
var arrayFrom = function arrayFrom(a) {
  return a ? _toConsumableArray(a) : [];
};
var findHit = function findHit(all, el) {
  var hit;
  var setHit = function setHit(p) {
    return hit = p;
  };
  all.some(function (p) {
    return p.contains(el) && !p.isSameNode(el) ? setHit(p) : false;
  });
  return hit;
};
var queryFrom = function queryFrom(base) {
  if (!base) {
    return false;
  }
  var myBase = FUNCTION === typeof base ? base : function () {
    return defaultQuery.el(base);
  };
  var queryOne = function queryOne(sel) {
    var _myBase;
    return (_myBase = myBase()) === null || _myBase === void 0 ? void 0 : _myBase.querySelector(sel);
  };
  var _all = function _all(sel) {
    var _myBase2;
    return arrayFrom((_myBase2 = myBase()) === null || _myBase2 === void 0 ? void 0 : _myBase2.querySelectorAll(sel));
  };
  var queryAll = function queryAll(sel) {
    return sel && (sel.reduce ? sel.reduce(function (accumulator, currentValue) {
      return accumulator.concat(_all(currentValue));
    }, []) : _all(sel));
  };
  var queryEl = function queryEl(el) {
    return STRING === typeof el ? queryOne(el) : el;
  };
  var _queryAncestorPolyfill = function _queryAncestorPolyfill(el, ancestor) {
    var lastHit;
    var hit;
    var all = _all(ancestor);
    if (all) {
      hit = findHit(all, el);
    }
    while (hit) {
      lastHit = hit;
      all = hit.querySelectorAll(ancestor);
      if (all) {
        hit = findHit(arrayFrom(all), el);
      } else {
        break;
      }
    }
    return lastHit;
  };
  var queryAncestor = function queryAncestor(el, ancestor) {
    el = queryEl(el);
    if (!el) {
      console.warn("Element is empty.");
      return false;
    }
    return el.closest ? el.closest(ancestor) : _queryAncestorPolyfill(el, ancestor);
  };
  return {
    all: queryAll,
    ancestor: queryAncestor,
    el: queryEl,
    one: queryOne
  };
};
var defaultQuery = queryFrom(doc);
export default queryFrom;
export { defaultQuery };