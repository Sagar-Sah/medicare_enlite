import { expect } from "chai";
import Storage, { parseField, encode, decode } from "../Storage.mjs";
import { UNDEFINED } from "reshow-constant";

var fakeSetter = function fakeSetter(store) {
  return function (key) {
    return function (value) {
      if (UNDEFINED === typeof value) {
        return store[key];
      } else {
        if (null == value) {
          return delete store[key];
        } else {
          store[key] = value;
        }
      }
    };
  };
};

describe("Storage", function () {
  it("Storage / parseField", function () {
    var s = "10,abcdefghij";

    var _parseField = parseField(s),
        len = _parseField[0],
        val = _parseField[1];

    expect(len).to.equal(10);
    expect(val).to.equal("abcdefghij");
  });
  it("Storage / encode, decode", function () {
    var o = {
      foo: "bar"
    };
    var sEncode = encode(o);
    expect(sEncode).to.equal('13,{"foo":"bar"}');
    expect(decode(sEncode)).to.deep.equal(o);
  });
  it("test storage / set, get", function () {
    var fakeStore = {};
    var fakeStorage = new Storage(fakeSetter(fakeStore));
    var foo = fakeStorage.get('foo');
    expect(foo).to.be.undefined;
    foo = fakeStorage.set('foo', 'bar');
    expect(fakeStore).to.deep.equal({
      foo: '5,"bar"'
    });
    expect(foo.get('foo')).to.equal("bar");
  });
  it("test merge / merge same value", function () {
    var fakeStore = {};
    var fakeStorage = new Storage(fakeSetter(fakeStore));
    var result = fakeStorage.merge({
      foo: "bar"
    });
    expect(result.get('foo')).to.equal("bar");
    var result2 = result.merge({
      foo: "bar"
    });
    expect(result === result2).to.be["true"];
  });
  it("test merge / merge different value", function () {
    var fakeStore = {};
    var fakeStorage = new Storage(fakeSetter(fakeStore));
    var result = fakeStorage.merge({
      foo: "bar"
    });
    expect(fakeStore).to.deep.equal({
      foo: '5,"bar"'
    });
    expect(result.get('foo')).to.equal("bar");
    var result2 = result.merge({
      foo: "bar1"
    });
    expect(result === result2).to.be["false"];
  });
  it("test disable encode", function () {
    var fakeStore = {};
    var fakeStorage = new Storage(fakeSetter(fakeStore), true);
    fakeStorage.merge({
      foo: "bar"
    });
    expect(fakeStore).to.deep.equal({
      foo: "bar"
    });
  });
});