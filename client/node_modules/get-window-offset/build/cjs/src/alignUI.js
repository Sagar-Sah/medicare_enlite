"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _getoffset = _interopRequireDefault(require("getoffset"));
var _getScrollInfo = _interopRequireDefault(require("get-scroll-info"));
var _getObjectValue = _interopRequireDefault(require("get-object-value"));
var _getDomPositionInfo = _interopRequireDefault(require("./getDomPositionInfo.js"));
var _getAfterMove = _interopRequireDefault(require("./getAfterMove.js"));
var _getWindowOffset = _interopRequireDefault(require("./getWindowOffset.js"));
var _alignWith = _interopRequireDefault(require("./alignWith.js"));
var _isFullOnScreen = _interopRequireDefault(require("./isFullOnScreen.js"));
var _positions = _interopRequireDefault(require("./positions.js"));
var _getPositionString = _interopRequireDefault(require("./getPositionString.js"));
var getAlignWithLoc = function getAlignWithLoc(toLoc) {
  var loc;
  switch (toLoc) {
    case _positions["default"].TR:
      loc = _positions["default"].TL;
      break;
    case _positions["default"].TL:
      loc = _positions["default"].TR;
      break;
    case _positions["default"].RB:
      loc = _positions["default"].BL;
      break;
    case _positions["default"].BL:
      loc = _positions["default"].RB;
      break;
    default:
      loc = toLoc;
      break;
  }
  return loc;
};
var fixFixedNode = function fixFixedNode(scrollInfo) {
  return function (move) {
    return [move[0] + scrollInfo.left, move[1] + scrollInfo.top];
  };
};
var fixScrollNode = function fixScrollNode(scrollInfo) {
  return function (move) {
    return [move[0] - scrollInfo.left, move[1] - scrollInfo.top];
  };
};
var alignUI = function alignUI(targetEl, floatEl, alignParams, winInfo) {
  var _get = (0, _getObjectValue["default"])(alignParams, null, {}),
    toLoc = _get.toLoc,
    disableAutoLoc = _get.disableAutoLoc,
    positionFixed = _get.positionFixed,
    exclude = _get.exclude;
  if (!targetEl) {
    console.warn("targetEl was empty", {
      targetEl: targetEl
    });
    return false;
  }
  var targetInfo;
  var locs = [];
  if (toLoc) {
    locs.push(toLoc);
  }
  if (!disableAutoLoc) {
    winInfo = winInfo || (0, _getWindowOffset["default"])(targetEl);
    if (!winInfo) {
      console.warn("get windows offset failed", {
        targetEl: targetEl
      });
    } else {
      locs = locs.concat(winInfo.locs);
    }
  }
  if (!locs.length) {
    console.warn("Not set any locs", {
      toLoc: toLoc
    });
    return false;
  }
  if (!targetInfo) {
    if (winInfo) {
      targetInfo = winInfo.domInfo;
    } else {
      targetInfo = (0, _getDomPositionInfo["default"])(targetEl).domInfo;
    }
  }
  if (!targetInfo) {
    console.warn("[alertUI] can't get target info.", {
      targetEl: targetEl,
      winInfo: winInfo
    });
    return false;
  }
  var adjustMove;
  var scrollNode = targetInfo.scrollNode;
  var fixedNode = targetInfo.fixedNode;
  if (fixedNode) {
    if (fixedNode.contains(floatEl)) {
      adjustMove = fixFixedNode((0, _getScrollInfo["default"])(fixedNode));
    } else if (positionFixed) {
      adjustMove = fixScrollNode((0, _getScrollInfo["default"])(fixedNode));
    } else {
      if (winInfo) {
        adjustMove = fixFixedNode(winInfo.scrollInfo);
      } else {
        adjustMove = fixFixedNode((0, _getScrollInfo["default"])());
      }
    }
  } else if (scrollNode) {
    adjustMove = fixScrollNode((0, _getScrollInfo["default"])(scrollNode));
  }
  var loc;
  var move;
  var floatInfo = (0, _getoffset["default"])(floatEl);
  locs.some(function (locItem) {
    loc = locItem;
    if (exclude && -1 !== exclude.indexOf(loc)) {
      return false;
    }
    move = (0, _alignWith["default"])(targetInfo, floatInfo, loc);
    if (adjustMove) {
      move = adjustMove(move);
    }
    if (!winInfo) {
      return true;
    } else {
      var movePos = (0, _getAfterMove["default"])(floatInfo, move);
      var bFullOnScreen = (0, _isFullOnScreen["default"])(movePos, winInfo.scrollInfo);
      if (bFullOnScreen) {
        return true;
      } else {
        return false;
      }
    }
  });
  if (!move) {
    return false;
  }
  var result = {
    loc: loc,
    move: move,
    toLoc: toLoc || loc,
    locClassName: (0, _getPositionString["default"])(loc)
  };
  //   console.log(result, {locs, winInfo});
  return result;
};
var _default = alignUI;
exports["default"] = _default;
module.exports = exports.default;