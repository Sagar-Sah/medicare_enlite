"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));
var _getScrollInfo = _interopRequireDefault(require("get-scroll-info"));
var _isOnScreen = _interopRequireDefault(require("./isOnScreen.js"));
var _getDomPositionInfo2 = _interopRequireDefault(require("./getDomPositionInfo.js"));
var _positions = _interopRequireDefault(require("./positions.js"));
var T = "T";
var R = "R";
var B = "B";
var L = "L";
var C = "C";
var getRevertLoc = function getRevertLoc(fromLoc) {
  var loc;
  switch (fromLoc) {
    case _positions["default"].TL:
      loc = _positions["default"].TR;
      break;
    case _positions["default"].TR:
      loc = _positions["default"].TL;
      break;
    case _positions["default"].BL:
      loc = _positions["default"].BR;
      break;
    case _positions["default"].BR:
      loc = _positions["default"].BL;
      break;
    default:
      loc = fromLoc;
      break;
  }
  return loc;
};
var calWindowOffset = function calWindowOffset(domInfo, scrollInfo) {
  var _distanceFlip;
  var distance = {
    top: domInfo.top - scrollInfo.top,
    right: scrollInfo.right - domInfo.right,
    bottom: scrollInfo.bottom - domInfo.bottom,
    left: domInfo.left - scrollInfo.left
  };
  var maxDistance = Math.max(distance.top, distance.right, distance.bottom, distance.left);
  var distanceFlip = (_distanceFlip = {}, _distanceFlip[distance.top] = T, _distanceFlip[distance.right] = R, _distanceFlip[distance.bottom] = B, _distanceFlip[distance.left] = L, _distanceFlip);
  var firstKey = distanceFlip[maxDistance];
  var secondKey;
  if (firstKey === T || firstKey === B) {
    var _distanceFlip2;
    distanceFlip = (_distanceFlip2 = {}, _distanceFlip2[distance.right] = R, _distanceFlip2[distance.left] = L, _distanceFlip2);
    secondKey = distanceFlip[Math.max(distance.left, distance.right)];
  } else {
    var _distanceFlip3;
    distanceFlip = (_distanceFlip3 = {}, _distanceFlip3[distance.top] = T, _distanceFlip3[distance.bottom] = B, _distanceFlip3);
    secondKey = distanceFlip[Math.max(distance.top, distance.bottom)];
  }
  var locs = [getRevertLoc(_positions["default"][firstKey + secondKey]), _positions["default"][firstKey + C], _positions["default"][secondKey + C], getRevertLoc(_positions["default"][secondKey + firstKey])];
  return {
    locs: locs,
    firstKey: firstKey,
    secondKey: secondKey
  };
};
var getWindowOffset = function getWindowOffset(dom, debug) {
  if (!dom) {
    console.warn("getWindowOffset not assign dom");
    return false;
  }
  var _getDomPositionInfo = (0, _getDomPositionInfo2["default"])(dom),
    fixedNode = _getDomPositionInfo.fixedNode,
    scrollNode = _getDomPositionInfo.scrollNode,
    targetDomInfo = _getDomPositionInfo.domInfo;
  var scrollInfo = (0, _getScrollInfo["default"])();
  var cookScrollInfo = (0, _objectSpread2["default"])({}, scrollInfo);
  if (fixedNode) {
    var fixedScrollInfo = (0, _getScrollInfo["default"])(fixedNode);
    cookScrollInfo.top = fixedScrollInfo.top;
    cookScrollInfo.right = scrollInfo.scrollNodeWidth;
    cookScrollInfo.bottom = scrollInfo.scrollNodeHeight;
    cookScrollInfo.left = fixedScrollInfo.left;
  } else if (scrollNode) {
    var scrollNodeScrollInfo = (0, _getScrollInfo["default"])(scrollNode);
    cookScrollInfo.top += scrollNodeScrollInfo.top;
    cookScrollInfo.right += scrollNodeScrollInfo.left;
    cookScrollInfo.bottom += scrollNodeScrollInfo.top;
    cookScrollInfo.left += scrollNodeScrollInfo.left;
  }
  var domInfo = (0, _isOnScreen["default"])(targetDomInfo, cookScrollInfo);
  if (!domInfo.isOnScreen && false !== debug) {
    // should not break function here
    // not use return here
    console.warn("Dom is not in screen", {
      dom: dom,
      domInfo: domInfo,
      scrollInfo: scrollInfo,
      cookScrollInfo: cookScrollInfo
    });
  }
  var result = (0, _objectSpread2["default"])({
    domInfo: domInfo,
    scrollInfo: scrollInfo
  }, calWindowOffset(domInfo, cookScrollInfo));
  return result;
};
var _default = getWindowOffset;
exports["default"] = _default;
module.exports = exports.default;