import { getDefault } from "get-object-value";
import { reactStyle, injectStyle } from "react-atomic-molecule";
import callfunc from "call-func";
import { KEYS, NEW_OBJ } from "reshow-constant";
var inject = NEW_OBJ();
var c = 0;
var processCss = function processCss(cb) {
  return function (css) {
    css = getDefault(css);
    var cssKeys = KEYS(css);
    if (cssKeys.length) {
      cssKeys.forEach(function (key) {
        css[key].push("keyframe-" + key + "-" + c);
        reactStyle.apply(null, css[key]);
        c++;
      });
    }
    callfunc(cb);

    /**
     * cb may have new style,
     * So always inject in last line.
     */
    injectStyle();
  };
};
var getKeyframeCss = function getKeyframeCss(key, cb) {
  if (inject[key]) {
    return;
  }
  var callback = processCss(cb);
  switch (key) {
    case "breath":
      import("./breath.mjs").then(callback);
      break;
    case "candleInTheWind":
      import("./candleInTheWind.mjs").then(callback);
      break;
    case "fadeIn":
      import("./fadeIn.mjs").then(callback);
      break;
    case "fadeInDown":
      import("./fadeInDown.mjs").then(callback);
      break;
    case "fadeInLeft":
      import("./fadeInLeft.mjs").then(callback);
      break;
    case "fadeInRight":
      import("./fadeInRight.mjs").then(callback);
      break;
    case "fadeInUp":
      import("./fadeInUp.mjs").then(callback);
      break;
    case "fadeInUpBig":
      import("./fadeInUpBig.mjs").then(callback);
      break;
    case "fadeOut":
      import("./fadeOut.mjs").then(callback);
      break;
    case "fadeOutDown":
      import("./fadeOutDown.mjs").then(callback);
      break;
    case "fadeOutLeft":
      import("./fadeOutLeft.mjs").then(callback);
      break;
    case "fadeOutRight":
      import("./fadeOutRight.mjs").then(callback);
      break;
    case "fadeOutUp":
      import("./fadeOutUp.mjs").then(callback);
      break;
    case "flip":
      import("./flip.mjs").then(callback);
      break;
    case "pulsate":
      import("./pulsate.mjs").then(callback);
      break;
    case "spin":
      import("./spin.mjs").then(callback);
      break;
    default:
      console.warn("not supported");
      break;
  }
  inject[key] = true;
};
export default getKeyframeCss;