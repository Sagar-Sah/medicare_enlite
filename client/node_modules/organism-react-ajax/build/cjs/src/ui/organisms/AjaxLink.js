"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");
var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");
exports.__esModule = true;
exports["default"] = void 0;
var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutPropertiesLoose"));
var _react = _interopRequireWildcard(require("react"));
var _callFunc = _interopRequireDefault(require("call-func"));
var _reshowBuild = _interopRequireDefault(require("reshow-build"));
var _ajaxStore = _interopRequireWildcard(require("../../stores/ajaxStore.js"));
var _isRunAjax = _interopRequireDefault(require("../../isRunAjax.js"));
var _excluded = ["updateUrl", "disableRandom", "component", "href", "ajax", "target", "callback", "errorCallback", "scrollBack", "path", "onClick", "onTouchStart"];
var getHref = function getHref(_ref) {
  var href = _ref.href,
    path = _ref.path;
  if ((0, _ajaxStore.hasUrl)(href)) {
    return href;
  }
  if (path) {
    var baseUrl = _ajaxStore["default"].getState().get("baseUrl");
    return baseUrl ? (0, _ajaxStore.getRawUrl)({
      path: path,
      baseUrl: baseUrl
    }) : "#";
  } else {
    return null;
  }
};
var useAjaxLink = function useAjaxLink(props) {
  var _props$updateUrl = props.updateUrl,
    updateUrl = _props$updateUrl === void 0 ? true : _props$updateUrl,
    _props$disableRandom = props.disableRandom,
    disableRandom = _props$disableRandom === void 0 ? false : _props$disableRandom,
    _props$component = props.component,
    component = _props$component === void 0 ? "a" : _props$component,
    _props$href = props.href,
    propsHref = _props$href === void 0 ? "#" : _props$href,
    ajax = props.ajax,
    target = props.target,
    callback = props.callback,
    errorCallback = props.errorCallback,
    scrollBack = props.scrollBack,
    path = props.path,
    onClick = props.onClick,
    onTouchStart = props.onTouchStart,
    rest = (0, _objectWithoutPropertiesLoose2["default"])(props, _excluded);
  var isAlreadyTouchStart = (0, _react.useRef)(false);
  var _useState = (0, _react.useState)(propsHref),
    href = _useState[0],
    setHref = _useState[1];
  (0, _react.useEffect)(function () {
    var nextHref = getHref({
      href: propsHref,
      path: path
    });
    if ((0, _ajaxStore.hasUrl)(href) && !(0, _ajaxStore.hasUrl)(nextHref)) {
      return;
    } else {
      setHref(nextHref);
    }
  }, [propsHref, path]);
  var go = (0, _react.useCallback)(function (url) {
    url = url || (0, _ajaxStore.getRawUrl)({
      path: path,
      url: href
    });
    (0, _ajaxStore.ajaxDispatch)("ajaxGet", {
      disableAjax: !(0, _isRunAjax["default"])({
        ajax: ajax
      }),
      url: url,
      updateUrl: updateUrl,
      disableRandom: disableRandom,
      callback: callback,
      errorCallback: errorCallback,
      scrollBack: scrollBack
    });
  }, [href, callback, errorCallback, updateUrl, disableRandom, ajax]);
  var handleClick = (0, _react.useCallback)(function (callback) {
    return function (type) {
      return function (e) {
        var thisHref = href;
        if (!(0, _ajaxStore.hasUrl)(thisHref)) {
          /**
           * should pass empty url to getRawUrl for this case
           * getRawUrl will tyr get url with baseUrl
           */
          var toBaseUrl = (0, _ajaxStore.getRawUrl)({
            path: path
          });
          if (toBaseUrl) {
            thisHref = toBaseUrl;
            e.currentTarget.href = thisHref;
          }
        }
        if ("_blank" !== target) {
          e.preventDefault();
        }
        if ("touchStart" === type) {
          isAlreadyTouchStart.current = true;
        } else {
          if (isAlreadyTouchStart.current) {
            isAlreadyTouchStart.current = false;
            return;
          }
        }
        var isContinue = (0, _callFunc["default"])(callback, [e]);
        if ("_blank" !== target && false !== isContinue) {
          /**
           *  Must use e.currentTarget.href here
           *  becaue it maybe change with callback
           */
          go(e.currentTarget.href);
          setHref(e.currentTarget.href);
        }
      };
    };
  }, [target, href]);
  var expose = {
    go: go
  };
  return {
    expose: expose,
    component: component,
    rest: rest,
    target: target,
    href: href,
    path: path,
    onTouchStart: true === onTouchStart ? handleClick(onTouchStart)("touchStart") : onTouchStart,
    onClick: handleClick(onClick)("click")
  };
};
var AjaxLink = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _useAjaxLink = useAjaxLink(props),
    expose = _useAjaxLink.expose,
    component = _useAjaxLink.component,
    rest = _useAjaxLink.rest,
    target = _useAjaxLink.target,
    href = _useAjaxLink.href,
    path = _useAjaxLink.path,
    onTouchStart = _useAjaxLink.onTouchStart,
    onClick = _useAjaxLink.onClick;
  (0, _react.useImperativeHandle)(ref, function () {
    return expose;
  }, []);
  return (0, _reshowBuild["default"])(component)((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, rest), {}, {
    ref: ref,
    target: target,
    href: href,
    "data-path": path,
    onTouchStart: onTouchStart,
    onClick: onClick
  }));
});
AjaxLink.displayName = "AjaxLink";
var _default = AjaxLink;
exports["default"] = _default;
module.exports = exports.default;