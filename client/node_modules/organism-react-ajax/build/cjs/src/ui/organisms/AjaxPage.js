"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");
var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");
exports.__esModule = true;
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reshowBuild = _interopRequireDefault(require("reshow-build"));
var _winDoc = require("win-doc");
var _ajaxStore = require("../../stores/ajaxStore.js");
var _jsxRuntime = require("react/jsx-runtime");
var AjaxPage = function AjaxPage(props) {
  var _props$win = props.win,
    win = _props$win === void 0 ? (0, _winDoc.win)() : _props$win,
    _props$ajax = props.ajax,
    ajax = _props$ajax === void 0 ? true : _props$ajax,
    baseUrl = props.baseUrl,
    staticVersion = props.staticVersion,
    callback = props.callback,
    _props$themes = props.themes,
    themes = _props$themes === void 0 ? {} : _props$themes,
    themePath = props.themePath,
    fallback = props.fallback,
    webSocketUrl = props.webSocketUrl;
  var lastThemePath = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    (0, _ajaxStore.ajaxDispatch)({
      ajax: ajax,
      baseUrl: baseUrl,
      staticVersion: staticVersion,
      callback: callback
    });
  }, [ajax, baseUrl, staticVersion, callback]);
  (0, _react.useEffect)(function () {
    if (win.WebSocket && webSocketUrl) {
      (0, _ajaxStore.ajaxDispatch)("ws/init", {
        url: webSocketUrl
      });
    }
  }, [webSocketUrl]);
  return (0, _react.useMemo)(function () {
    var thisThemePath = themePath;
    if (null == themes[thisThemePath]) {
      thisThemePath = lastThemePath.current;
      if (null == themes[thisThemePath]) {
        console.error("Not find a theme for name: [" + themePath + "]", themes);
        return null;
      }
    } else {
      lastThemePath.current = thisThemePath;
    }
    var myTheme = themes[thisThemePath];
    var builded = (0, _reshowBuild["default"])(myTheme)();
    if (! /*#__PURE__*/(0, _react.isValidElement)(builded)) {
      console.error("Not find a valid element for name: [" + themePath + "]", {
        "Theme List": themes,
        "Theme Path": thisThemePath,
        "Element before build:": myTheme,
        "Element builded:": builded
      });
      return null;
    } else {
      var fallbackEl = fallback || "div";
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.Suspense, {
        fallback: (0, _reshowBuild["default"])(fallbackEl)(),
        children: builded
      });
    }
  }, [themePath]);
};
var _default = AjaxPage;
exports["default"] = _default;
module.exports = exports.default;