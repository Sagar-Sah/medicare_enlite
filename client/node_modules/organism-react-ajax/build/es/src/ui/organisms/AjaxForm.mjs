import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["stop", "updateUrl", "component", "action", "afterSubmit", "beforeSubmit", "callback", "errorCallback", "path"];
import React, { forwardRef, useRef, useCallback, useEffect, useState } from "react";
import formSerialize from "form-serialize-js";
import build from "reshow-build";
import callfunc from "call-func";
import ajaxStore, { ajaxDispatch, getRawUrl } from "../../stores/ajaxStore.mjs";
import isRunAjax from "../../isRunAjax.mjs";
var getFormAction = function getFormAction(_ref) {
  var {
    action,
    path
  } = _ref;
  if (action) {
    return action;
  }
  if (path) {
    var baseUrl = ajaxStore.getState().get("baseUrl");
    if (baseUrl) {
      return getRawUrl({
        path,
        baseUrl
      });
    }
  }
  return null;
};
var AjaxForm = /*#__PURE__*/forwardRef(function (props, ref) {
  var {
      stop = false,
      updateUrl = false,
      component = "form",
      action: propsAction,
      afterSubmit,
      beforeSubmit,
      callback,
      errorCallback,
      path
    } = props,
    rest = _objectWithoutProperties(props, _excluded);
  var [action, setAction] = useState(propsAction);
  useEffect(function () {
    setAction(getFormAction({
      action: propsAction,
      path
    }));
  }, [propsAction, path]);
  var handleSubmit = useCallback(function (e) {
    var _callfunc;
    if (stop) {
      return;
    }
    e.preventDefault();
    var otherParams = (_callfunc = callfunc(beforeSubmit, [e])) !== null && _callfunc !== void 0 ? _callfunc : {};
    if (false === otherParams) {
      // pause by beforeSubmit
      return false;
    }
    var formDom = e.target;
    var formAction = formDom.action || getFormAction({
      action,
      path
    });
    var formParams = formSerialize(formDom);
    if (formAction) {
      formDom.action = formAction;
    }
    var type;
    switch (formDom.method.toLowerCase()) {
      case "post":
        type = "ajaxPost";
        break;
      /**
       * Default method
       * https://www.w3schools.com/tags/att_form_method.asp
       */
      default:
      case "get":
        type = "ajaxGet";
        otherParams.disableAjax = !isRunAjax(props);
        otherParams.updateUrl = updateUrl;
        break;
    }
    ajaxDispatch(type, _objectSpread({
      url: formAction,
      query: formParams,
      callback,
      errorCallback
    }, otherParams));
    callfunc(afterSubmit, [e]);
  }, [path, action, stop, callback, errorCallback, updateUrl, beforeSubmit, afterSubmit]);
  return build(component)(_objectSpread({
    ref,
    action,
    "data-path": path,
    onSubmit: handleSubmit
  }, rest));
});
AjaxForm.displayName = "AjaxForm";
export default AjaxForm;