"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutPropertiesLoose"));

var _react = require("react");

var _reactAtomicMolecule = require("react-atomic-molecule");

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _callFunc = _interopRequireDefault(require("call-func"));

var _reshowHooks = require("reshow-hooks");

var _reshowConstant = require("reshow-constant");

var _CSSTransition = _interopRequireDefault(require("../organisms/CSSTransition.js"));

var _const = require("../../const.js");

var _initAniStyle = require("../../initAniStyle.js");

var _excluded = ["copyEnterToAppear", "isLoad", "statusKey", "component", "lazy", "children", "className", "onExited"];
var injects = {};

var getAniProps = function getAniProps(props, copyEnterToAppear) {
  var statusKey = props.statusKey,
      timeout = props.timeout,
      delay = props.delay,
      classNames = props.classNames,
      enter = props.enter,
      exit = props.exit,
      addEndListener = props.addEndListener,
      onEnter = props.onEnter,
      onEntering = props.onEntering,
      onEntered = props.onEntered,
      onExit = props.onExit,
      onExiting = props.onExiting;
  var appear = props.appear;

  if (copyEnterToAppear && classNames && classNames.enter) {
    classNames.appear = classNames.enter;
    delay.appear = delay.enter;
    timeout.appear = timeout.enter;
    appear = true;
  }
  /* not assign onExited, because call at handleExited */


  var aniProps = {
    statusKey: statusKey,
    timeout: timeout,
    delay: delay,
    classNames: classNames,
    appear: appear,
    enter: enter,
    exit: exit,
    addEndListener: addEndListener,
    onEnter: onEnter,
    onEntering: onEntering,
    onEntered: onEntered,
    onExit: onExit,
    onExiting: onExiting,
    "in": true
  };
  return aniProps;
};

var buildCSSTransition = (0, _reactAtomicMolecule.build)(_CSSTransition["default"]);

var AnimateGroup = function AnimateGroup(props) {
  var _props$copyEnterToApp = props.copyEnterToAppear,
      copyEnterToAppear = _props$copyEnterToApp === void 0 ? true : _props$copyEnterToApp,
      _props$isLoad = props.isLoad,
      isLoad = _props$isLoad === void 0 ? true : _props$isLoad,
      _props$statusKey = props.statusKey,
      statusKey = _props$statusKey === void 0 ? _const.dataStatusKey : _props$statusKey,
      _props$component = props.component,
      component = _props$component === void 0 ? _reactAtomicMolecule.SemanticUI : _props$component,
      _props$lazy = props.lazy,
      lazy = _props$lazy === void 0 ? 150 : _props$lazy,
      propsChildren = props.children,
      className = props.className,
      onExited = props.onExited,
      restProps = (0, _objectWithoutPropertiesLoose2["default"])(props, _excluded);

  var _useState = (0, _react.useState)(),
      children = _useState[0],
      setChildren = _useState[1];

  var _mount = (0, _reshowHooks.useMounted)();

  injects[statusKey] = (0, _reactAtomicMolecule.useLazyInject)((0, _initAniStyle.InjectStyles)({
    statusKey: statusKey
  }), injects[statusKey]);
  var aniProps = getAniProps(restProps, copyEnterToAppear);
  (0, _reshowConstant.KEYS)(aniProps).forEach(function (key) {
    return delete restProps[key];
  });
  (0, _react.useEffect)(function () {
    var _exitTimeout;

    var _enterTimeout;

    if (isLoad) {
      var handleExited = function handleExited(child) {
        return function (node) {
          (0, _callFunc["default"])(onExited, [node]);
          _exitTimeout = setTimeout(function () {
            if (false !== _mount()) {
              setChildren(function (children) {
                delete children[child.key];
                return (0, _objectSpread2["default"])({}, children);
              });
            }
          });
        };
      };

      var prevChildMapping = children || {};
      var nextChildMapping = (0, _reactAtomicMolecule.getChildMapping)(propsChildren, function (child, key) {
        return buildCSSTransition((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, aniProps), {}, {
          key: (0, _getObjectValue["default"])(child, ["props", "name"], key),
          onExited: handleExited(child)
        }), child);
      });
      var allChildMapping = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, prevChildMapping), nextChildMapping);
      (0, _reshowConstant.KEYS)(allChildMapping).forEach(function (key) {
        var child = allChildMapping[key];
        var hasPrev = (key in prevChildMapping);
        var hasNext = (key in nextChildMapping);
        var prevChild = prevChildMapping[key];
        var isLeaving = !(0, _getObjectValue["default"])(prevChild, ["props", "in"]);

        if (!hasNext && hasPrev) {
          // Will Exit
          if (!isLeaving) {
            allChildMapping[key] = (0, _reactAtomicMolecule.build)(child)({
              "in": false
            });
          }
        }
      });

      if (!children) {
        _enterTimeout = setTimeout(function () {
          return setChildren(allChildMapping);
        }, lazy);
      } else {
        setChildren(allChildMapping);
      }
    }

    return function () {
      clearTimeout(_exitTimeout);
      clearTimeout(_enterTimeout);
    };
  }, [props.children, isLoad]);
  return (0, _react.useMemo)(function () {
    if (!isLoad) {
      return (0, _reactAtomicMolecule.build)(component)(restProps);
    }
    /**
     * Should not setup style={overflow:hidden} here,
     *
     * for reduce animation effect.
     * you could assign it by yourself.
     */


    restProps.className = (0, _reactAtomicMolecule.mixClass)(className, _const.animateGroupClass);
    return (0, _reactAtomicMolecule.build)(component)(restProps, (0, _reshowConstant.KEYS)(children || {}).map(function (key) {
      return children[key];
    }));
  }, [children, isLoad]);
};

var _default = AnimateGroup;
exports["default"] = _default;
module.exports = exports.default;