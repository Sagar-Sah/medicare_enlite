"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutPropertiesLoose"));

var _classLib = require("class-lib");

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _callFunc = _interopRequireDefault(require("call-func"));

var _reshowConstant = require("reshow-constant");

var _Transition = _interopRequireDefault(require("../organisms/Transition.js"));

var _const = require("../../const.js");

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["stepKeys", "actionKeys", "classNames", "delay", "beforeEnter", "afterEnter", "onEnter", "onEntering", "onEntered", "beforeExit", "afterExit", "onExit", "onExiting", "onExited"];

var _this = void 0;

var getIndex = function getIndex(isAppear, isExit, _ref) {
  var exit = _ref.exit,
      appear = _ref.appear,
      enter = _ref.enter;

  if (isExit) {
    return exit;
  } else {
    return isAppear ? appear : enter;
  }
};

var getAction = function getAction(isDone, ing, _ref2) {
  var start = _ref2.start,
      active = _ref2.active,
      done = _ref2.done;

  if (ing) {
    return active;
  } else {
    return isDone ? done : start;
  }
};

var getValue = function getValue(arr, index, defaultValue) {
  return (0, _getObjectValue["default"])(arr, [index], defaultValue);
};

var getClassName = function getClassName(arr, index, action) {
  var classes = getValue(arr, index);
  return (0, _getObjectValue["default"])(classes, [action], classes);
};

var handleStart = function handleStart(_ref3, handler, isExit, ing, node, isAppear) {
  var classNames = _ref3.classNames,
      delay = _ref3.delay,
      stepKeys = _ref3.stepKeys,
      actionKeys = _ref3.actionKeys;
  var index = getIndex(isAppear, isExit, stepKeys);
  var action = getAction(false, ing, actionKeys);
  var thisDelay = getValue(delay, index, 0);
  setTimeout(function () {
    if (node && ing) {
      var thisClass = getClassName(classNames, index, action);

      if (thisClass) {
        node.className = (0, _classLib.mixClass)(node.className, thisClass, _const.aniTransitioning);
      }

      (0, _callFunc["default"])(handler, [node, isAppear]);
    }
  }, thisDelay);
};

var handleFinish = function handleFinish(_ref4, handler, isExit, node, isAppear) {
  var classNames = _ref4.classNames,
      stepKeys = _ref4.stepKeys,
      actionKeys = _ref4.actionKeys;

  if (node) {
    var index = getIndex(isAppear, isExit, stepKeys);
    var action = getAction(true, false, actionKeys);
    var thisClass = getClassName(classNames, index, action);

    if (thisClass) {
      node.className = (0, _classLib.mixClass)(node.className, thisClass);
    }
  }

  (0, _callFunc["default"])(handler, [node, isAppear]);
};

var handleReset = function handleReset(_ref5, handler, isExit, isDone, node, isAppear) {
  var classNames = _ref5.classNames,
      stepKeys = _ref5.stepKeys,
      actionKeys = _ref5.actionKeys;

  if (node) {
    var index = getIndex(isAppear, isExit, stepKeys);
    (0, _reshowConstant.KEYS)(actionKeys).forEach(function (key) {
      var action = actionKeys[key];
      var thisClass = getClassName(classNames, index, action);

      if (thisClass) {
        node.className = (0, _classLib.removeClass)(node.className, [thisClass, _const.aniTransitioning].join(" "));
      }
    });
  }

  (0, _callFunc["default"])(handler, [node, isAppear, isDone]);
};

var CSSTransition = function CSSTransition(_ref6) {
  var _ref6$stepKeys = _ref6.stepKeys,
      stepKeys = _ref6$stepKeys === void 0 ? {
    appear: "appear",
    enter: "enter",
    exit: "exit"
  } : _ref6$stepKeys,
      _ref6$actionKeys = _ref6.actionKeys,
      actionKeys = _ref6$actionKeys === void 0 ? {
    start: "",
    active: "active",
    done: "done"
  } : _ref6$actionKeys,
      classNames = _ref6.classNames,
      delay = _ref6.delay,
      beforeEnter = _ref6.beforeEnter,
      afterEnter = _ref6.afterEnter,
      onEnter = _ref6.onEnter,
      onEntering = _ref6.onEntering,
      onEntered = _ref6.onEntered,
      beforeExit = _ref6.beforeExit,
      afterExit = _ref6.afterExit,
      onExit = _ref6.onExit,
      onExiting = _ref6.onExiting,
      onExited = _ref6.onExited,
      props = (0, _objectWithoutPropertiesLoose2["default"])(_ref6, _excluded);
  var options = {
    classNames: classNames,
    delay: delay,
    stepKeys: stepKeys,
    actionKeys: actionKeys
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, props), {}, {
    beforeEnter: handleReset.bind(_this, options, beforeEnter, false, false),
    afterEnter: handleReset.bind(_this, options, afterEnter, false, true),
    onEnter: handleStart.bind(_this, options, onEnter, false, false),
    onEntering: handleStart.bind(_this, options, onEntering, false, true),
    onEntered: handleFinish.bind(_this, options, onEntered, false),
    beforeExit: handleReset.bind(_this, options, beforeExit, true, false),
    afterExit: handleReset.bind(_this, options, afterExit, true, true),
    onExit: handleStart.bind(_this, options, onExit, true, false),
    onExiting: handleStart.bind(_this, options, onExiting, true, true),
    onExited: handleFinish.bind(_this, options, onExited, true)
  }));
};

var _default = CSSTransition;
exports["default"] = _default;
module.exports = exports.default;