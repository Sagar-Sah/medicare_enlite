"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutPropertiesLoose"));

var _react = require("react");

var _reactAtomicMolecule = require("react-atomic-molecule");

var _CSSTransition = _interopRequireDefault(require("../organisms/CSSTransition.js"));

var _aniUtil = require("../../aniUtil.js");

var _const = require("../../const.js");

var _initAniStyle = require("../../initAniStyle.js");

var _excluded = ["statusKey", "onEnd", "animation", "children"];
var injects = {};
/**
 * @typedef {object} ChangeAnimationProps
 * @property {string} [statusKey]
 * @property {function} [onEnd]
 * @property {string} [animation]
 * @property {React.ReactElement|string} children
 * @property {Object} [otherProps]
 */

/**
 * @param {ChangeAnimationProps} param
 * @returns {React.ReactElement}
 */

var ChangeAnimation = function ChangeAnimation(_ref) {
  var _ref$statusKey = _ref.statusKey,
      statusKey = _ref$statusKey === void 0 ? _const.dataStatusKey : _ref$statusKey,
      _ref$onEnd = _ref.onEnd,
      onEnd = _ref$onEnd === void 0 ? null : _ref$onEnd,
      _ref$animation = _ref.animation,
      animation = _ref$animation === void 0 ? null : _ref$animation,
      children = _ref.children,
      otherProps = (0, _objectWithoutPropertiesLoose2["default"])(_ref, _excluded);
  var defaultAniProps = {
    "in": false
  };

  var _useState = (0, _react.useState)(defaultAniProps),
      aniProps = _useState[0],
      setAniProps = _useState[1];

  var lastAnimation = (0, _react.useRef)({
    init: false,
    animation: null
  });
  injects[statusKey] = (0, _reactAtomicMolecule.useLazyInject)((0, _initAniStyle.InjectStyles)({
    statusKey: statusKey
  }), injects[statusKey]);
  (0, _react.useEffect)(function () {
    if ("" === animation) {
      lastAnimation.current.animation = null;
      setAniProps(defaultAniProps);
    } else {
      var aniData = (0, _aniUtil.parseAniValue)(animation);
      (0, _aniUtil.initAni)(aniData.key, aniData.name, aniData.timeout, function () {
        var thisAniProps = {
          "in": true,
          appear: true,
          enter: true,
          exit: false,
          classNames: {
            appear: aniData.className,
            enter: aniData.className
          },
          timeout: {
            appear: aniData.timeout,
            enter: aniData.timeout
          },
          delay: {
            appear: aniData.delay,
            enter: aniData.delay
          }
        };

        if (lastAnimation.current.animation !== animation) {
          setTimeout(function () {
            lastAnimation.current = {
              init: true,
              animation: animation
            };
            setAniProps(thisAniProps);
          });
        }
      });
    }
  }, [animation]);

  if (!lastAnimation.current.init) {
    return null;
  } else {
    return (0, _reactAtomicMolecule.build)(_CSSTransition["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({
      addEndListener: onEnd
    }, aniProps), otherProps), children);
  }
};

var _default = ChangeAnimation;
exports["default"] = _default;
module.exports = exports.default;