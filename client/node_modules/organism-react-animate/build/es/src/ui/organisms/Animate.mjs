import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["appear", "enter", "leave"];
import { useState, useRef, useEffect } from "react";
import { build } from "react-atomic-molecule";
import { useMounted } from "reshow-hooks";
import AnimateGroup from "../organisms/AnimateGroup.mjs";
import { initAni, parseAniValue } from "../../aniUtil.mjs";
import { jsx as _jsx } from "react/jsx-runtime";

var Animate = function Animate(props) {
  var {
    appear,
    enter,
    leave
  } = props,
      restProps = _objectWithoutProperties(props, _excluded);

  var [isLoad, setIsLoad] = useState(false);
  var [aniConf, setAniConf] = useState({});
  var lastRun = useRef([]);

  var _mount = useMounted();

  useEffect(function () {
    var that = {};
    var data;

    var isDone = function isDone(key) {
      return function () {
        lastRun.current = lastRun.current.filter(function (val) {
          return val !== key;
        });

        if (lastRun.current.length) {
          return;
        } else {
          setTimeout(function () {
            return _mount() && setIsLoad(true);
          });
        }
      };
    };

    if (appear) {
      data = parseAniValue(appear);
      that.appear = data.name;
      that.appearKey = data.key;
      that.appearTimeout = data.timeout;
      that.appearDelay = data.delay;
      that.appearClass = data.className;
      lastRun.current.push(appear);
      initAni(that.appearKey, that.appear, that.appearTimeout, isDone(appear));
    }

    if (enter) {
      data = parseAniValue(enter);
      that.enter = data.name;
      that.enterKey = data.key;
      that.enterTimeout = data.timeout;
      that.enterDelay = data.delay;
      that.enterClass = data.className;
      lastRun.current.push(enter);
      initAni(that.enterKey, that.enter, that.enterTimeout, isDone(enter));
    }

    if (leave) {
      data = parseAniValue(leave);
      that.leave = data.name;
      that.leaveKey = data.key;
      that.leaveTimeout = data.timeout;
      that.leaveDelay = data.delay;
      that.leaveClass = data.className;
      lastRun.current.push(leave);
      initAni(that.leaveKey, that.leave, that.leaveTimeout, isDone(leave));
    }

    if (!appear && !enter && !leave) {
      setIsLoad(true);
    }

    setAniConf(that);
  }, [appear, enter, leave]);
  restProps.isLoad = isLoad;
  return isLoad ? /*#__PURE__*/_jsx(AnimateGroup, _objectSpread({
    timeout: {
      appear: aniConf.appearTimeout,
      enter: aniConf.enterTimeout,
      exit: aniConf.leaveTimeout
    },
    delay: {
      appear: aniConf.appearDelay,
      enter: aniConf.enterDelay,
      exit: aniConf.leaveDelay
    },
    classNames: {
      appear: aniConf.appearClass,
      enter: aniConf.enterClass,
      exit: aniConf.leaveClass
    },
    appear: !!appear,
    enter: !!enter,
    exit: !!leave
  }, restProps)) : build(AnimateGroup)(restProps);
};

export default Animate;