import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["stepKeys", "actionKeys", "classNames", "delay", "beforeEnter", "afterEnter", "onEnter", "onEntering", "onEntered", "beforeExit", "afterExit", "onExit", "onExiting", "onExited"];

var _this = this;

import { mixClass, removeClass } from "class-lib";
import get from "get-object-value";
import callfunc from "call-func";
import { KEYS } from "reshow-constant";
import Transition from "../organisms/Transition.mjs";
import { aniTransitioning } from "../../const.mjs";
import { jsx as _jsx } from "react/jsx-runtime";

var getIndex = function getIndex(isAppear, isExit, _ref) {
  var {
    exit,
    appear,
    enter
  } = _ref;

  if (isExit) {
    return exit;
  } else {
    return isAppear ? appear : enter;
  }
};

var getAction = function getAction(isDone, ing, _ref2) {
  var {
    start,
    active,
    done
  } = _ref2;

  if (ing) {
    return active;
  } else {
    return isDone ? done : start;
  }
};

var getValue = function getValue(arr, index, defaultValue) {
  return get(arr, [index], defaultValue);
};

var getClassName = function getClassName(arr, index, action) {
  var classes = getValue(arr, index);
  return get(classes, [action], classes);
};

var handleStart = function handleStart(_ref3, handler, isExit, ing, node, isAppear) {
  var {
    classNames,
    delay,
    stepKeys,
    actionKeys
  } = _ref3;
  var index = getIndex(isAppear, isExit, stepKeys);
  var action = getAction(false, ing, actionKeys);
  var thisDelay = getValue(delay, index, 0);
  setTimeout(function () {
    if (node && ing) {
      var thisClass = getClassName(classNames, index, action);

      if (thisClass) {
        node.className = mixClass(node.className, thisClass, aniTransitioning);
      }

      callfunc(handler, [node, isAppear]);
    }
  }, thisDelay);
};

var handleFinish = function handleFinish(_ref4, handler, isExit, node, isAppear) {
  var {
    classNames,
    stepKeys,
    actionKeys
  } = _ref4;

  if (node) {
    var index = getIndex(isAppear, isExit, stepKeys);
    var action = getAction(true, false, actionKeys);
    var thisClass = getClassName(classNames, index, action);

    if (thisClass) {
      node.className = mixClass(node.className, thisClass);
    }
  }

  callfunc(handler, [node, isAppear]);
};

var handleReset = function handleReset(_ref5, handler, isExit, isDone, node, isAppear) {
  var {
    classNames,
    stepKeys,
    actionKeys
  } = _ref5;

  if (node) {
    var index = getIndex(isAppear, isExit, stepKeys);
    KEYS(actionKeys).forEach(function (key) {
      var action = actionKeys[key];
      var thisClass = getClassName(classNames, index, action);

      if (thisClass) {
        node.className = removeClass(node.className, [thisClass, aniTransitioning].join(" "));
      }
    });
  }

  callfunc(handler, [node, isAppear, isDone]);
};

var CSSTransition = function CSSTransition(_ref6) {
  var {
    stepKeys = {
      appear: "appear",
      enter: "enter",
      exit: "exit"
    },
    actionKeys = {
      start: "",
      active: "active",
      done: "done"
    },
    classNames,
    delay,
    beforeEnter,
    afterEnter,
    onEnter,
    onEntering,
    onEntered,
    beforeExit,
    afterExit,
    onExit,
    onExiting,
    onExited
  } = _ref6,
      props = _objectWithoutProperties(_ref6, _excluded);

  var options = {
    classNames,
    delay,
    stepKeys,
    actionKeys
  };
  return /*#__PURE__*/_jsx(Transition, _objectSpread(_objectSpread({}, props), {}, {
    beforeEnter: handleReset.bind(_this, options, beforeEnter, false, false),
    afterEnter: handleReset.bind(_this, options, afterEnter, false, true),
    onEnter: handleStart.bind(_this, options, onEnter, false, false),
    onEntering: handleStart.bind(_this, options, onEntering, false, true),
    onEntered: handleFinish.bind(_this, options, onEntered, false),
    beforeExit: handleReset.bind(_this, options, beforeExit, true, false),
    afterExit: handleReset.bind(_this, options, afterExit, true, true),
    onExit: handleStart.bind(_this, options, onExit, true, false),
    onExiting: handleStart.bind(_this, options, onExiting, true, true),
    onExited: handleFinish.bind(_this, options, onExited, true)
  }));
};

export default CSSTransition;