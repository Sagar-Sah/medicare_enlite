import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["keyEqualer", "children", "onExited", "onEntered"];
import { useRef, useState, useMemo } from "react";
import callfunc from "call-func";
import { useMounted, usePrevious } from "reshow-hooks";
import Animate from "../organisms/Animate.mjs";
import { jsx as _jsx } from "react/jsx-runtime";

var Change = function Change(props) {
  var {
    keyEqualer = function (item1, item2) {
      return (item1 === null || item1 === void 0 ? void 0 : item1.key) === (item2 === null || item2 === void 0 ? void 0 : item2.key);
    },
    children: propsChildren,
    onExited,
    onEntered
  } = props,
      otherProps = _objectWithoutProperties(props, _excluded);

  var [children, setChildren] = useState(propsChildren);

  var _mount = useMounted();

  var scheduleChildren = useRef();
  var isRunning = useRef(false);
  var nextCall = useRef(false);
  var prevPropsChildren = usePrevious(propsChildren);

  var handleExited = function handleExited(node, isAppear) {
    if (_mount() && scheduleChildren.current) {
      setChildren(scheduleChildren.current);
      callfunc(onExited, [node, isAppear]);
    }
  };

  var handleEntered = function handleEntered(node, isAppear) {
    isRunning.current = false;

    if (_mount()) {
      callfunc(nextCall.current);
      callfunc(onEntered, [node, isAppear]);
    }
  };

  var setNext = function setNext(nextChild) {
    var reset = function reset() {
      nextCall.current = function () {
        return setNext(nextChild);
      };
    };

    if (scheduleChildren.current !== nextChild && !keyEqualer(children, nextChild)) {
      if (nextChild && !isRunning.current) {
        scheduleChildren.current = nextChild;
        nextCall.current = false;
        children ? setChildren(null) : setChildren(nextChild);
        isRunning.current = true;
      } else {
        reset();
      }
    } else {
      reset();
    }
  };

  if (prevPropsChildren !== propsChildren) {
    setNext(propsChildren);
  }

  return useMemo(function () {
    return /*#__PURE__*/_jsx(Animate, _objectSpread(_objectSpread({}, otherProps), {}, {
      onExited: handleExited,
      onEntered: handleEntered,
      children: children
    }));
  }, [children]);
};

export default Change;