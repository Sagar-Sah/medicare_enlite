import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";

var _Animate, _div;

import { useState } from "react";
import { expect } from "chai";
import { render, act, waitFor, getRoleHtml, hideConsoleError, cleanIt } from "reshow-unit";
import Animate from "../Animate.mjs";
import AnimateGroup from "../AnimateGroup.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("AnimateGroup Test", function () {
  it("Animate Test", function () {
    var vDom = _Animate || (_Animate = /*#__PURE__*/_jsx(Animate, {
      children: /*#__PURE__*/_jsx("div", {
        children: "abc"
      })
    }));

    var wrap = render(vDom);
    expect(wrap.html()).to.have.string("animate-group");
  });
  it("Test handleExit", /*#__PURE__*/_asyncToGenerator(function* () {
    var uFake;

    var FakeComp = function FakeComp(props) {
      var [state, setState] = useState(function () {
        return _div || (_div = /*#__PURE__*/_jsx("div", {
          role: "child",
          children: "abc"
        }));
      });
      uFake = setState;
      return /*#__PURE__*/_jsx(AnimateGroup, {
        role: "ani",
        lazy: 1,
        timeout: {
          appear: 1
        },
        children: state
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(FakeComp, {}));
    yield waitFor(function () {
      act(function () {
        return expect(wrap.html()).to.have.string("role=\"child\"");
      });
    });
    yield act(function () {
      return uFake();
    }, 10);
    yield waitFor(function () {
      act(function () {
        return expect(wrap.html()).not.have.string("role=\"child\"");
      });
    });
    wrap.unmount();
  }));
});