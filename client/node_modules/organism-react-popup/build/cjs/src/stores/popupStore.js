"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.popupDispatch = exports["default"] = exports.SHOW_NEXT = exports.SHOW_KEY = exports.NODE_KEY = void 0;

var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));

var _reshowFlux = require("reshow-flux");

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _setObjectValue = _interopRequireDefault(require("set-object-value"));

var _callFunc = _interopRequireDefault(require("call-func"));

var _reshowConstant = require("reshow-constant");

var groups = {};
var SHOW_NEXT = "show_next";
exports.SHOW_NEXT = SHOW_NEXT;
var SHOW_KEY = "shows";
exports.SHOW_KEY = SHOW_KEY;
var NODE_KEY = "nodes";
exports.NODE_KEY = NODE_KEY;

var getName = function getName(node, defaultVal) {
  if (defaultVal === void 0) {
    defaultVal = "default";
  }

  var name = (0, _getObjectValue["default"])(node, ["props", "name"], function () {
    return (0, _getObjectValue["default"])(node, ["type", "displayName"], function () {
      return (0, _getObjectValue["default"])(node, ["type", "name"], defaultVal);
    });
  });
  return name;
};

var handlePopup = /*#__PURE__*/function () {
  function handlePopup() {
    (0, _classCallCheck2["default"])(this, handlePopup);
  }

  (0, _createClass2["default"])(handlePopup, [{
    key: "updateDom",
    value: function updateDom(state, action) {
      var popupNode = (0, _getObjectValue["default"])(action, ["params", "popup"]);
      var key = getName(popupNode);

      if (key !== getName(popupNode, null)) {
        console.warn({
          Warn: "Popup Key not consistence, you use a default key. you should assign name to each specific popup element.",
          PopUp: popupNode,
          ActualKey: key
        });
      }

      var shows = state.get(SHOW_KEY).set(key, true);
      var nodes = state.get(NODE_KEY).set(key, popupNode);
      var nodeGroups = (0, _getObjectValue["default"])(popupNode, ["props", "group"]);

      if (nodeGroups) {
        if (!(0, _reshowConstant.IS_ARRAY)(nodeGroups)) {
          nodeGroups = [nodeGroups];
        }

        nodeGroups.forEach(function (nodegroup) {
          return (0, _setObjectValue["default"])(groups, [nodegroup, key], true);
        });
      }

      return state.set(SHOW_KEY, shows).set(NODE_KEY, nodes).set(SHOW_NEXT, key);
    }
  }, {
    key: "getKey",
    value: function getKey(action) {
      var popup = (0, _getObjectValue["default"])(action, ["params", "popup"], "default");
      var key;

      if (_reshowConstant.OBJECT === typeof popup) {
        key = getName(popup, popup);
      } else {
        key = popup;
      }

      return key;
    }
  }, {
    key: "closeAll",
    value: function closeAll(state, action) {
      return state.set(SHOW_KEY, (0, _reshowFlux.Map)());
    }
  }, {
    key: "closeOne",
    value: function closeOne(state, action) {
      var key = this.getKey(action);
      var shows = state.get(SHOW_KEY)["delete"](key);
      return state.set(SHOW_KEY, shows);
    }
  }, {
    key: "closeGroup",
    value: function closeGroup(state, action) {
      var groupKey = (0, _getObjectValue["default"])(action, ["params", "group"]);
      var group = (0, _getObjectValue["default"])(groups, [groupKey]);
      var shows = state.get(SHOW_KEY);

      if (group) {
        (0, _reshowConstant.KEYS)(group).forEach(function (key) {
          shows = shows["delete"](key);
        });
      }

      return state.set(SHOW_KEY, shows);
    }
  }, {
    key: "cleanAll",
    value: function cleanAll(state, action) {
      return state.set(SHOW_KEY, (0, _reshowFlux.Map)()).set(NODE_KEY, (0, _reshowFlux.Map)());
    }
  }, {
    key: "cleanOne",
    value: function cleanOne(state, action) {
      var key = this.getKey(action);
      var nodes = state.get(NODE_KEY)["delete"](key);
      var shows = state.get(SHOW_KEY)["delete"](key);
      return state.set(NODE_KEY, nodes).set(SHOW_KEY, shows);
    }
  }, {
    key: "cleanGroup",
    value: function cleanGroup(state, action) {
      var groupKey = (0, _getObjectValue["default"])(action, ["params", "group"]);
      var group = (0, _getObjectValue["default"])(groups, [groupKey]);

      if (group) {
        var nodes = state.get(NODE_KEY);
        var shows = state.get(SHOW_KEY);
        (0, _reshowConstant.KEYS)(group).forEach(function (key) {
          nodes = nodes["delete"](key);
          shows = shows["delete"](key);
        });
        return state.set(NODE_KEY, nodes).set(SHOW_KEY, shows);
      } else {
        return state;
      }
    }
  }]);
  return handlePopup;
}();

var oPopup = new handlePopup();

var _ImmutableStore = (0, _reshowFlux.ImmutableStore)(function (state, action) {
  switch (action.type) {
    case "dom/update":
      return oPopup.updateDom(state, action);

    case "dom/closeAll":
      return oPopup.closeAll(state, action);

    case "dom/cleanAll":
      return oPopup.cleanAll(state, action);

    case "dom/closeOne":
      return oPopup.closeOne(state, action);

    case "dom/cleanOne":
      return oPopup.cleanOne(state, action);

    case "dom/closeGroup":
      return oPopup.closeGroup(state, action);

    case "dom/cleanGroup":
      return oPopup.cleanGroup(state, action);

    case "config/set":
      return (0, _reshowFlux.mergeMap)(state, action.params);

    default:
      return state;
  }
}, (0, _reshowFlux.Map)({
  shows: (0, _reshowFlux.Map)(),
  nodes: (0, _reshowFlux.Map)()
})),
    store = _ImmutableStore[0],
    popupDispatch = _ImmutableStore[1];

exports.popupDispatch = popupDispatch;
var _default = store;
exports["default"] = _default;