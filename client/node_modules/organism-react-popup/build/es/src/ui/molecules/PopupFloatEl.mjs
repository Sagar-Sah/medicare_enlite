import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import React from "react";
import { mixClass, SemanticUI } from "react-atomic-molecule";
import getWindowOffset, { alignUI, getPositionString } from "get-window-offset";
import { toInt } from "to-percent-js";
import PopupOverlay from "../molecules/PopupOverlay.mjs";

var PopupFloatEl = /*#__PURE__*/function (_PopupOverlay) {
  _inherits(PopupFloatEl, _PopupOverlay);

  var _super = _createSuper(PopupFloatEl);

  function PopupFloatEl(props) {
    var _this;

    _classCallCheck(this, PopupFloatEl);

    _this = _super.call(this, props); // Need exted state form parent class (PopupOverlay)

    _defineProperty(_assertThisInitialized(_this), "_mount", true);

    _defineProperty(_assertThisInitialized(_this), "handleResize", function () {
      _this.handleMoveTo();
    });

    _defineProperty(_assertThisInitialized(_this), "handleMoveTo", function () {
      if (!_this.floatEl || !_this._mount) {
        return;
      }

      var {
        targetEl
      } = _this.props;

      if (!document.body.contains(targetEl)) {
        return;
      }

      var pos = _this.calPos();

      var diffTop = Math.abs(pos.top - toInt(_this.floatTop));
      var diffLeft = Math.abs(pos.left - toInt(_this.floatLeft));

      if (1 >= diffTop && 1 >= diffLeft && pos.width === _this.floatWidth && pos.height === _this.floatHeight && pos.className === _this.floatClassName) {
        return;
      }

      _this.floatTop = pos.top;
      _this.floatLeft = pos.left;
      _this.floatWidth = pos.width;
      _this.floatHeight = pos.height;
      _this.floatClassName = pos.className;

      _this.setState(pos);
    });

    _defineProperty(_assertThisInitialized(_this), "calPos", function () {
      if (!_this._mount) {
        return;
      }

      var faultPos = {
        top: -9999,
        left: -9999
      };
      var {
        targetEl,
        alignParams
      } = _this.props;

      if (!_this.floatEl || !targetEl) {
        return faultPos;
      }

      var winInfo = getWindowOffset(targetEl);

      if (!winInfo) {
        return faultPos;
      }

      var myAlignParams = _objectSpread({
        exclude: ["lt", "lb", "rt", "rb"]
      }, alignParams);

      var info = alignUI(targetEl, _this.floatEl, myAlignParams, winInfo);

      if (!info) {
        console.error("can not get alignUI info");
        return faultPos;
      }

      var {
        move,
        loc
      } = info;
      var result = {
        top: move[1],
        left: move[0],
        className: getPositionString(loc)
      };
      return result;
    });

    _defineProperty(_assertThisInitialized(_this), "setFloatEl", function (el) {
      if (el) {
        _this.floatEl = el;
      }

      _this.handleMoveTo();

      var {
        retryAt
      } = _this.props;

      if (retryAt) {
        setTimeout(function () {
          return _this.handleMoveTo();
        }, retryAt);
      }
    });

    _this.state = _objectSpread(_objectSpread({}, _this.state), {}, {
      refCb: _this.setFloatEl
    });
    return _this;
  }

  _createClass(PopupFloatEl, [{
    key: "getFloatEl",
    value:
    /**
     * For monitor window resize
     */

    /**
     * For extend class
     */
    function getFloatEl() {
      return this.floatEl;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener("resize", this.handleResize);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      this.handleMoveTo();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._mount = false;
      window.removeEventListener("resize", this.handleResize);
    }
  }]);

  return PopupFloatEl;
}(PopupOverlay);

_defineProperty(PopupFloatEl, "defaultProps", {
  style: {
    position: "absolute",
    right: "auto"
  },
  name: "float",
  className: "popup",
  retryAt: 500
});

export default PopupFloatEl;