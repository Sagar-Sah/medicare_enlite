import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
var _excluded = ["basic", "disableClose", "disableClickClose", "disableEscClose", "appear", "enter", "leave", "style", "styles", "contentStyle", "modal", "modalClassName", "modalStyle", "mask", "backgroundScroll", "backgroundOpacity", "toPool", "closeEl", "onClose", "className", "contentClassName", "name", "id"];
import { build, reactStyle, lazyInject, Dimmer, SemanticUI } from "react-atomic-molecule";
import Animate from "organism-react-animate";
import getScrollInfo from "get-scroll-info";
import getOffset from "getoffset";
import get from "get-object-value";
import arrayMerge from "array.merge";
import callfunc, { getEventKey } from "call-func";
import { removeClass, hasClass, mixClass } from "class-lib";
import { win, doc } from "win-doc";
import { STRING } from "reshow-constant";
import PopupOverlay from "../molecules/PopupOverlay.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var observerConfig = {
  attributes: true,
  childList: true,
  subtree: true
};
/**
 * 1. if you need trace show: true
 * it extend from PopupOverlay
 *
 * 2. if you don't need append <Content /> component
 * you could pass center or content to equla false
 */

var PopupModal = /*#__PURE__*/function (_PopupOverlay) {
  _inherits(PopupModal, _PopupOverlay);

  var _super = _createSuper(PopupModal);

  function PopupModal() {
    var _this;

    _classCallCheck(this, PopupModal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "_timer", null);

    _defineProperty(_assertThisInitialized(_this), "_mount", false);

    _defineProperty(_assertThisInitialized(_this), "_locked", false);

    _defineProperty(_assertThisInitialized(_this), "_observer", null);

    _defineProperty(_assertThisInitialized(_this), "handleModalRefCb", function (el) {
      return _this.el = el;
    });

    _defineProperty(_assertThisInitialized(_this), "handleClose", function () {
      return _this.close() && _this.unlockScreen();
    });

    _defineProperty(_assertThisInitialized(_this), "handleContainerClick", function (e) {
      var t = e.target;
      var cur = e.currentTarget;

      if (cur.isSameNode(t)) {
        _this.handleClose();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyUp", function (e) {
      switch (getEventKey(e)) {
        case 27:
        case "Escape":
          var {
            disableClose,
            disableEscClose
          } = _this.props;
          !disableClose && !disableEscClose && _this.handleClose();
          break;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "reCalculate", function () {
      _this.setBodyCssClass();

      _this._timer = setTimeout(function () {
        if (_this.el) {
          var domInfo = getOffset(_this.el);

          if (domInfo) {
            var domHalfHeight = domInfo.h / 2;
            var marginTop = Math.floor(1 - domHalfHeight);
            var {
              scrollNodeHeight
            } = getScrollInfo();
            var maskStyle = {};

            if (domInfo.h * 3 > scrollNodeHeight) {
              marginTop = 0;
            }

            if (domInfo.h + 30 > scrollNodeHeight) {
              maskStyle = Styles.flexAlignTop;
            }

            var {
              modalStyle: orgModalStyle,
              maskStyle: orgMaskStyle
            } = _this.state;
            setTimeout(function () {
              if (_this._mount && (get(orgModalStyle, ["marginTop"]) !== marginTop || get(orgMaskStyle, ["justifyContent"]) !== maskStyle.justifyContent)) {
                _this.setState(function (_ref) {
                  var {
                    modalStyle
                  } = _ref;
                  modalStyle = _objectSpread(_objectSpread({}, modalStyle), {}, {
                    marginTop
                  });
                  return {
                    maskStyle,
                    modalStyle
                  };
                });
              }
            });
          }
        }
      }, 300);
    });

    return _this;
  }

  _createClass(PopupModal, [{
    key: "getBodyResetClass",
    value: function getBodyResetClass() {
      var body = doc().body;
      var bodyClass = body.className;
      bodyClass = removeClass(bodyClass, "dimmable");
      bodyClass = removeClass(bodyClass, "scrolling");
      bodyClass = removeClass(bodyClass, "dimmed");
      bodyClass = removeClass(bodyClass, "dimmed-bg-scrolling");
      return bodyClass;
    }
  }, {
    key: "resetBodyCssClass",
    value: function resetBodyCssClass() {
      var {
        toPool
      } = this.props;
      var body = doc().body;

      if (!toPool && body) {
        body.className = this.getBodyResetClass();
      }
    }
  }, {
    key: "setBodyCssClass",
    value: function setBodyCssClass() {
      var {
        toPool,
        backgroundScroll
      } = this.props;
      var body = doc().body;

      if (!toPool && body) {
        var addBodyClass = mixClass(this.getBodyResetClass(), {
          "dimmed-bg-scrolling": backgroundScroll
        }, "dimmable", "dimmed");
        body.className = addBodyClass;
      }
    }
  }, {
    key: "lockScreen",
    value: function lockScreen() {
      this.reCalculate();

      if (!this._locked) {
        this._locked = true;
        win().addEventListener("resize", this.reCalculate);
        win().addEventListener("keyup", this.handleKeyUp);
        var MutationObserver = win().MutationObserver;

        if (MutationObserver && this.el && !this._observer) {
          this._observer = new MutationObserver(this.reCalculate);

          this._observer.observe(this.el, observerConfig);
        }
      }
    }
  }, {
    key: "unlockScreen",
    value: function unlockScreen() {
      if (this._locked) {
        this._locked = false;
      } else {
        return;
      }

      if (hasClass(get(doc(), ["body", "className"]), "dimmed")) {
        var {
          onClose
        } = this.props; //settimeout is for fixed cant setstate during render error

        setTimeout(function () {
          return callfunc(onClose);
        });
      } // do detach (need put after onClose else will make modal can't appear again)


      clearTimeout(this._timer);
      this.resetBodyCssClass();
      win().removeEventListener("resize", this.reCalculate);
      win().removeEventListener("keyup", this.handleKeyUp);

      if (this._observer) {
        this._observer.disconnect();

        this._observer = null;
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._mount = true;
      injects = lazyInject(InjectStyles, injects);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._mount = false;
      this.unlockScreen();
    }
  }, {
    key: "shouldShow",
    value: function shouldShow(show) {
      var {
        modalStyle: stateModalStyle,
        maskStyle: stateMaskStyle
      } = this.state;

      var _this$props = this.props,
          {
        basic,
        disableClose,
        disableClickClose,
        disableEscClose,
        appear,
        enter,
        leave,
        style,
        styles,
        contentStyle,
        modal,
        modalClassName,
        modalStyle,
        mask,
        backgroundScroll,
        backgroundOpacity,
        toPool,
        closeEl,
        onClose,
        className,
        contentClassName,
        name,
        id
      } = _this$props,
          restProps = _objectWithoutProperties(_this$props, _excluded);

      var containerClick = null;
      var thisCloseEl;
      var content = null;

      if (show) {
        this.lockScreen();

        if (!closeEl) {
          if (!disableClose && !disableClickClose) {
            containerClick = this.handleContainerClick;
          }
        } else {
          var _closeEl$props;

          thisCloseEl = build(closeEl)({
            onClick: this.handleClose,
            key: "close",
            style: _objectSpread({
              zIndex: 1001,
              position: "fixed"
            }, (_closeEl$props = closeEl.props) === null || _closeEl$props === void 0 ? void 0 : _closeEl$props.style)
          });
        }

        var thisModal = modal !== null && modal !== void 0 ? modal : /*#__PURE__*/_jsx(Dimmer, {
          isModal: "true",
          show: show,
          contentStyle: contentStyle
        }, "model");

        if (STRING !== typeof thisModal) {
          thisModal = build(thisModal)(_objectSpread(_objectSpread({}, restProps), {}, {
            refCb: this.handleModalRefCb,
            className: mixClass({
              basic
            }, modalClassName, get(thisModal, ["props", "className"])),
            style: _objectSpread(_objectSpread(_objectSpread({}, Styles.modal), modalStyle), stateModalStyle)
          }));
        }

        if (mask) {
          if (backgroundOpacity) {
            style.backgroundColor = "rgba(0,0,0," + backgroundOpacity + ")";
          }

          var thisStyles = arrayMerge(reactStyle(_objectSpread(_objectSpread(_objectSpread({}, Styles.background), style), stateMaskStyle), false, false), styles);
          content = /*#__PURE__*/_jsx(Dimmer, {
            className: mixClass("page modals", contentClassName),
            show: show,
            center: false,
            styles: thisStyles,
            styleOrder: 1,
            onClick: containerClick,
            children: thisModal
          }, "modals");
        } else {
          content = thisModal;
        }
      } else {
        this.unlockScreen();
      }

      return /*#__PURE__*/_jsxs(SemanticUI, {
        ui: false,
        className: className,
        name: name,
        id: id,
        children: [/*#__PURE__*/_jsx(Animate, {
          appear: appear,
          enter: enter,
          leave: leave,
          children: content
        }), thisCloseEl]
      });
    }
  }]);

  return PopupModal;
}(PopupOverlay);

_defineProperty(PopupModal, "defaultProps", {
  mask: true,
  name: "modal",
  modalClassName: "modal active" // let has chance clean modal className

});

export default PopupModal;
var Styles = {
  flexAlignTop: {
    justifyContent: "flex-start",
    WebkitBoxPack: "start",
    MsFlexPack: "start"
  },
  background: {
    overflow: "auto",
    boxSizing: "border-box",
    WebkitOverflowScrolling: "touch"
  },
  modal: {
    boxSizing: "border-box",
    right: "auto",
    bottom: "auto",
    transition: "all 500ms ease"
  }
};
var injects;
var InjectStyles = {
  backgroundScroll: [{
    overflow: "auto !important",
    WebkitOverflowScrolling: "touch !important"
  }, ".dimmable.dimmed.dimmed-bg-scrolling"]
};