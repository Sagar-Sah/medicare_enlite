import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import { useState, useEffect, useMemo, useRef } from "react";
import PropTypes from "prop-types";
import { getSN } from "get-random-id";
import { useTimer, usePrevious } from "reshow-hooks";
import Animate from "organism-react-animate";
import XIcon from "ricon/X";
import { build, Message } from "react-atomic-molecule";
import callfunc from "call-func";
import get from "get-object-value";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var messageTypes = ["success", "info", "warning", "error"];

var useAlert = function useAlert(props) {
  var {
    onClick,
    data,
    header,
    message,
    messageType
  } = props;
  var duration = props.duration * 1;
  var [hoverStyle, setHoverStyle] = useState();
  var [run] = useTimer();
  useEffect(function () {
    if (duration > 0) {
      run(function () {
        return onClick({
          data
        });
      }, duration);
    }
  }, []);
  var handler = {
    mouseEnter: function mouseEnter() {
      setHoverStyle({
        opacity: ".9"
      });
    },
    mouseLeave: function mouseLeave() {
      setHoverStyle(null);
    },
    click: function click(e) {
      e.data = data;
      onClick(e);
    }
  };
  return {
    handler,
    hoverStyle,
    header,
    message,
    messageType
  };
};

var Alert = function Alert(props) {
  var {
    handler,
    hoverStyle,
    header,
    message,
    messageType
  } = useAlert(props);
  return /*#__PURE__*/_jsxs(Message, {
    messageType: messageType,
    header: header,
    style: Styles.message,
    children: [message, /*#__PURE__*/_jsx(XIcon, {
      style: _objectSpread(_objectSpread({}, Styles.xicon), hoverStyle),
      weight: ".1rem",
      onMouseEnter: handler.mouseEnter,
      onMouseLeave: handler.mouseLeave,
      onClick: handler.click
    })]
  });
};

var defaultName = "alerts";

var AlertsNotifier = function AlertsNotifier(props) {
  var {
    ani = {
      appear: "fadeIn",
      enter: "fadeIn",
      leave: "fadeOut"
    },
    position = "top",
    name = defaultName,
    duration = 5000,
    alerts,
    onDismiss
  } = props || {};
  var prevAlerts = usePrevious(props.alerts);
  var [dismissedAlerts, setDismissedAlerts] = useState({});
  var [alertArr, setAlertArr] = useState([]);

  if (prevAlerts !== props.alerts) {
    var nextAlertArr = (alerts || []).map(function (item) {
      var thisItem = "string" === typeof item ? {
        message: item
      } : item;

      if (-1 === messageTypes.indexOf(thisItem.type)) {
        thisItem.type = "info";
      }

      if (!thisItem.id) {
        thisItem.id = getSN("alert");
      }

      return thisItem;
    });
    setAlertArr(nextAlertArr);
  }

  return useMemo(function () {
    var handleDismiss = function handleDismiss(e) {
      var isContinue = callfunc(onDismiss, [e]);

      if (false !== isContinue) {
        // if no callback for dismissal, just update our state
        setDismissedAlerts(function (dismissedAlerts) {
          dismissedAlerts[e.data.id] = e.data;
          return _objectSpread({}, dismissedAlerts);
        });
      }
    };

    var positionStyle = {};

    if ("top" === position) {
      positionStyle.top = 5;
    } else {
      positionStyle.bottom = 5;
    }

    var displayAlert = alertArr.filter(function (item) {
      return !get(dismissedAlerts, [item.id]);
    }).map(function (item) {
      return /*#__PURE__*/_jsx(Alert, {
        duration: duration,
        messageType: item.type,
        message: item.message,
        header: item.header,
        data: item,
        onClick: handleDismiss
      }, item.id);
    });
    return build(Animate)(_objectSpread(_objectSpread({}, ani), {}, {
      key: name,
      name,
      style: _objectSpread(_objectSpread({}, Styles.container), positionStyle)
    }), displayAlert);
  }, [alertArr, dismissedAlerts]);
};

AlertsNotifier.displayName = defaultName;
AlertsNotifier.propTypes = process.env.NODE_ENV !== "production" ? {
  alerts: PropTypes.array,
  onDismiss: PropTypes.func
} : {};
export default AlertsNotifier;
var Styles = {
  container: {
    position: "fixed",
    left: 10,
    right: 10,
    zIndex: 9999
  },
  xicon: {
    top: 20,
    right: 10,
    opacity: ".5"
  },
  message: {
    margin: "3px 0"
  }
};