"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutPropertiesLoose"));

var _react = require("react");

var _reactAtomicAtom = require("react-atomic-atom");

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _reshowConstant = require("reshow-constant");

var _injectStyle = _interopRequireDefault(require("../../lib/styles/injectStyle.js"));

var _bindStyles = _interopRequireDefault(require("../../lib/styles/bindStyles.js"));

var _getChildMapping = require("../../getChildMapping.js");

var _excluded = ["ui", "renderChildren", "refCb", "atom", "children", "styles", "styleOrder"];

var getChildren = function getChildren(render, children) {
  return render && children != null ? (0, _getChildMapping.bindChildKey)(children) : null;
};

var SemanticUI = function SemanticUI(_ref) {
  var _ref$ui = _ref.ui,
      ui = _ref$ui === void 0 ? true : _ref$ui,
      _ref$renderChildren = _ref.renderChildren,
      renderChildren = _ref$renderChildren === void 0 ? true : _ref$renderChildren,
      refCb = _ref.refCb,
      atom = _ref.atom,
      children = _ref.children,
      styles = _ref.styles,
      styleOrder = _ref.styleOrder,
      restProps = (0, _objectWithoutPropertiesLoose2["default"])(_ref, _excluded);
  var atoms = _reactAtomicAtom.html;
  atom = null != atom ? atom : atoms["default"];

  switch (atom) {
    case "null":
      return null;

    default:
      var componentData = (0, _getObjectValue["default"])(atoms, [atom]);

      if (componentData) {
        if ((0, _reshowConstant.HAS)(componentData, "renderChildren")) {
          renderChildren = componentData.renderChildren;
        }

        if ((0, _reshowConstant.HAS)(componentData, "ui")) {
          renderChildren = componentData.ui;
        }
      }

      break;
  }

  if (styles) {
    var className = restProps.className,
        style = restProps.style; // Need avoid props pass by ref !!important!!

    (0, _injectStyle["default"])(); // bindStyles need after inject

    var bindProps = (0, _bindStyles["default"])({
      className: className,
      style: style,
      styles: styles,
      styleOrder: styleOrder
    });
    (0, _reshowConstant.KEYS)(bindProps).forEach(function (key) {
      return restProps[key] = bindProps[key];
    });
  }

  if (ui) {
    /**
     * Need put after bindProps
     *!!important!! restProps.className maybe effect by bindProps, so use it here.
     */
    restProps.className = restProps.className ? restProps.className + " ui" : "ui";
  }

  if (refCb) {
    restProps.ref = refCb;
  }

  return /*#__PURE__*/(0, _react.createElement)(atom, restProps, getChildren(renderChildren, children));
};

var _default = SemanticUI;
exports["default"] = _default;
module.exports = exports.default;