var _i, _span, _span2, _i2, _span3, _i3, _i4, _i5;

import { expect } from "chai";
import React from "react";
import { render } from "reshow-unit";
import mergeChildren from "../mergeChildren.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
describe("Test mergeChildren", function () {
  it("basic test (prepend)", function () {
    var FakeDom = function FakeDom(_ref) {
      var {
        children
      } = _ref;
      return /*#__PURE__*/_jsx("div", {
        children: mergeChildren(_i || (_i = /*#__PURE__*/_jsx("i", {}, "i")), children)
      });
    };

    var vDom = /*#__PURE__*/_jsxs(FakeDom, {
      children: [_span || (_span = /*#__PURE__*/_jsx("span", {})), _span2 || (_span2 = /*#__PURE__*/_jsx("span", {}))]
    });

    var wrap = render(vDom);
    expect(wrap.html()).to.equal("<div><i></i><span></span><span></span></div>");
  });
  it("test append", function () {
    var FakeDom = function FakeDom(_ref2) {
      var {
        children
      } = _ref2;
      return /*#__PURE__*/_jsx("div", {
        children: mergeChildren(_i2 || (_i2 = /*#__PURE__*/_jsx("i", {}, "i")), children, true)
      });
    };

    var vDom = /*#__PURE__*/_jsx(FakeDom, {
      children: _span3 || (_span3 = /*#__PURE__*/_jsx("span", {}))
    });

    var wrap = render(vDom);
    expect(wrap.html()).to.equal("<div><span></span><i></i></div>");
  });
  it("test empty children", function () {
    var FakeDom = function FakeDom(_ref3) {
      var {
        children
      } = _ref3;
      return /*#__PURE__*/_jsx("div", {
        children: mergeChildren(_i3 || (_i3 = /*#__PURE__*/_jsx("i", {}, "i")), children)
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(FakeDom, {}));
    expect(wrap.html()).to.equal("<div><i></i></div>");
  });
  it("test merge twice", function () {
    var FakeDom = function FakeDom(_ref4) {
      var {
        children
      } = _ref4;
      return /*#__PURE__*/_jsx("div", {
        children: mergeChildren(_i4 || (_i4 = /*#__PURE__*/_jsx("i", {})), mergeChildren(_i5 || (_i5 = /*#__PURE__*/_jsx("i", {})), children))
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(FakeDom, {}));
    expect(wrap.html()).to.equal("<div><i></i><i></i></div>");
  });
});