import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import { useRef, PureComponent, forwardRef, useImperativeHandle } from "react";
import { expect } from "chai";
import { render } from "reshow-unit";
import mergeRef from "../mergeRef.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("Test merge ref", function () {
  it("test hook", function () {
    var CompRoot = /*#__PURE__*/forwardRef(function (props, ref) {
      var lastEl = useRef();
      var expose = {
        el: function el() {
          return lastEl.current;
        }
      };
      useImperativeHandle(ref, function () {
        return expose;
      }, []);
      return /*#__PURE__*/_jsx(Comp, {
        refCb: lastEl
      });
    });
    var childRef;

    var Comp = function Comp(props) {
      var lastEl = useRef();
      childRef = lastEl;
      return /*#__PURE__*/_jsx("div", {
        ref: function ref(el) {
          return mergeRef(el, [lastEl, props.refCb]);
        }
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(CompRoot, {}), {
      instance: true
    });
    expect(wrap.instance().el().nodeName).to.equal("DIV");
    expect(childRef.current.nodeName).to.equal("DIV");
  });
  it("test callback", function () {
    var CompRoot = /*#__PURE__*/function (_PureComponent) {
      _inherits(CompRoot, _PureComponent);

      var _super = _createSuper(CompRoot);

      function CompRoot() {
        var _this;

        _classCallCheck(this, CompRoot);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "handleRefCb", function (el) {
          return _this.el = el;
        });

        return _this;
      }

      _createClass(CompRoot, [{
        key: "render",
        value: function render() {
          return /*#__PURE__*/_jsx(Comp, {
            refCb: this.handleRefCb
          });
        }
      }]);

      return CompRoot;
    }(PureComponent);

    var childRef;

    var Comp = function Comp(props) {
      return /*#__PURE__*/_jsx("span", {
        ref: function ref(el) {
          return mergeRef(el, [function (el) {
            return childRef = el;
          }, props.refCb]);
        }
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(CompRoot, {}), {
      instance: true
    });
    expect(wrap.instance().el.nodeName).to.equal("SPAN");
    expect(childRef.nodeName).to.equal("SPAN");
  });
});