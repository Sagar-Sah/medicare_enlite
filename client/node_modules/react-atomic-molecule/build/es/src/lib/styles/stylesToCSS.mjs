import hyphenateStyleName from "hyphenate-style-name";
import get from "get-object-value";
import { IS_ARRAY, KEYS, NEW_OBJ } from "reshow-constant";
import replicateSelector from "./replicateSelector.mjs"; // Follows syntax at https://developer.mozilla.org/en-US/docs/Web/CSS/content,
// including multiple space separated values.

var unquotedContentValueRegex = /^(normal|none|(\b(url\([^)]*\)|chapter_counter|attr\([^)]*\)|(no-)?(open|close)-quote|inherit)((\b\s*)|$|\s+))+)$/;
var browsers = ["webkit", "moz"];

var buildOneRule = function buildOneRule(key, value) {
  if (null == value) {
    return "";
  }

  if (key === "content" && !unquotedContentValueRegex.test(value)) {
    value = "'" + value.replace(/'/g, "\\'") + "'";
  }

  return hyphenateStyleName(key) + ": " + value + ";";
};

var buildRules = function buildRules(rules, styleId, selector) {
  if (rules === void 0) {
    rules = [];
  }

  if (!rules || !rules.length) {
    return;
  }

  var parentSelector;

  if (IS_ARRAY(selector)) {
    parentSelector = selector[0].trim ? selector[0].trim() : selector[0];
    selector.shift();
  } else {
    selector = [selector];
  }

  var myRules = [];
  rules.forEach(function (rule, i) {
    var mycss = "";
    /**
     * if selector[i] is array will conver to string here.
     * Such [".foo", ".bar"] will conver to .foo,.bar
     */

    mycss += selector[i] + " {";
    KEYS(rule).forEach(function (styleKey) {
      if (rule[styleKey] && rule[styleKey].forEach) {
        rule[styleKey].forEach(function (item) {
          return mycss += buildOneRule(styleKey, item);
        });
      } else {
        mycss += buildOneRule(styleKey, rule[styleKey]);
      }
    });
    mycss += "}";
    myRules.push(mycss);
  });
  var myRule = myRules.join("\n");

  if (parentSelector) {
    var mycssArr = [parentSelector + " {\n" + myRule + "\n}\n"];
    var keyframesString = "keyframes";

    if (1 === parentSelector.indexOf(keyframesString)) {
      browsers.forEach(function (browser) {
        mycssArr.push(parentSelector.replace("@" + keyframesString, "@-" + browser + "-" + keyframesString) + ("{\n" + myRule + "\n}\n"));
      });
    }

    myRule = mycssArr.join("\n");
  }

  return myRule;
};

var buildStyle = function buildStyle(result, oStyle) {
  var {
    styleId
  } = oStyle;

  if (!styleId || result.cssArr[styleId]) {
    return;
  }

  var selector = oStyle.selector;

  if (selector) {
    if (IS_ARRAY(selector)) {
      selector = selector.slice(0);

      if (!selector[1]) {
        selector[1] = replicateSelector(styleId);
      }
    }
  } else {
    selector = replicateSelector(styleId);
  }

  result.objArr[styleId] = oStyle; //for check already inject

  result.cssArr[styleId] = buildRules(oStyle.style, styleId, selector);
  result.styleIds.push(styleId);
};

var stylesToCSS = function stylesToCSS(styles) {
  var result = {
    styleIds: [],
    objArr: NEW_OBJ(),
    cssArr: NEW_OBJ()
  };
  styles && styles.forEach(function (oStyle) {
    return buildStyle(result, oStyle);
  });
  return result;
};

export default stylesToCSS;