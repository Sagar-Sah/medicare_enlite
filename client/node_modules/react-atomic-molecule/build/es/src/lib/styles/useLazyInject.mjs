import { useRef, useEffect, useState } from "react";
import { NEW_OBJ, OBJ_SIZE } from "reshow-constant";
import lazyInject from "./lazyInject.mjs";
import injectStyle from "./injectStyle.mjs";
import cleanStyleTag from "./cleanStyleTag.mjs";
import genStyleId from "./genStyleId.mjs";

var useLazyInject = function useLazyInject(InjectStyles, existsInjection) {
  var [oid] = useState(function () {
    return genStyleId("o");
  });
  var injects = useRef();

  var resetInject = function resetInject() {
    if (!injects.current) {
      if (!existsInjection) {
        existsInjection = lazyInject(InjectStyles, existsInjection);
      }

      injects.current = existsInjection;
    }
  };

  resetInject();
  useEffect(function () {
    if (!injects.current) {
      resetInject();
    }

    if (!injects.current._mounted) {
      injectStyle(injects.current);
      injects.current._mounted = NEW_OBJ();
    }

    injects.current._mounted[oid] = true;
    return function () {
      delete injects.current._mounted[oid];

      if (!OBJ_SIZE(injects.current._mounted)) {
        delete injects.current._mounted;
        cleanStyleTag(injects.current);
      }
    };
  }, []);
  return injects.current;
};

export default useLazyInject;