import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["className", "fieldClassName", "fieldStyle", "fieldStyles", "fieldProps", "children", "inline", "type", "inputComponent", "inputWrapper", "inputWrapperAttr", "label", "labelStyle", "labelStyles", "labelWrap", "style", "styles", "styleOrder", "required", "messageType", "messageProps", "message", "topTip", "bottomTip", "rightTip"];
import { mixClass } from "class-lib";
import build from "reshow-build";
import get from "get-object-value";
import SemanticUI from "../molecules/SemanticUI.mjs";
import Message from "../molecules/Message.mjs";
import Label from "../molecules/Label.mjs";
import useCSS from "../../useCSS.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var Field = function Field(props) {
  useCSS(["input", "search", "form"], "semantic");

  var _ref = props || {},
      {
    className,
    fieldClassName,
    fieldStyle,
    fieldStyles,
    fieldProps,
    children,
    inline,
    type,
    inputComponent = SemanticUI,
    inputWrapper,
    inputWrapperAttr,
    label,
    labelStyle,
    labelStyles,
    labelWrap,
    style,
    styles,
    styleOrder,
    required,
    messageType,
    messageProps,
    message,
    topTip,
    bottomTip,
    rightTip
  } = _ref,
      others = _objectWithoutProperties(_ref, _excluded);

  var thisMessage = message !== null && message !== void 0 ? message : props["data-message"];
  var thisMessageType = messageType !== null && messageType !== void 0 ? messageType : props["data-message-type"];
  /**
   * isGroup need check with props to avoid default value.
   */

  var isGroup = !props.atom && !props.inputComponent;
  var classes = mixClass(fieldClassName, {
    "label-wrap": labelWrap,
    required: !!required,
    field: !isGroup,
    fields: isGroup,
    inline: !!inline,
    info: thisMessageType === "info",
    error: thisMessageType === "error",
    success: thisMessageType === "success",
    warning: thisMessageType === "warning"
  });
  var oLabel = null;
  var thisMessageProps = messageProps || {};

  if (label) {
    var thisLabelStyle = _objectSpread({}, get(labelStyle, null, {}));

    if (props.id) {
      thisLabelStyle.cursor = "pointer";
    }

    if (labelWrap) {
      thisLabelStyle.flex = "0 1 100%";
      thisMessageProps.style = _objectSpread({}, thisMessageProps.style);
      thisMessageProps.style.flex = "0 1 100%";
    }

    oLabel = /*#__PURE__*/_jsx(SemanticUI, {
      atom: "label",
      htmlFor: props.id,
      style: thisLabelStyle,
      styles: labelStyles,
      styleOrder: styleOrder,
      title: label,
      children: label
    }, "label");
  }

  var input = null;
  var thisFieldStyles = fieldStyles;
  var thisFieldStyle = fieldStyle;
  var thisChildren = children;

  if (isGroup) {
    if (!thisFieldStyles) {
      thisFieldStyles = styles;
    }

    if (!thisFieldStyle) {
      thisFieldStyle = _objectSpread({}, style);
    } else {
      thisFieldStyle = _objectSpread({}, thisFieldStyle);
    }

    if (label && labelWrap) {
      thisFieldStyle.flexWrap = "wrap";
    }
  } else {
    var isSelect = "select" === props.atom;
    var inputProps = get(inputComponent, ["props"], {}); // set inputChildren

    var inputChildren = inputProps.children || null;

    if (isSelect) {
      thisChildren = null;
      inputChildren = children;
    }

    var inputClasses = mixClass(className, inputProps.className, {
      dropdown: isSelect
    });
    input = build(inputComponent)(_objectSpread(_objectSpread({}, others), {}, {
      style: _objectSpread(_objectSpread({
        boxSizing: "inherit"
      }, inputProps.style), style),
      key: "input",
      className: inputClasses,
      styles,
      styleOrder,
      required,
      type
    }), inputChildren);
  }

  var topTipEl;

  if (topTip) {
    topTipEl = /*#__PURE__*/_jsx(Label, {
      className: "pointing below prompt",
      children: topTip
    }, "topTip");
  }

  var inputs;

  if ("checkbox" === type || "radio" === type) {
    inputs = [topTipEl, input, oLabel];
  } else {
    inputs = [oLabel, topTipEl, input];
  }

  if (inputWrapper) {
    inputs = build(inputWrapper)(inputWrapperAttr, inputs);
  }

  var messageEl;
  var bottomTipEl;
  var rightTipEl;

  if (thisMessage) {
    messageEl = /*#__PURE__*/_jsx(Message, _objectSpread(_objectSpread({
      messageType: thisMessageType
    }, thisMessageProps), {}, {
      children: thisMessage
    }));
  }

  if (bottomTip) {
    bottomTipEl = /*#__PURE__*/_jsx(Label, {
      className: "above pointing prompt",
      children: bottomTip
    });
  }

  if (rightTip) {
    rightTipEl = /*#__PURE__*/_jsx(Label, {
      className: "left pointing prompt",
      children: rightTip
    });
  } // init FieldStyle boxSizing


  thisFieldStyle = _objectSpread({}, thisFieldStyle);

  if (!thisFieldStyle.boxSizing) {
    thisFieldStyle.boxSizing = "inherit";
  }

  return /*#__PURE__*/_jsxs(SemanticUI, _objectSpread(_objectSpread({}, fieldProps), {}, {
    className: classes,
    style: thisFieldStyle,
    styles: thisFieldStyles,
    styleOrder: styleOrder,
    children: [inputs, thisChildren, rightTipEl, bottomTipEl, messageEl]
  }));
};

export default Field;