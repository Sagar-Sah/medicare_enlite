import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["atom", "actionProps", "inputComponent", "button", "icon", "children", "messageType", "leftLabel", "leftLabelProps", "rightLabel", "rightLabelProps", "transparent", "wrapStyle", "wrapClassName"];
import { mixClass } from "class-lib";
import build from "reshow-build";
import SemanticUI from "../molecules/SemanticUI.mjs";
import Button from "../molecules/Button.mjs";
import Label from "../molecules/Label.mjs";
import Icon from "../molecules/Icon.mjs";
import useCSS from "../../useCSS.mjs";
import useLazyInject from "../../lib/styles/useLazyInject.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var InputBox = function InputBox(props) {
  injects = useLazyInject(InjectStyles, injects);
  useCSS(["input", "search", "form"], "semantic");

  var {
    atom = "input",
    actionProps = {},
    inputComponent = SemanticUI,
    button,
    icon,
    children,
    messageType,
    leftLabel,
    leftLabelProps,
    rightLabel,
    rightLabelProps,
    transparent,
    wrapStyle,
    wrapClassName
  } = props,
      others = _objectWithoutProperties(props, _excluded);

  var classes = mixClass(wrapClassName, messageType, "input", {
    labeled: leftLabel || rightLabel,
    right: rightLabel,
    action: button && !icon,
    icon,
    transparent
  });
  var thisLeftLabel;

  if (leftLabel) {
    thisLeftLabel = /*#__PURE__*/_jsx(Label, _objectSpread(_objectSpread({}, leftLabelProps), {}, {
      children: leftLabel
    }));
  }

  var thisRightLabel;

  if (rightLabel) {
    thisRightLabel = /*#__PURE__*/_jsx(Label, _objectSpread(_objectSpread({
      style: Styles.rightLabel,
      className: "basic"
    }, rightLabelProps), {}, {
      children: rightLabel
    }));
  }

  var thisButton = null;

  if (button) {
    thisButton = /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread({}, actionProps), {}, {
      children: button
    }));
  } else if (icon) {
    thisButton = /*#__PURE__*/_jsx(Icon, _objectSpread(_objectSpread({}, actionProps), {}, {
      style: _objectSpread(_objectSpread({}, Styles.icon), actionProps.style),
      children: icon
    }));
  }

  var thisChildren;
  var inputChildren;

  if ("select" === atom) {
    inputChildren = children;
    thisChildren = null;
  } else {
    thisChildren = children;
  }

  return /*#__PURE__*/_jsxs(SemanticUI, {
    className: classes,
    style: wrapStyle,
    children: [thisLeftLabel, build(inputComponent)(_objectSpread({
      atom,
      ui: false
    }, others), inputChildren), thisRightLabel, thisChildren, thisButton]
  });
};

export default InputBox;
var Styles = {
  rightLabel: {
    borderRadius: 0
  },
  icon: {
    position: "absolute",
    top: 0,
    right: 0,
    opacity: 0.5
  }
};
var injects;
var InjectStyles = {
  label: [{
    background: "transparent",
    color: "inherit"
  }, ".ui.transparent.inverted.input>.label"]
};