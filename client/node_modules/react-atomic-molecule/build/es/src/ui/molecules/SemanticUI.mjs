import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["ui", "renderChildren", "refCb", "atom", "children", "styles", "styleOrder"];
import { createElement } from "react";
import { html } from "react-atomic-atom";
import get from "get-object-value";
import { KEYS, HAS } from "reshow-constant";
import injectStyle from "../../lib/styles/injectStyle.mjs";
import bindStyles from "../../lib/styles/bindStyles.mjs";
import { bindChildKey } from "../../getChildMapping.mjs";

var getChildren = function getChildren(render, children) {
  return render && children != null ? bindChildKey(children) : null;
};

var SemanticUI = function SemanticUI(_ref) {
  var {
    ui = true,
    renderChildren = true,
    refCb,
    atom,
    children,
    styles,
    styleOrder
  } = _ref,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var atoms = html;
  atom = null != atom ? atom : atoms.default;

  switch (atom) {
    case "null":
      return null;

    default:
      var componentData = get(atoms, [atom]);

      if (componentData) {
        if (HAS(componentData, "renderChildren")) {
          renderChildren = componentData.renderChildren;
        }

        if (HAS(componentData, "ui")) {
          renderChildren = componentData.ui;
        }
      }

      break;
  }

  if (styles) {
    var {
      className,
      style
    } = restProps; // Need avoid props pass by ref !!important!!

    injectStyle(); // bindStyles need after inject

    var bindProps = bindStyles({
      className,
      style,
      styles,
      styleOrder
    });
    KEYS(bindProps).forEach(function (key) {
      return restProps[key] = bindProps[key];
    });
  }

  if (ui) {
    /**
     * Need put after bindProps
     *!!important!! restProps.className maybe effect by bindProps, so use it here.
     */
    restProps.className = restProps.className ? restProps.className + " ui" : "ui";
  }

  if (refCb) {
    restProps.ref = refCb;
  }

  return /*#__PURE__*/createElement(atom, restProps, getChildren(renderChildren, children));
};

export default SemanticUI;