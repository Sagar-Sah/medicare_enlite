import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";

var _div, _div2;

import { isValidElement } from "react";
import { expect } from "chai";
import build from "../index.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("Test build function", function () {
  it("test function", function (done) {
    build(function (props) {
      expect(props.foo).to.equal("bar");
      done();
    })({
      foo: "bar"
    });
  });
  it("test with force call", function (done) {
    var func = function func(props) {
      expect(props.foo).to.equal("bar");
      done();
    };

    build(func, {
      doCallFunction: true
    })({
      foo: "bar"
    });
  });
  it("test function with error", function () {
    var run = function run() {
      build(function (props) {
        expect(props.foo).to.equal("bar111");
      })({
        foo: "bar"
      });
    };

    expect(run).to.throw();
  });
  it("test with stateless function return", function () {
    var func = function func(props) {
      return /*#__PURE__*/_jsx("div", _objectSpread({}, props));
    };

    var actual = build(func)({
      foo: "barbar"
    }); // will return react instance

    expect(actual.props.foo).to.equal("barbar");
    expect( /*#__PURE__*/isValidElement(actual)).to.be.true;
  });
  it("test with func and child", function () {
    var result = build(function (props) {
      return "div";
    })({
      foo: "bar"
    }, "hello child");
    expect(result.props.children).to.equal("hello child");
    expect(result.props.foo).to.equal("bar");
  });
  it("test function with wrap return", function () {
    var actual = build(function (props) {
      return "foo";
    }, {
      wrap: "div"
    })({
      foo: "barbar"
    });
    expect(actual.type).to.equal("div");
    expect(actual.props.foo).to.equal("barbar");
  });
  it("test with empty", function () {
    var result = build()();
    expect(result).to.be.null;
  });
  it("test return null", function () {
    var result = build(function () {
      return undefined;
    })();
    expect(result).to.be.null;
  });
});
describe("Test build with key", function () {
  it("with one child", function () {
    var comp = _div || (_div = /*#__PURE__*/_jsx("div", {}));

    var buildComp = build(comp)({
      key: "foo"
    });
    expect(buildComp.key).to.equal("foo");
  });
  it("with multi child", function () {
    var comp = _div2 || (_div2 = /*#__PURE__*/_jsx("div", {}));

    var buildComp = build([comp, comp])({
      key: "foo"
    });
    expect(buildComp.props.children[0].key !== buildComp.props.children[1].key).be.true;
  });
});