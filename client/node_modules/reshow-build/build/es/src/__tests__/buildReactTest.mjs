var _span, _span2, _div, _div2;

import { createElement, cloneElement, isValidElement, Children } from "react";
import { expect } from "chai";
import { render } from "reshow-unit";
import build from "../index.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("Test build react", function () {
  it("test with null props", function () {
    var wrap = render(build("div")(null, _span || (_span = /*#__PURE__*/_jsx("span", {}))));
    expect(wrap.html()).to.equal("<div><span></span></div>");
  });
  it("test with undefined props", function () {
    var wrap = render(build("div")(undefined, _span2 || (_span2 = /*#__PURE__*/_jsx("span", {}))));
    expect(wrap.html()).to.equal("<div><span></span></div>");
  });
  it("should have same behavior with createElement", function () {
    expect(render(build("div")(null, "span")).html()).to.equal(render( /*#__PURE__*/createElement("div", null, "span")).html());
  });
  it("should have same behavior with cloneElement", function () {
    expect(render(build(_div || (_div = /*#__PURE__*/_jsx("div", {})))(null, "span")).html()).to.equal(render( /*#__PURE__*/cloneElement(_div2 || (_div2 = /*#__PURE__*/_jsx("div", {})), null, "span")).html());
  });
});