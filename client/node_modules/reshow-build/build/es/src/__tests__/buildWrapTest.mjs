var _div;

import React, { PureComponent, isValidElement, Children } from "react";
import { expect } from "chai";
import { render } from "reshow-unit";
import build from "../index.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("Test wrap", function () {
  it("test build with wrap", function () {
    var FakeDom = function FakeDom() {
      return build("test", {
        wrap: _div || (_div = /*#__PURE__*/_jsx("div", {}))
      })();
    };

    var wrap = render( /*#__PURE__*/_jsx(FakeDom, {}));
    expect(wrap.html()).to.equal("<div>test</div>");
  });
  it("test wrap after function call", function () {
    var FakeDom = function FakeDom() {
      return build(function () {
        return "after-func-call";
      }, {
        wrap: "div",
        doCallFunction: true
      })({
        "data-foo": "bar"
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(FakeDom, {}));
    expect(wrap.html()).to.equal('<div data-foo="bar">after-func-call</div>');
  });
  it("test wrap after function call and unset props", function () {
    var FakeDom = function FakeDom() {
      return build(function (props) {
        delete props["data-foo"];
        return "after-func-call";
      }, {
        wrap: "div",
        doCallFunction: true
      })({
        "data-foo": "foo",
        "data-bar": "bar"
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(FakeDom, {}));
    expect(wrap.html()).to.equal('<div data-bar="bar">after-func-call</div>');
  });
});