import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";
var _excluded = ["storeLocator"];
import { Component, StrictMode } from "react";
import { createReducer } from "reshow-flux-base";
import { expect } from "chai";
import { act, render, screen } from "reshow-unit";
import useConnect from "../useConnect.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("Connect Hook (clean Props)", function () {
  var reducer;
  beforeEach(function () {
    reducer = createReducer(function (state, action) {
      return action;
    }, {});
  });
  it("test clean props", /*#__PURE__*/_asyncToGenerator(function* () {
    var [store, dispatch] = reducer;

    var Foo = function Foo(props) {
      var state = useConnect({
        storeLocator: function storeLocator() {
          return store;
        },
        calculateState: function calculateState(prevState, props) {
          return store.getState();
        }
      })(props);

      var {
        storeLocator
      } = props,
          otherProps = _objectWithoutProperties(props, _excluded);

      return /*#__PURE__*/_jsx("div", _objectSpread({
        role: "udom"
      }, _objectSpread(_objectSpread({}, otherProps), state)));
    };

    var setState = {
      current: null
    };

    var Bar = /*#__PURE__*/function (_Component) {
      _inherits(Bar, _Component);

      var _super = _createSuper(Bar);

      function Bar(props) {
        var _this;

        _classCallCheck(this, Bar);

        _this = _super.call(this, props);

        _defineProperty(_assertThisInitialized(_this), "state", {
          p: null
        });

        setState.current = function () {
          var _this2;

          (_this2 = _this).setState.apply(_this2, arguments);
        };

        return _this;
      }

      _createClass(Bar, [{
        key: "render",
        value: function render() {
          return /*#__PURE__*/_jsx(Foo, _objectSpread({}, this.state.p));
        }
      }]);

      return Bar;
    }(Component);

    render( /*#__PURE__*/_jsx(Bar, {}));
    yield act(function () {
      setState.current({
        p: {
          foo: "a",
          bar: "b"
        }
      });
    }, 5);
    expect(screen().getByRole("udom").outerHTML).to.equal('<div role="udom" foo="a" bar="b"></div>');
    yield act(function () {
      setState.current({
        p: {
          bar: "c"
        }
      });
    }, 5);
    expect(screen().getByRole("udom").outerHTML).to.equal('<div role="udom" bar="c"></div>');
  }));
});