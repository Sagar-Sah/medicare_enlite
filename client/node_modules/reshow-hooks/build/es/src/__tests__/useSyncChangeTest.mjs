import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";
import { useRef, useState } from "react";
import { expect } from "chai";
import { render, act, waitFor } from "reshow-unit";
import useSyncChange from "../useSyncChange.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
describe("test useSyncChange", function () {
  it("basic test", /*#__PURE__*/_asyncToGenerator(function* () {
    var FOO = function FOO(props) {
      var lastFoo = useRef();
      useSyncChange(props.foo, function (v) {
        return lastFoo.current = v;
      });
      return /*#__PURE__*/_jsx("div", {
        children: lastFoo.current
      });
    };

    var gSet;

    var Comp = function Comp(props) {
      var [state, setState] = useState();
      gSet = setState;
      return /*#__PURE__*/_jsx(FOO, {
        foo: state
      });
    };

    var wrap = render( /*#__PURE__*/_jsx(Comp, {}));
    yield waitFor(function () {
      expect(wrap.html()).to.equal("<div></div>");
    });
    yield act(function () {
      return gSet("bar");
    });
    yield waitFor(function () {
      expect(wrap.html()).to.equal("<div>bar</div>");
    });
  }));
});