"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.urlDispatch = exports["default"] = exports.URL = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutPropertiesLoose"));

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("reshow-runtime/helpers/defineProperty"));

var _reshowFluxBase = require("reshow-flux-base");

var _reshowConstant = require("reshow-constant");

var _organismReactAjax = require("organism-react-ajax");

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _seturl = _interopRequireWildcard(require("seturl"));

var _winDoc = require("win-doc");

var _array = _interopRequireDefault(require("array.dedup"));

var _handleAnchor = require("../handleAnchor.js");

var _excluded = ["type", "group"];

/**
 * Calling history.pushState() or history.replaceState() won't trigger a popstate event.
 * The popstate event is only triggered by performing a browser action, such as clicking on the back button
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
 */
var updateUrl = function updateUrl(url) {
  return (0, _winDoc.win)().history.pushState && (0, _winDoc.win)().history.pushState("", "", url);
};

var urlChange = "urlChange";

var URL = /*#__PURE__*/function () {
  function URL(loc) {
    (0, _classCallCheck2["default"])(this, URL);
    (0, _defineProperty2["default"])(this, "loc", {});
    this.loc = (0, _objectSpread2["default"])({}, loc);
  }

  (0, _createClass2["default"])(URL, [{
    key: "getHref",
    value: function getHref(loc) {
      return this.loc.href;
    }
  }, {
    key: "getLocKey",
    value: function getLocKey(key) {
      return key.substr(1);
    }
  }, {
    key: "get",
    value: function get(key) {
      var value;

      if (0 === key.indexOf(":")) {
        var locKey = this.getLocKey(key);
        value = (0, _getObjectValue["default"])(this.loc, [locKey]);

        if ("pathname" === locKey) {
          value = value.split("/");
        }
      } else {
        var href = this.getHref();

        if (href) {
          value = (0, _seturl.getUrl)(key, this.getHref());
        }
      }

      return value;
    }
  }]);
  return URL;
}();

exports.URL = URL;

var onUrlChange = function onUrlChange() {
  urlDispatch({
    type: "url",
    url: (0, _winDoc.doc)().URL
  });
  (0, _organismReactAjax.ajaxDispatch)(urlChange);
};

var registerEvent = function registerEvent(oWin) {
  if (oWin && oWin.addEventListener) {
    oWin.addEventListener("popstate", onUrlChange, true);
    _organismReactAjax.ajaxStore.urlDispatch = urlDispatch;
  }
};

var getInputAnchor = function getInputAnchor(params) {
  var anchor;

  if ((0, _reshowConstant.IS_ARRAY)(params)) {
    anchor = params["anchor"];
  } else {
    anchor = params;
  }

  return anchor;
};

var handleUrl = function handleUrl() {
  var Group = {};

  var init = function init() {
    Group.name = null;
    Group.urlKeys = null;
    setTimeout(function () {
      var oDoc = (0, _winDoc.doc)();

      if (oDoc.URL) {
        urlDispatch({
          type: "url",
          url: oDoc.URL
        });
        registerEvent((0, _winDoc.win)());
      }
    });
    return new URL({});
  };

  var reduce = function reduce(state, action) {
    var oDoc = (0, _winDoc.doc)();

    if (!oDoc.URL) {
      return state;
    }

    var url;
    var urlV;

    var _ref = action || {},
        type = _ref.type,
        group = _ref.group,
        otherParams = (0, _objectWithoutPropertiesLoose2["default"])(_ref, _excluded);

    var params = (0, _getObjectValue["default"])(action, ["params"], otherParams);

    switch (type) {
      case "url":
        url = (0, _getObjectValue["default"])(action, ["url"], function () {
          return (0, _getObjectValue["default"])(params, ["url"]);
        });

        if (!url) {
          console.error("Not assign url", action);
        }

        break;

      case "anchor":
        url = "#" + getInputAnchor(params);
        break;

      case "resetAnchor":
        var unsetAnchor = getInputAnchor(params);

        var _getAnchorPath = (0, _handleAnchor.getAnchorPath)(),
            anchorArr = _getAnchorPath.anchorArr;

        url = anchorArr.filter(function (anchorItem) {
          return anchorItem !== unsetAnchor;
        }).join("#");
        break;

      case "query":
      default:
        url = oDoc.URL;
        var urlKeys = (0, _reshowConstant.KEYS)(params || []);

        if (Group.name !== group && Group.urlKeys) {
          Group.urlKeys.forEach(function (key) {
            return url = (0, _seturl.unsetUrl)(key, url);
          });
          Group.urlKeys = null;
        }

        if (group) {
          Group.urlKeys = Group.name === group ? (0, _array["default"])(Group.urlKeys.concat(urlKeys)) : urlKeys;
        }

        Group.name = group;
        urlKeys.forEach(function (key) {
          urlV = (0, _getObjectValue["default"])(params, [key]);
          url = urlV != null ? (0, _seturl["default"])(key, urlV, url) : (0, _seturl.unsetUrl)(key, url);
        });
        break;
    }

    if (url !== oDoc.URL) {
      updateUrl(url);
      return new URL(oDoc.location); // need put after updateUrl for new url effect
    } else {
      if (url !== state.getHref()) {
        return new URL(oDoc.location);
      }

      return state;
    }
  };

  return {
    init: init,
    reduce: reduce
  };
};

var oUrl = handleUrl();

var _createReducer = (0, _reshowFluxBase.createReducer)(oUrl.reduce, oUrl.init),
    store = _createReducer[0],
    urlDispatch = _createReducer[1];

exports.urlDispatch = urlDispatch;
store.registerEvent = registerEvent;
var _default = store;
exports["default"] = _default;