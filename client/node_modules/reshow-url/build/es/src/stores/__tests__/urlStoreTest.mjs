import { cleanIt, jsdom } from "reshow-unit";
import { expect } from "chai";
import urlStore, { urlDispatch } from "../urlStore.mjs";
describe("Test set New Url", function () {
  beforeEach(function () {
    jsdom(null, {
      url: "http://localhost"
    });
    urlStore.reset();
  });
  afterEach(function () {
    cleanIt();
  });
  it("test dispatch url from action", function () {
    expect(document.URL).to.equal("http://localhost/");
    urlDispatch({
      type: "url",
      url: "http://localhost/a"
    });
    expect(document.URL).to.equal("http://localhost/a");
  });
  it("test dispatch url from params", function () {
    expect(document.URL).to.equal("http://localhost/");
    urlDispatch("url", {
      url: "http://localhost/b"
    });
    expect(document.URL).to.equal("http://localhost/b");
  });
  it("test clean group url", function () {
    urlDispatch({
      type: "query",
      group: "foo",
      params: {
        foo: "foo",
        bar: "bar"
      }
    });
    expect(document.URL).to.equal("http://localhost/?foo=foo&bar=bar");
    urlDispatch({
      type: "query",
      group: "foo",
      params: {
        a: "a"
      }
    });
    expect(document.URL).to.equal("http://localhost/?foo=foo&bar=bar&a=a");
    urlDispatch({
      type: "query",
      params: {
        b: "b"
      }
    });
    expect(document.URL).to.equal("http://localhost/?&b=b");
  });
  it("test clean group url from empty", function () {
    urlDispatch({
      type: "query",
      params: {
        foo: "foo",
        bar: "bar"
      }
    });
    expect(document.URL).to.equal("http://localhost/?foo=foo&bar=bar");
    urlDispatch({
      type: "query",
      group: "foo",
      params: {
        a: "a"
      }
    });
    expect(document.URL).to.equal("http://localhost/?foo=foo&bar=bar&a=a");
    urlDispatch({
      type: "query"
    });
    expect(document.URL).to.equal("http://localhost/?foo=foo&bar=bar");
  });
});