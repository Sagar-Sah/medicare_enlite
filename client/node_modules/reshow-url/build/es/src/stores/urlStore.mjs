import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
var _excluded = ["type", "group"];
import { createReducer } from "reshow-flux-base";
import { KEYS, IS_ARRAY } from "reshow-constant";
import { ajaxDispatch, ajaxStore } from "organism-react-ajax";
import _get from "get-object-value";
import setUrl, { getUrl, unsetUrl } from "seturl";
import { win, doc } from "win-doc";
import arrayDedup from "array.dedup";
import { getAnchorPath } from "../handleAnchor.mjs";
/**
 * Calling history.pushState() or history.replaceState() won't trigger a popstate event.
 * The popstate event is only triggered by performing a browser action, such as clicking on the back button
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
 */

var updateUrl = function updateUrl(url) {
  return win().history.pushState && win().history.pushState("", "", url);
};

var urlChange = "urlChange";

var URL = /*#__PURE__*/function () {
  function URL(loc) {
    _classCallCheck(this, URL);

    _defineProperty(this, "loc", {});

    this.loc = _objectSpread({}, loc);
  }

  _createClass(URL, [{
    key: "getHref",
    value: function getHref(loc) {
      return this.loc.href;
    }
  }, {
    key: "getLocKey",
    value: function getLocKey(key) {
      return key.substr(1);
    }
  }, {
    key: "get",
    value: function get(key) {
      var value;

      if (0 === key.indexOf(":")) {
        var locKey = this.getLocKey(key);
        value = _get(this.loc, [locKey]);

        if ("pathname" === locKey) {
          value = value.split("/");
        }
      } else {
        var href = this.getHref();

        if (href) {
          value = getUrl(key, this.getHref());
        }
      }

      return value;
    }
  }]);

  return URL;
}();

var onUrlChange = function onUrlChange() {
  urlDispatch({
    type: "url",
    url: doc().URL
  });
  ajaxDispatch(urlChange);
};

var registerEvent = function registerEvent(oWin) {
  if (oWin && oWin.addEventListener) {
    oWin.addEventListener("popstate", onUrlChange, true);
    ajaxStore.urlDispatch = urlDispatch;
  }
};

var getInputAnchor = function getInputAnchor(params) {
  var anchor;

  if (IS_ARRAY(params)) {
    anchor = params["anchor"];
  } else {
    anchor = params;
  }

  return anchor;
};

var handleUrl = function handleUrl() {
  var Group = {};

  var init = function init() {
    Group.name = null;
    Group.urlKeys = null;
    setTimeout(function () {
      var oDoc = doc();

      if (oDoc.URL) {
        urlDispatch({
          type: "url",
          url: oDoc.URL
        });
        registerEvent(win());
      }
    });
    return new URL({});
  };

  var reduce = function reduce(state, action) {
    var oDoc = doc();

    if (!oDoc.URL) {
      return state;
    }

    var url;
    var urlV;

    var _ref = action || {},
        {
      type,
      group
    } = _ref,
        otherParams = _objectWithoutProperties(_ref, _excluded);

    var params = _get(action, ["params"], otherParams);

    switch (type) {
      case "url":
        url = _get(action, ["url"], function () {
          return _get(params, ["url"]);
        });

        if (!url) {
          console.error("Not assign url", action);
        }

        break;

      case "anchor":
        url = "#" + getInputAnchor(params);
        break;

      case "resetAnchor":
        var unsetAnchor = getInputAnchor(params);
        var {
          anchorArr
        } = getAnchorPath();
        url = anchorArr.filter(function (anchorItem) {
          return anchorItem !== unsetAnchor;
        }).join("#");
        break;

      case "query":
      default:
        url = oDoc.URL;
        var urlKeys = KEYS(params || []);

        if (Group.name !== group && Group.urlKeys) {
          Group.urlKeys.forEach(function (key) {
            return url = unsetUrl(key, url);
          });
          Group.urlKeys = null;
        }

        if (group) {
          Group.urlKeys = Group.name === group ? arrayDedup(Group.urlKeys.concat(urlKeys)) : urlKeys;
        }

        Group.name = group;
        urlKeys.forEach(function (key) {
          urlV = _get(params, [key]);
          url = urlV != null ? setUrl(key, urlV, url) : unsetUrl(key, url);
        });
        break;
    }

    if (url !== oDoc.URL) {
      updateUrl(url);
      return new URL(oDoc.location); // need put after updateUrl for new url effect
    } else {
      if (url !== state.getHref()) {
        return new URL(oDoc.location);
      }

      return state;
    }
  };

  return {
    init,
    reduce
  };
};

var oUrl = handleUrl();
var [store, urlDispatch] = createReducer(oUrl.reduce, oUrl.init);
store.registerEvent = registerEvent;
export default store;
export { urlDispatch, URL };