"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.messageDispatch = exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(
  require("reshow-runtime/helpers/classCallCheck")
);

var _createClass2 = _interopRequireDefault(
  require("reshow-runtime/helpers/createClass")
);

var _defineProperty2 = _interopRequireDefault(
  require("reshow-runtime/helpers/defineProperty")
);

var _reshowFlux = require("reshow-flux");

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _callFunc = _interopRequireDefault(require("call-func"));

var _reshowConstant = require("reshow-constant");

var _pageStore = require("./pageStore.js");

var alertCount = 0;

var toMessage = function toMessage(message) {
  if (-1 !== "string|number".indexOf(typeof message)) {
    message = {
      message: message,
    };
  }

  if (!message.id) {
    message.id = "m-" + alertCount;
    alertCount++;
  }

  return message;
};

var getMessage = function getMessage(action) {
  return toMessage(
    (0, _getObjectValue["default"])(action, ["params", "message"])
  );
};

var HandleMessage = /*#__PURE__*/ (function () {
  function HandleMessage() {
    (0, _classCallCheck2["default"])(this, HandleMessage);
    (0, _defineProperty2["default"])(
      this,
      "dialogCallback",
      _reshowConstant.T_NULL
    );
    (0, _defineProperty2["default"])(this, "alertMap", {});
  }

  (0, _createClass2["default"])(HandleMessage, [
    {
      key: "getAlertList",
      value: function getAlertList() {
        var _this = this;

        return (0, _reshowConstant.KEYS)(this.alertMap).map(function (key) {
          return _this.alertMap[key];
        });
      },
    },
    {
      key: "dialogStart",
      value: function dialogStart(state, action) {
        var params = (0, _getObjectValue["default"])(action, ["params"]);
        var dialog = params.dialog,
          dialogProps = params.dialogProps,
          dialogTo = params.dialogTo,
          callback = params.callback;
        var next = {
          dialog: dialog,
        };

        if (dialogProps) {
          next.dialogProps = dialogProps;
        }

        if (dialogTo) {
          next.dialogTo = dialogTo;
        }

        if (callback) {
          this.dialogCallback = callback;
        }

        return (0, _reshowFlux.mergeMap)(state, next);
      },
    },
    {
      key: "dialogEnd",
      value: function dialogEnd(state, action) {
        var dialogTo = state.get("dialogTo") || "dialogReturn";
        var value = (0, _getObjectValue["default"])(action, [
          "params",
          "value",
        ]);

        if (value != _reshowConstant.T_NULL) {
          var _pageDispatch;

          (0, _pageStore.pageDispatch)(
            ((_pageDispatch = {}),
            (_pageDispatch[dialogTo] = value),
            _pageDispatch)
          );
        }

        (0, _callFunc["default"])(this.dialogCallback, [value]);
        this.dialogCallback = _reshowConstant.T_NULL;
        return state["delete"]("dialog")
          ["delete"]("dialogProps")
          ["delete"]("dialogTo");
      },
    },
    {
      key: "alertReset",
      value: function alertReset(state, action) {
        var _this2 = this;

        var alerts = (0, _getObjectValue["default"])(action, [
          "params",
          "alerts",
        ]);
        this.alertMap = {};

        if ((0, _reshowConstant.IS_ARRAY)(alerts)) {
          alerts.map(function (a) {
            var message = toMessage(a);
            _this2.alertMap[message.id] = message;
          });
        }

        return state.set("alerts", this.getAlertList());
      },
    },
    {
      key: "alertDel",
      value: function alertDel(state, action) {
        var id = (0, _getObjectValue["default"])(action, ["params", "id"]);
        delete this.alertMap[id];
        return state.set("alerts", this.getAlertList());
      },
    },
    {
      key: "alertAdd",
      value: function alertAdd(state, action) {
        var alerts = state.get("alerts");
        var message = getMessage(action);
        var alertProps = (0, _getObjectValue["default"])(action, [
          "params",
          "alertProps",
        ]);

        if (alertProps) {
          state = state.set("alertProps", alertProps);
        }

        this.alertMap[message.id] = message;
        return state.set("alerts", this.getAlertList());
      },
    },
  ]);
  return HandleMessage;
})();

var oMess = new HandleMessage();

var _ImmutableStore = (0, _reshowFlux.ImmutableStore)(function (state, action) {
    switch (action.type) {
      case "dialog/start":
        return oMess.dialogStart(state, action);

      case "dialog/end":
        return oMess.dialogEnd(state, action);

      case "alert/reset":
        return oMess.alertReset(state, action);

      case "alert/del":
        return oMess.alertDel(state, action);

      case "alert/add":
        return oMess.alertAdd(state, action);

      default:
        return state;
    }
  }),
  store = _ImmutableStore[0],
  messageDispatch = _ImmutableStore[1];

exports.messageDispatch = messageDispatch;
var _default = store;
exports["default"] = _default;
