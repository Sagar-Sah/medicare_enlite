"use strict";

var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.update = exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(
  require("reshow-runtime/helpers/classCallCheck")
);

var _createClass2 = _interopRequireDefault(
  require("reshow-runtime/helpers/createClass")
);

var _assertThisInitialized2 = _interopRequireDefault(
  require("reshow-runtime/helpers/assertThisInitialized")
);

var _inherits2 = _interopRequireDefault(
  require("reshow-runtime/helpers/inherits")
);

var _createSuper2 = _interopRequireDefault(
  require("reshow-runtime/helpers/createSuper")
);

var _defineProperty2 = _interopRequireDefault(
  require("reshow-runtime/helpers/defineProperty")
);

var _react = require("react");

var _reshowReturn = _interopRequireDefault(require("reshow-return"));

var _reshowFlux = require("reshow-flux");

var _reshowConstant = require("reshow-constant");

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _callFunc = _interopRequireDefault(require("call-func"));

var _organismReactAjax = require("organism-react-ajax");

var _winDoc = require("win-doc");

var _withArray = require("with-array");

var _updateCanonicalUrl = _interopRequireWildcard(
  require("../../updateCanonicalUrl.js")
);

var _dispatch = _interopRequireDefault(require("../../dispatch.js"));

var _globalStore = require("../../stores/globalStore.js");

var _pageStore = _interopRequireDefault(require("../../stores/pageStore.js"));

var _jsxRuntime = require("react/jsx-runtime");

var isInit;
var lastUrl;

var update = function update(params) {
  var realTimeData = (0, _getObjectValue["default"])(params, [
    _reshowConstant.REAL_TIME_DATA_KEY,
  ]);
  var reset = (0, _getObjectValue["default"])(params, ["--reset--"]);
  var type = realTimeData
    ? "realTime"
    : "config/" + (reset ? "re" : "") + "set";
  (0, _dispatch["default"])(type, (0, _reshowFlux.toJS)(params));
  var oDoc = (0, _winDoc.doc)();

  if (oDoc.URL && lastUrl !== oDoc.URL) {
    lastUrl = oDoc.URL;
    var htmlTitle = (0, _getObjectValue["default"])(params, ["htmlTitle"]);
    oDoc.title = (0, _withArray.oneItemArrayToString)(htmlTitle) || "";
    var canonical = (0, _getObjectValue["default"])(params, [
      "data",
      "canonical",
    ]);

    if (canonical) {
      (0, _updateCanonicalUrl["default"])(canonical, params);
    }
  }
};

exports.update = update;

var Reshow = /*#__PURE__*/ (function (_PureComponent) {
  (0, _inherits2["default"])(Reshow, _PureComponent);

  var _super = (0, _createSuper2["default"])(Reshow);

  function Reshow(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Reshow);

    if (null == isInit) {
      update(props);
      isInit = false;
    }

    _this = _super.call(this, props);
    _this.state = {
      hasError: false,
    };
    _this.getPath = _this.getPath.bind(
      (0, _assertThisInitialized2["default"])(_this)
    );
    return _this;
  }

  (0, _createClass2["default"])(
    Reshow,
    [
      {
        key: "getPath",
        value: function getPath(stateThemePath) {
          return stateThemePath || this.props.themePath;
        },
        /**
         * @see globalStore https://github.com/react-atomic/reshow/blob/main/src/stores/globalStore.js
         */
      },
      {
        key: "resetGlobalPath",
        value: function resetGlobalPath(path) {
          var _this$props = this.props,
            themes = _this$props.themes,
            defaultThemePath = _this$props.defaultThemePath,
            themePath = _this$props.themePath;

          if (themes[path]) {
            _globalStore.globalStore.path = path;
            return _globalStore.globalStore.path;
          } else {
            /**
             * if not found themePath by custom value,
             *
             * should not backfill default theme to global store,
             * else will make global store become buggy.
             */
            return defaultThemePath || themePath;
          }
        },
        /**
         * @see globalStore https://github.com/react-atomic/reshow/blob/main/src/stores/globalStore.js
         */
      },
      {
        key: "getGlobalPath",
        value: function getGlobalPath() {
          return _globalStore.globalStore.path;
        },
      },
      {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (isInit) {
            console.warn("The best practice is avoid multi Reshow Component.");
            this.state = {
              hasError: _reshowConstant.T_TRUE,
            };
          } else {
            isInit = true;
          } // Server site version also need update Canonical

          (0, _updateCanonicalUrl.initCanonicalUrl)(this.props);

          if ((0, _winDoc.win)().Reshow) {
            setTimeout(function () {
              return ((0, _winDoc.win)().Reshow.isLoad =
                _reshowConstant.T_TRUE);
            });
          }
        },
      },
      {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          isInit = false;
        },
      },
      {
        key: "componentDidCatch",
        value: function componentDidCatch(error, info) {
          var onError = this.props.onError;

          if (onError) {
            (0, _callFunc["default"])(onError, [error, info]);
          } else {
            console.error([error, info]);
          }

          this.setState({
            hasError: _reshowConstant.T_TRUE,
          });
        },
        /**
         * @returns {React.ReactElement}
         */
      },
      {
        key: "render",
        value: function render() {
          var _this2 = this;

          var hasError = this.state.hasError;
          var _this$props2 = this.props,
            baseUrl = _this$props2.baseUrl,
            staticVersion = _this$props2.staticVersion,
            themePath = _this$props2.themePath,
            themes = _this$props2.themes,
            fallback = _this$props2.fallback,
            ajax = _this$props2.ajax,
            webSocketUrl = _this$props2.webSocketUrl;
          return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reshowReturn["default"], {
            store: _pageStore["default"],
            baseUrl: baseUrl,
            staticVersion: staticVersion,
            themePath: themePath,
            initStates: [
              "baseUrl",
              "staticVersion",
              "webSocketUrl",
              "themePath",
            ],
            children: function children(data) {
              return /*#__PURE__*/ (0, _jsxRuntime.jsx)(
                _organismReactAjax.AjaxPage,
                {
                  callback: update,
                  /*State*/
                  baseUrl: data.baseUrl,
                  staticVersion: data.staticVersion,
                  themePath: _this2.resetGlobalPath(
                    _this2.getPath(data.themePath)
                  ),
                  webSocketUrl: data.webSocketUrl,
                  /*Props*/
                  fallback: fallback,
                  themes: themes,
                  ajax: ajax,
                }
              );
            },
          });
        },
      },
    ],
    [
      {
        key: "getDerivedStateFromError",
        value: function getDerivedStateFromError(error) {
          return {
            hasError: _reshowConstant.T_TRUE,
          };
        },
      },
    ]
  );
  return Reshow;
})(_react.PureComponent);

(0, _defineProperty2["default"])(Reshow, "defaultProps", {
  fallback: null,
});
var _default = Reshow;
exports["default"] = _default;
