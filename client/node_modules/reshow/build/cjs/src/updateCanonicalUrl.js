"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.initCanonicalUrl =
  exports.getDocCanonicalUrl =
  exports["default"] =
    void 0;

var _getStorage = require("get-storage");

var _winDoc = require("win-doc");

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var getDocCanonicalUrl = function getDocCanonicalUrl(oDoc) {
  oDoc = oDoc || (0, _winDoc.doc)();
  var canonical = oDoc.querySelector('link[rel="canonical"]');
  return canonical ? canonical.href : false;
};

exports.getDocCanonicalUrl = getDocCanonicalUrl;

var initCanonicalUrl = function initCanonicalUrl(props) {
  var canonicalUrl = getDocCanonicalUrl();

  if (-1 !== (0, _winDoc.doc)().URL.indexOf("--disableCanonical")) {
    (0, _getStorage.sessionStorage)("disableCanonical")(1);
  } else if (canonicalUrl) {
    updateCanonicalUrl(canonicalUrl, props);
  }
};

exports.initCanonicalUrl = initCanonicalUrl;

var updateCanonicalUrl = function updateCanonicalUrl(url, props) {
  var loc = (0, _winDoc.doc)().location;

  if (
    !loc ||
    (0, _getObjectValue["default"])(props, ["disableCanonical"], function () {
      return (0, _getStorage.sessionStorage)("disableCanonical")();
    })
  ) {
    return;
  }

  url = url || getDocCanonicalUrl();

  if (!url) {
    return;
  }

  var newUrl = function newUrl(url) {
    return url + loc.search + loc.hash;
  };

  if (-1 !== url.indexOf(loc.hostname)) {
    if (0 !== url.indexOf(loc.protocol)) {
      var urlArr = url.split(":");
      url = loc.protocol + urlArr[1];
    }

    var history = (0, _winDoc.win)().history || {};
    history.replaceState && history.replaceState("", "", newUrl(url));
  } else {
    loc.replace(newUrl(url));
  }
};

var _default = updateCanonicalUrl;
exports["default"] = _default;
