import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import { ImmutableStore, mergeMap } from "reshow-flux";
import get from "get-object-value";
import callfunc from "call-func";
import { T_NULL, IS_ARRAY, KEYS } from "reshow-constant";
import { pageDispatch } from "./pageStore.mjs";
var alertCount = 0;

var toMessage = function toMessage(message) {
  if (-1 !== "string|number".indexOf(typeof message)) {
    message = {
      message
    };
  }

  if (!message.id) {
    message.id = "m-" + alertCount;
    alertCount++;
  }

  return message;
};

var getMessage = function getMessage(action) {
  return toMessage(get(action, ["params", "message"]));
};

var HandleMessage = /*#__PURE__*/function () {
  function HandleMessage() {
    _classCallCheck(this, HandleMessage);

    _defineProperty(this, "dialogCallback", T_NULL);

    _defineProperty(this, "alertMap", {});
  }

  _createClass(HandleMessage, [{
    key: "getAlertList",
    value: function getAlertList() {
      var _this = this;

      return KEYS(this.alertMap).map(function (key) {
        return _this.alertMap[key];
      });
    }
  }, {
    key: "dialogStart",
    value: function dialogStart(state, action) {
      var params = get(action, ["params"]);
      var {
        dialog,
        dialogProps,
        dialogTo,
        callback
      } = params;
      var next = {
        dialog
      };

      if (dialogProps) {
        next.dialogProps = dialogProps;
      }

      if (dialogTo) {
        next.dialogTo = dialogTo;
      }

      if (callback) {
        this.dialogCallback = callback;
      }

      return mergeMap(state, next);
    }
  }, {
    key: "dialogEnd",
    value: function dialogEnd(state, action) {
      var dialogTo = state.get("dialogTo") || "dialogReturn";
      var value = get(action, ["params", "value"]);

      if (value != T_NULL) {
        pageDispatch({
          [dialogTo]: value
        });
      }

      callfunc(this.dialogCallback, [value]);
      this.dialogCallback = T_NULL;
      return state.delete("dialog").delete("dialogProps").delete("dialogTo");
    }
  }, {
    key: "alertReset",
    value: function alertReset(state, action) {
      var _this2 = this;

      var alerts = get(action, ["params", "alerts"]);
      this.alertMap = {};

      if (IS_ARRAY(alerts)) {
        alerts.map(function (a) {
          var message = toMessage(a);
          _this2.alertMap[message.id] = message;
        });
      }

      return state.set("alerts", this.getAlertList());
    }
  }, {
    key: "alertDel",
    value: function alertDel(state, action) {
      var id = get(action, ["params", "id"]);
      delete this.alertMap[id];
      return state.set("alerts", this.getAlertList());
    }
  }, {
    key: "alertAdd",
    value: function alertAdd(state, action) {
      var alerts = state.get("alerts");
      var message = getMessage(action);
      var alertProps = get(action, ["params", "alertProps"]);

      if (alertProps) {
        state = state.set("alertProps", alertProps);
      }

      this.alertMap[message.id] = message;
      return state.set("alerts", this.getAlertList());
    }
  }]);

  return HandleMessage;
}();

var oMess = new HandleMessage();
var [store, messageDispatch] = ImmutableStore(function (state, action) {
  switch (action.type) {
    case "dialog/start":
      return oMess.dialogStart(state, action);

    case "dialog/end":
      return oMess.dialogEnd(state, action);

    case "alert/reset":
      return oMess.alertReset(state, action);

    case "alert/del":
      return oMess.alertDel(state, action);

    case "alert/add":
      return oMess.alertAdd(state, action);

    default:
      return state;
  }
});
export default store;
export { messageDispatch };