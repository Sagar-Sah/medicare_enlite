import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import { PureComponent } from "react";
import Return from "reshow-return";
import { toJS } from "reshow-flux";
import { REAL_TIME_DATA_KEY, T_TRUE } from "reshow-constant";
import get from "get-object-value";
import callfunc from "call-func";
import { AjaxPage } from "organism-react-ajax";
import { doc, win } from "win-doc";
import { oneItemArrayToString } from "with-array";
import updateCanonicalUrl, { initCanonicalUrl } from "../../updateCanonicalUrl.mjs";
import dispatch from "../../dispatch.mjs";
import { globalStore } from "../../stores/globalStore.mjs";
import pageStore from "../../stores/pageStore.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
var isInit;
var lastUrl;

var update = function update(params) {
  var realTimeData = get(params, [REAL_TIME_DATA_KEY]);
  var reset = get(params, ["--reset--"]);
  var type = realTimeData ? "realTime" : "config/" + (reset ? "re" : "") + "set";
  dispatch(type, toJS(params));
  var oDoc = doc();

  if (oDoc.URL && lastUrl !== oDoc.URL) {
    lastUrl = oDoc.URL;
    var htmlTitle = get(params, ["htmlTitle"]);
    oDoc.title = oneItemArrayToString(htmlTitle) || "";
    var canonical = get(params, ["data", "canonical"]);

    if (canonical) {
      updateCanonicalUrl(canonical, params);
    }
  }
};

var Reshow = /*#__PURE__*/function (_PureComponent) {
  _inherits(Reshow, _PureComponent);

  var _super = _createSuper(Reshow);

  function Reshow(props) {
    var _this;

    _classCallCheck(this, Reshow);

    if (null == isInit) {
      update(props);
      isInit = false;
    }

    _this = _super.call(this, props);
    _this.state = {
      hasError: false
    };
    _this.getPath = _this.getPath.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Reshow, [{
    key: "getPath",
    value: function getPath(stateThemePath) {
      return stateThemePath || this.props.themePath;
    }
    /**
     * @see globalStore https://github.com/react-atomic/reshow/blob/main/src/stores/globalStore.js
     */

  }, {
    key: "resetGlobalPath",
    value: function resetGlobalPath(path) {
      var {
        themes,
        defaultThemePath,
        themePath
      } = this.props;

      if (themes[path]) {
        globalStore.path = path;
        return globalStore.path;
      } else {
        /**
         * if not found themePath by custom value,
         *
         * should not backfill default theme to global store,
         * else will make global store become buggy.
         */
        return defaultThemePath || themePath;
      }
    }
    /**
     * @see globalStore https://github.com/react-atomic/reshow/blob/main/src/stores/globalStore.js
     */

  }, {
    key: "getGlobalPath",
    value: function getGlobalPath() {
      return globalStore.path;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (isInit) {
        console.warn("The best practice is avoid multi Reshow Component.");
        this.state = {
          hasError: T_TRUE
        };
      } else {
        isInit = true;
      } // Server site version also need update Canonical


      initCanonicalUrl(this.props);

      if (win().Reshow) {
        setTimeout(function () {
          return win().Reshow.isLoad = T_TRUE;
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      isInit = false;
    }
  }, {
    key: "componentDidCatch",
    value: function componentDidCatch(error, info) {
      var {
        onError
      } = this.props;

      if (onError) {
        callfunc(onError, [error, info]);
      } else {
        console.error([error, info]);
      }

      this.setState({
        hasError: T_TRUE
      });
    }
    /**
     * @returns {React.ReactElement}
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var {
        hasError
      } = this.state;
      var {
        baseUrl,
        staticVersion,
        themePath,
        themes,
        fallback,
        ajax,
        webSocketUrl
      } = this.props;
      return /*#__PURE__*/_jsx(Return, {
        store: pageStore,
        baseUrl: baseUrl,
        staticVersion: staticVersion,
        themePath: themePath,
        initStates: ["baseUrl", "staticVersion", "webSocketUrl", "themePath"],
        children: function children(data) {
          return /*#__PURE__*/_jsx(AjaxPage, {
            callback: update
            /*State*/
            ,
            baseUrl: data.baseUrl,
            staticVersion: data.staticVersion,
            themePath: _this2.resetGlobalPath(_this2.getPath(data.themePath)),
            webSocketUrl: data.webSocketUrl
            /*Props*/
            ,
            fallback: fallback,
            themes: themes,
            ajax: ajax
          });
        }
      });
    }
  }], [{
    key: "getDerivedStateFromError",
    value: function getDerivedStateFromError(error) {
      return {
        hasError: T_TRUE
      };
    }
  }]);

  return Reshow;
}(PureComponent);

_defineProperty(Reshow, "defaultProps", {
  fallback: null
});

export default Reshow;
export { update };