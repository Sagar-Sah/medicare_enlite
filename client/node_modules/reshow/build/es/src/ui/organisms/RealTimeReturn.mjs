import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import get from "get-object-value";
import { useConnect } from "reshow-flux";
import { build } from "react-atomic-molecule";
import { getReturn } from "reshow-return";
import { KEYS, IS_ARRAY, REAL_TIME_URL, REAL_TIME_DATA_KEY } from "reshow-constant";
import { connectOptions } from "../molecules/ReshowComponent.mjs";
import realTimeStore from "../../stores/realTimeStore.mjs";

var calculateState = function calculateState(prevState, options) {
  /**
   * storeState was pass from reducer directly to avoid synchronous get wrong data.
   */
  var {
    realTimePath: path,
    realTimeUrl: url,
    realTimeReset,
    storeSyncState: realTimeState
  } = options;

  if (IS_ARRAY(path) && path.length) {
    path.unshift(REAL_TIME_DATA_KEY);
  }

  var state = get(realTimeState, path || [REAL_TIME_DATA_KEY]);
  var wsUrl = get(realTimeState, [REAL_TIME_URL]);

  if (state && (!url || url === wsUrl)) {
    state[REAL_TIME_URL] = wsUrl;
    return state;
  } else {
    if (realTimeReset) {
      // Reset for when reconnection to new websocket server
      // will not send duplicate data to client
      var reset = {};
      KEYS(prevState).forEach(function (key) {
        return reset[key] = null;
      });
      return reset;
    } else {
      return prevState;
    }
  }
};

var storeLocator = function storeLocator(props) {
  return props.store || realTimeStore;
};

var myConnectOptions = _objectSpread(_objectSpread({}, connectOptions), {}, {
  calculateState,
  realTimePath: null,
  realTimeUrl: null,
  realTimeReset: false,
  storeLocator
});

var RealTimeReturn = getReturn({
  cleanProps: ["realTimePath", "realTimeUrl", "realTimeReset"],
  useConnect: useConnect(myConnectOptions),
  displayName: "RealTimeReturn"
});
export default RealTimeReturn;