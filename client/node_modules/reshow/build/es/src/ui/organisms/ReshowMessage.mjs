import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import { memo } from "react";
import { AlertsNotifier, Dialog, DisplayPopupEl } from "organism-react-popup";
import { build, SemanticUI } from "react-atomic-molecule";
import { toJS } from "reshow-flux";
import get from "get-object-value"; // Local import

import { Return } from "../molecules/ReshowComponent.mjs";
import messageStore from "../../stores/messageStore.mjs";
import { dispatch } from "../../index.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var handleDismiss = function handleDismiss(e) {
  var _e$data;

  var id = e === null || e === void 0 ? void 0 : (_e$data = e.data) === null || _e$data === void 0 ? void 0 : _e$data.id;

  if (id) {
    dispatch("alert/del", {
      id
    });
  }
};

var handleClick = function handleClick(dialog) {
  return function (e) {
    var value = get(e, ["currentTarget", "value"]);
    setTimeout(function () {
      if (dialog) {
        dispatch("dialog/end", {
          value
        });
      }
    });
  };
};

var Body = function Body(props) {
  var {
    defaultAlertProps,
    defaultDialogProps,
    alerts,
    alertProps,
    alertComponent = AlertsNotifier,
    dialog,
    dialogProps,
    dialogComponent = Dialog
  } = props;
  var thisDialog = null;

  if (dialog) {
    thisDialog = /*#__PURE__*/_jsx(DisplayPopupEl, {
      children: build(dialogComponent)(_objectSpread(_objectSpread(_objectSpread({}, defaultDialogProps), toJS(dialogProps)), {}, {
        onClick: handleClick(dialog),
        name: "reshow-dialog"
      }), toJS(dialog))
    });
  }

  return /*#__PURE__*/_jsxs(SemanticUI, {
    children: [thisDialog, build(alertComponent)(_objectSpread(_objectSpread(_objectSpread({}, defaultAlertProps), toJS(alertProps)), {}, {
      onDismiss: handleDismiss,
      alerts: toJS(alerts),
      name: "reshow-alerts"
    }))]
  });
};

var ReshowMessage = /*#__PURE__*/memo(function (props) {
  return /*#__PURE__*/_jsx(Return, {
    store: messageStore,
    initStates: ["alerts", "alertProps", "dialog", "dialogProps"],
    children: /*#__PURE__*/_jsx(Body, _objectSpread({}, props))
  });
});
ReshowMessage.displayName = "ReshowMessage";
export default ReshowMessage;