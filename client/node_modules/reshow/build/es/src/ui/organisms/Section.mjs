import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["immutable", "children"],
    _excluded2 = ["section"],
    _excluded3 = ["shouldRender"];
import get from "get-object-value";
import { build } from "react-atomic-molecule";
import { useConnect, forEachMap } from "reshow-flux";
import { connectOptions } from "../molecules/ReshowComponent.mjs";
import pageStore from "../../stores/pageStore.mjs";

var {
  pathStates
} = connectOptions,
    otherOptions = _objectWithoutProperties(connectOptions, ["pathStates"]);

otherOptions.initStates = ["section", "I18N"];

var Section = function Section(props) {
  var {
    immutable: propsImmutable,
    children
  } = props,
      otherProps = _objectWithoutProperties(props, _excluded);

  var _useConnect = useConnect(otherOptions)(props),
      {
    section
  } = _useConnect,
      state = _objectWithoutProperties(_useConnect, _excluded2);

  if (!section || !children) {
    return null;
  }

  var name = props.name;
  var immutable = propsImmutable !== null && propsImmutable !== void 0 ? propsImmutable : pageStore.getState().get("immutable");

  var allParams = _objectSpread(_objectSpread({}, connectOptions.reset(otherProps)), state);

  if (immutable) {
    var thisSection = get(section, [name]);

    if (!thisSection) {
      return null;
    }

    var shouldRender = get(thisSection, ["shouldRender"]);

    if (!shouldRender) {
      return null;
    }

    forEachMap(thisSection, function (v, k) {
      return allParams[k] = v;
    });
    delete allParams["shouldRender"];
  } else {
    var _get = get(section, [name], {}),
        {
      shouldRender: _shouldRender
    } = _get,
        others = _objectWithoutProperties(_get, _excluded3);

    if (!_shouldRender) {
      return null;
    }

    allParams = _objectSpread(_objectSpread({}, others), allParams);
  }

  var noName = children.every ? children.every(function (child) {
    return !get(child, ["props", "name"]);
  }) : !get(children, ["props", "name"]);

  if (!noName) {
    delete allParams["name"];
  }

  return build(children)(allParams);
};

Section.displayName = "ReshowSection";
export default Section;