import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";

var _FakeComponent, _FakeComponent2, _FakeComponent3;

import React, { PureComponent } from "react";
import { expect } from "chai";
import { act, render, waitFor, cleanIt } from "reshow-unit";
import { REAL_TIME_DATA_KEY } from "reshow-constant";
import { RealTimeReturn, Return, dispatch } from "../../../index.mjs";
import { jsx as _jsx } from "react/jsx-runtime";

var TestEl = /*#__PURE__*/function (_PureComponent) {
  _inherits(TestEl, _PureComponent);

  var _super = _createSuper(TestEl);

  function TestEl() {
    _classCallCheck(this, TestEl);

    return _super.apply(this, arguments);
  }

  _createClass(TestEl, [{
    key: "render",
    value: function render() {
      var props = _objectSpread({}, this.props);

      return /*#__PURE__*/_jsx("div", _objectSpread({}, props));
    }
  }]);

  return TestEl;
}(PureComponent);

var uFake;

var FakeComponent = /*#__PURE__*/function (_PureComponent2) {
  _inherits(FakeComponent, _PureComponent2);

  var _super2 = _createSuper(FakeComponent);

  function FakeComponent(props) {
    var _this;

    _classCallCheck(this, FakeComponent);

    _this = _super2.call(this, props);
    uFake = _assertThisInitialized(_this);
    return _this;
  }

  _createClass(FakeComponent, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var {
        realTimeReset
      } = this.props;
      return /*#__PURE__*/_jsx(Return, {
        children: /*#__PURE__*/_jsx(RealTimeReturn, {
          realTimeReset: realTimeReset,
          children: /*#__PURE__*/_jsx(TestEl, {
            ref: function ref(el) {
              return _this2.el = el;
            }
          })
        })
      });
    }
  }]);

  return FakeComponent;
}(PureComponent);

describe("Test RealTimeReturn", function () {
  var uWrap;
  afterEach(function () {
    dispatch("config/reset");
    cleanIt();
  });
  it("dispatch Page State first", /*#__PURE__*/_asyncToGenerator(function* () {
    uWrap = render(_FakeComponent || (_FakeComponent = /*#__PURE__*/_jsx(FakeComponent, {})));
    yield act(function () {
      return dispatch({
        data: "foo"
      });
    });
    yield waitFor(function () {
      return expect(uFake.el.props.data).to.equal("foo");
    });
    yield act(function () {
      dispatch({
        type: "realTime",
        params: {
          [REAL_TIME_DATA_KEY]: {
            data: "bar"
          }
        }
      });
    }, 3);
    yield waitFor(function () {
      return expect(uFake.el.props.data).to.equal("bar");
    });
  }));
  it("dispatch Realtime State first and not reset", /*#__PURE__*/_asyncToGenerator(function* () {
    uWrap = render(_FakeComponent2 || (_FakeComponent2 = /*#__PURE__*/_jsx(FakeComponent, {})));
    yield act(function () {
      return dispatch({
        type: "realTime",
        params: {
          [REAL_TIME_DATA_KEY]: {
            data: "bar"
          }
        }
      });
    });
    expect(uFake.el.props.data).to.equal("bar");
    yield act(function () {
      return dispatch("realTime");
    });
    yield act(function () {
      return dispatch({
        data: "foo"
      });
    });
    yield act(function () {});
    yield waitFor(function () {
      return expect(uFake.el.props.data).to.equal("bar");
    });
  }));
  it("test realtime reset", /*#__PURE__*/_asyncToGenerator(function* () {
    uWrap = render(_FakeComponent3 || (_FakeComponent3 = /*#__PURE__*/_jsx(FakeComponent, {
      realTimeReset: true
    })));
    yield act(function () {
      return dispatch({
        type: "realTime",
        params: {
          [REAL_TIME_DATA_KEY]: {
            data: "bar"
          }
        }
      });
    }, 5);
    expect(uFake.el.props.data).to.equal("bar");
    yield act(function () {
      return dispatch("realTime");
    });
    yield act(function () {
      return dispatch({
        data: "foo"
      });
    }, 5);
    yield act(function () {});
    yield waitFor(function () {
      return expect(uFake.el.props.data).to.be.null;
    });
  }));
});