import _asyncToGenerator from "reshow-runtime/es/helpers/asyncToGenerator";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";

var _div, _FakeComponent, _FakeComponent2, _Section, _FakeComponent3, _FakeComponent4;

import React, { PureComponent } from "react";
import { expect } from "chai";
import { fromJS } from "reshow-flux";
import { act, render, waitFor, cleanIt } from "reshow-unit";
import { Section, dispatch } from "../../../index.mjs";
import { globalStore } from "../../../stores/globalStore.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var TestEl = /*#__PURE__*/function (_PureComponent) {
  _inherits(TestEl, _PureComponent);

  var _super = _createSuper(TestEl);

  function TestEl() {
    _classCallCheck(this, TestEl);

    return _super.apply(this, arguments);
  }

  _createClass(TestEl, [{
    key: "render",
    value: function render() {
      return _div || (_div = /*#__PURE__*/_jsx("div", {}));
    }
  }]);

  return TestEl;
}(PureComponent);

var uFake;

var FakeComponent = /*#__PURE__*/function (_PureComponent2) {
  _inherits(FakeComponent, _PureComponent2);

  var _super2 = _createSuper(FakeComponent);

  function FakeComponent(props) {
    var _this;

    _classCallCheck(this, FakeComponent);

    _this = _super2.call(this, props);
    uFake = _assertThisInitialized(_this);
    return _this;
  }

  _createClass(FakeComponent, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var {
        immutable,
        name
      } = this.props;
      return /*#__PURE__*/_jsx(Section, {
        name: name,
        immutable: immutable,
        children: /*#__PURE__*/_jsx(TestEl, {
          ref: function ref(el) {
            return _this2.el = el;
          }
        })
      });
    }
  }]);

  return FakeComponent;
}(PureComponent);

_defineProperty(FakeComponent, "defaultProps", {
  name: "test"
});

describe("Test Section", function () {
  beforeEach(function () {
    globalStore.path = null;
  });
  afterEach(function () {
    dispatch("config/reset");
    cleanIt();
  });
  it("Section is existed", /*#__PURE__*/_asyncToGenerator(function* () {
    var wrap = render(_FakeComponent || (_FakeComponent = /*#__PURE__*/_jsx(FakeComponent, {})));
    yield act(function () {
      return dispatch({
        section: {
          test: {
            shouldRender: true,
            aaa: {
              bbb: "ccc"
            }
          }
        },
        I18N: {
          ddd: "fff"
        }
      });
    }, 3);
    yield waitFor(function () {
      expect(uFake.el.props.aaa).to.deep.equal({
        bbb: "ccc"
      });
      expect(uFake.el.props.I18N).to.deep.equal({
        ddd: "fff"
      });
    });
  }));
  it("Section is not existed", /*#__PURE__*/_asyncToGenerator(function* () {
    var wrap = render(_FakeComponent2 || (_FakeComponent2 = /*#__PURE__*/_jsx(FakeComponent, {
      name: "xxx"
    })));
    yield act(function () {
      return dispatch({
        section: null
      });
    }, 3);
    expect("undefined" === typeof uFake.el).to.be.true;
  }));
  it("Section with empty child", function () {
    act(function () {
      return dispatch({
        section: {
          test: {
            shouldRender: true,
            aaa: {
              bbb: "ccc"
            }
          }
        },
        I18N: {
          ddd: "fff"
        }
      });
    }, 3);
    var wrap = render(_Section || (_Section = /*#__PURE__*/_jsx(Section, {
      name: "test"
    })));
    expect(wrap.html()).to.be.empty;
  });
  it("Section is existed with immutable", /*#__PURE__*/_asyncToGenerator(function* () {
    var wrap = render(_FakeComponent3 || (_FakeComponent3 = /*#__PURE__*/_jsx(FakeComponent, {
      immutable: true
    })));
    yield act(function () {
      return dispatch(fromJS({
        section: {
          test: {
            shouldRender: true,
            aaa: {
              bbb: "ccc"
            }
          }
        },
        I18N: {
          ddd: "fff"
        }
      }));
    }, 3);
    yield waitFor(function () {
      expect(uFake.el.props.aaa.toJS()).to.deep.equal({
        bbb: "ccc"
      });
      expect(uFake.el.props.I18N.toJS()).to.deep.equal({
        ddd: "fff"
      });
    });
  }));
  it("Section is not existed with immutable", /*#__PURE__*/_asyncToGenerator(function* () {
    var wrap = render(_FakeComponent4 || (_FakeComponent4 = /*#__PURE__*/_jsx(FakeComponent, {
      name: "xxx",
      immutable: true
    })));
    yield act(function () {
      return dispatch({
        section: null
      });
    }, 5);
    yield waitFor(function () {
      expect("undefined" === typeof uFake.el).to.be.true;
    });
  }));
  it("pass name to child", /*#__PURE__*/_asyncToGenerator(function* () {
    var uFake;

    var PassName = /*#__PURE__*/function (_PureComponent3) {
      _inherits(PassName, _PureComponent3);

      var _super3 = _createSuper(PassName);

      function PassName(props) {
        var _this3;

        _classCallCheck(this, PassName);

        _this3 = _super3.call(this, props);
        uFake = _assertThisInitialized(_this3);
        return _this3;
      }

      _createClass(PassName, [{
        key: "render",
        value: function render() {
          var _this4 = this;

          var {
            immutable,
            name
          } = this.props;
          return /*#__PURE__*/_jsx(Section, {
            name: "test",
            children: /*#__PURE__*/_jsx("div", {
              ref: function ref(el) {
                return _this4.el = el;
              }
            })
          });
        }
      }]);

      return PassName;
    }(PureComponent);

    var wrap = render( /*#__PURE__*/_jsx(PassName, {}));
    yield act(function () {
      return dispatch({
        section: {
          test: {
            shouldRender: true,
            aaa: {
              bbb: "ccc"
            }
          }
        }
      });
    }, 5);
    yield waitFor(function () {
      expect(uFake.el.getAttribute("name")).to.equal("test");
    });
  }));
  it("not pass name if child already have name", /*#__PURE__*/_asyncToGenerator(function* () {
    var uFake;

    var NotPassName = /*#__PURE__*/function (_PureComponent4) {
      _inherits(NotPassName, _PureComponent4);

      var _super4 = _createSuper(NotPassName);

      function NotPassName(props) {
        var _this5;

        _classCallCheck(this, NotPassName);

        _this5 = _super4.call(this, props);
        uFake = _assertThisInitialized(_this5);
        return _this5;
      }

      _createClass(NotPassName, [{
        key: "render",
        value: function render() {
          var _this6 = this;

          var {
            immutable,
            name
          } = this.props;
          return /*#__PURE__*/_jsx(Section, {
            name: "test",
            children: /*#__PURE__*/_jsx("div", {
              name: "test2",
              ref: function ref(el) {
                return _this6.el = el;
              }
            })
          });
        }
      }]);

      return NotPassName;
    }(PureComponent);

    var wrap = render( /*#__PURE__*/_jsx(NotPassName, {}));
    yield act(function () {
      return dispatch({
        section: {
          test: {
            shouldRender: true,
            aaa: {
              bbb: "ccc"
            }
          }
        }
      });
    }, 5);
    yield waitFor(function () {
      return expect(uFake.el.getAttribute("name")).to.equal("test2");
    });
  }));
  it("not pass name if one of child already have name", /*#__PURE__*/_asyncToGenerator(function* () {
    var uFake;

    var NotPassNameMultiChild = /*#__PURE__*/function (_PureComponent5) {
      _inherits(NotPassNameMultiChild, _PureComponent5);

      var _super5 = _createSuper(NotPassNameMultiChild);

      function NotPassNameMultiChild(props) {
        var _this7;

        _classCallCheck(this, NotPassNameMultiChild);

        _this7 = _super5.call(this, props);
        uFake = _assertThisInitialized(_this7);
        return _this7;
      }

      _createClass(NotPassNameMultiChild, [{
        key: "render",
        value: function render() {
          var _this8 = this;

          var {
            immutable,
            name
          } = this.props;
          return /*#__PURE__*/_jsxs(Section, {
            name: "test",
            children: [/*#__PURE__*/_jsx("div", {
              ref: function ref(el) {
                _this8.el1 = el;
              }
            }), /*#__PURE__*/_jsx("div", {
              name: "test2",
              ref: function ref(el) {
                return _this8.el2 = el;
              }
            })]
          });
        }
      }]);

      return NotPassNameMultiChild;
    }(PureComponent);

    var wrap = render( /*#__PURE__*/_jsx(NotPassNameMultiChild, {}));
    yield act(function () {
      return dispatch({
        section: {
          test: {
            shouldRender: true,
            aaa: {
              bbb: "ccc"
            }
          }
        }
      });
    }, 3);
    yield waitFor(function () {
      expect(uFake.el1.getAttribute("name")).to.be.null;
      expect(uFake.el2.getAttribute("name")).to.equal("test2");
    });
  }));
});